
mac-daddies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e4c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff4  08000ff4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff4  08000ff4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff4  08000ff4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001058  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001058  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015f1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000066e  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000109  00000000  00000000  00021eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003352  00000000  00000000  00021fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f52  00000000  00000000  00025313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000af77  00000000  00000000  00027265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b68  00000000  00000000  000321dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00032d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000fcc 	.word	0x08000fcc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000fcc 	.word	0x08000fcc

080001d8 <user_led_init>:
static volatile RCC *const rcc = (RCC*)RCC_BASE;
static volatile GPIOX *const gpiob = (GPIOX*) GPIOB;
static volatile GPIOX *const gpioa = (GPIOX*) GPIOA;
static volatile TIMX_16 *tim4 = (TIMX_16*) TIM4;

void user_led_init() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	rcc->AHB1ENR |= GPIOA_EN;
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <user_led_init+0x28>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <user_led_init+0x28>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	gpioa->MODER |= (0b01 << 5 * 2);
 80001e8:	4b06      	ldr	r3, [pc, #24]	; (8000204 <user_led_init+0x2c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <user_led_init+0x2c>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
//	gpioa->ODR |= (0b01 << 5);
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023800 	.word	0x40023800
 8000204:	40020000 	.word	0x40020000

08000208 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	init_usart2(57600,F_CPU);
 800020c:	4905      	ldr	r1, [pc, #20]	; (8000224 <main+0x1c>)
 800020e:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 8000212:	f000 f8f7 	bl	8000404 <init_usart2>
	printf("Hello World!\n");
 8000216:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x20>)
 8000218:	f000 fa8c 	bl	8000734 <puts>
	user_led_init();
 800021c:	f7ff ffdc 	bl	80001d8 <user_led_init>
    /* Loop forever */
	for(;;);
 8000220:	e7fe      	b.n	8000220 <main+0x18>
 8000222:	bf00      	nop
 8000224:	00f42400 	.word	0x00f42400
 8000228:	08000fe4 	.word	0x08000fe4

0800022c <_close>:
  }
  return len;
}

int _close(int file)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000238:	4618      	mov	r0, r3
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000254:	605a      	str	r2, [r3, #4]
  return 0;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <_isatty>:

int _isatty(int file)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800026c:	2301      	movs	r3, #1
}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800027a:	b480      	push	{r7}
 800027c:	b085      	sub	sp, #20
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000286:	2300      	movs	r3, #0
}
 8000288:	4618      	mov	r0, r3
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800029c:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <_sbrk+0x5c>)
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <_sbrk+0x60>)
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <_sbrk+0x64>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d102      	bne.n	80002b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <_sbrk+0x64>)
 80002b2:	4a12      	ldr	r2, [pc, #72]	; (80002fc <_sbrk+0x68>)
 80002b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <_sbrk+0x64>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4413      	add	r3, r2
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d207      	bcs.n	80002d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002c4:	f000 fc12 	bl	8000aec <__errno>
 80002c8:	4603      	mov	r3, r0
 80002ca:	220c      	movs	r2, #12
 80002cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
 80002d2:	e009      	b.n	80002e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <_sbrk+0x64>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <_sbrk+0x64>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <_sbrk+0x64>)
 80002e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80002e6:	68fb      	ldr	r3, [r7, #12]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3718      	adds	r7, #24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20020000 	.word	0x20020000
 80002f4:	00000400 	.word	0x00000400
 80002f8:	20000078 	.word	0x20000078
 80002fc:	200001c8 	.word	0x200001c8

08000300 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	e012      	b.n	800033c <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	3301      	adds	r3, #1
 800031a:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 800031c:	f000 f836 	bl	800038c <usart2_getch>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b0a      	cmp	r3, #10
 800032e:	d00a      	beq.n	8000346 <_read+0x46>
		ptr++;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3301      	adds	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbe8      	blt.n	8000316 <_read+0x16>
 8000344:	e000      	b.n	8000348 <_read+0x48>
		if(*ptr == '\n') break;
 8000346:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 8000348:	693b      	ldr	r3, [r7, #16]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <_write>:

int _write(int file, char *ptr, int len)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b086      	sub	sp, #24
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	e009      	b.n	8000378 <_write+0x26>
	{
		usart2_putch(*ptr++);
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	60ba      	str	r2, [r7, #8]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f82f 	bl	80003d0 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	3301      	adds	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	429a      	cmp	r2, r3
 800037e:	dbf1      	blt.n	8000364 <_write+0x12>
	}
	return len;
 8000380:	687b      	ldr	r3, [r7, #4]
}
 8000382:	4618      	mov	r0, r3
 8000384:	3718      	adds	r7, #24
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <usart2_getch>:



char usart2_getch(){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8000392:	bf00      	nop
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <usart2_getch+0x3c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b20      	cmp	r3, #32
 800039e:	d1f9      	bne.n	8000394 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <usart2_getch+0x40>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f811 	bl	80003d0 <usart2_putch>

	if (c == '\r'){  // If character is CR
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b0d      	cmp	r3, #13
 80003b2:	d104      	bne.n	80003be <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 80003b4:	200a      	movs	r0, #10
 80003b6:	f000 f80b 	bl	80003d0 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 80003ba:	230a      	movs	r3, #10
 80003bc:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 80003be:	79fb      	ldrb	r3, [r7, #7]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40004400 	.word	0x40004400
 80003cc:	40004404 	.word	0x40004404

080003d0 <usart2_putch>:

void usart2_putch(char c){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 80003da:	bf00      	nop
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <usart2_putch+0x2c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e4:	2b80      	cmp	r3, #128	; 0x80
 80003e6:	d1f9      	bne.n	80003dc <usart2_putch+0xc>
	*(USART_DR) = c;
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <usart2_putch+0x30>)
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40004400 	.word	0x40004400
 8000400:	40004404 	.word	0x40004404

08000404 <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 800040e:	4b20      	ldr	r3, [pc, #128]	; (8000490 <init_usart2+0x8c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <init_usart2+0x8c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 800041a:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <init_usart2+0x90>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a1d      	ldr	r2, [pc, #116]	; (8000494 <init_usart2+0x90>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <init_usart2+0x94>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <init_usart2+0x94>)
 800042c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000430:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <init_usart2+0x94>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <init_usart2+0x94>)
 8000438:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800043c:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <init_usart2+0x98>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <init_usart2+0x98>)
 8000444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000448:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <init_usart2+0x98>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a13      	ldr	r2, [pc, #76]	; (800049c <init_usart2+0x98>)
 8000450:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000454:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <init_usart2+0x9c>)
 8000458:	f242 020c 	movw	r2, #8204	; 0x200c
 800045c:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <init_usart2+0xa0>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <init_usart2+0xa4>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 800046a:	4910      	ldr	r1, [pc, #64]	; (80004ac <init_usart2+0xa8>)
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	fbb2 f3f3 	udiv	r3, r2, r3
 8000474:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <init_usart2+0xac>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	6898      	ldr	r0, [r3, #8]
 800047c:	2300      	movs	r3, #0
 800047e:	2202      	movs	r2, #2
 8000480:	2100      	movs	r1, #0
 8000482:	f000 f95f 	bl	8000744 <setvbuf>
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40023830 	.word	0x40023830
 8000494:	40023840 	.word	0x40023840
 8000498:	40020020 	.word	0x40020020
 800049c:	40020000 	.word	0x40020000
 80004a0:	4000440c 	.word	0x4000440c
 80004a4:	40004410 	.word	0x40004410
 80004a8:	40004414 	.word	0x40004414
 80004ac:	40004408 	.word	0x40004408
 80004b0:	20000058 	.word	0x20000058

080004b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	; (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	; (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e2:	f000 fb09 	bl	8000af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fe8f 	bl	8000208 <main>

080004ea <LoopForever>:

LoopForever:
  b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   r0, =_estack
 80004ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004f8:	08000ffc 	.word	0x08000ffc
  ldr r2, =_sbss
 80004fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000500:	200001c8 	.word	0x200001c8

08000504 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC_IRQHandler>
	...

08000508 <std>:
 8000508:	2300      	movs	r3, #0
 800050a:	b510      	push	{r4, lr}
 800050c:	4604      	mov	r4, r0
 800050e:	e9c0 3300 	strd	r3, r3, [r0]
 8000512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000516:	6083      	str	r3, [r0, #8]
 8000518:	8181      	strh	r1, [r0, #12]
 800051a:	6643      	str	r3, [r0, #100]	; 0x64
 800051c:	81c2      	strh	r2, [r0, #14]
 800051e:	6183      	str	r3, [r0, #24]
 8000520:	4619      	mov	r1, r3
 8000522:	2208      	movs	r2, #8
 8000524:	305c      	adds	r0, #92	; 0x5c
 8000526:	f000 fa93 	bl	8000a50 <memset>
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <std+0x58>)
 800052c:	6263      	str	r3, [r4, #36]	; 0x24
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <std+0x5c>)
 8000530:	62a3      	str	r3, [r4, #40]	; 0x28
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <std+0x60>)
 8000534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <std+0x64>)
 8000538:	6323      	str	r3, [r4, #48]	; 0x30
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <std+0x68>)
 800053c:	6224      	str	r4, [r4, #32]
 800053e:	429c      	cmp	r4, r3
 8000540:	d006      	beq.n	8000550 <std+0x48>
 8000542:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000546:	4294      	cmp	r4, r2
 8000548:	d002      	beq.n	8000550 <std+0x48>
 800054a:	33d0      	adds	r3, #208	; 0xd0
 800054c:	429c      	cmp	r4, r3
 800054e:	d105      	bne.n	800055c <std+0x54>
 8000550:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000558:	f000 baf2 	b.w	8000b40 <__retarget_lock_init_recursive>
 800055c:	bd10      	pop	{r4, pc}
 800055e:	bf00      	nop
 8000560:	080008a1 	.word	0x080008a1
 8000564:	080008c3 	.word	0x080008c3
 8000568:	080008fb 	.word	0x080008fb
 800056c:	0800091f 	.word	0x0800091f
 8000570:	2000007c 	.word	0x2000007c

08000574 <stdio_exit_handler>:
 8000574:	4a02      	ldr	r2, [pc, #8]	; (8000580 <stdio_exit_handler+0xc>)
 8000576:	4903      	ldr	r1, [pc, #12]	; (8000584 <stdio_exit_handler+0x10>)
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <stdio_exit_handler+0x14>)
 800057a:	f000 b869 	b.w	8000650 <_fwalk_sglue>
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000
 8000584:	08000e55 	.word	0x08000e55
 8000588:	2000000c 	.word	0x2000000c

0800058c <cleanup_stdio>:
 800058c:	6841      	ldr	r1, [r0, #4]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <cleanup_stdio+0x34>)
 8000590:	4299      	cmp	r1, r3
 8000592:	b510      	push	{r4, lr}
 8000594:	4604      	mov	r4, r0
 8000596:	d001      	beq.n	800059c <cleanup_stdio+0x10>
 8000598:	f000 fc5c 	bl	8000e54 <_fflush_r>
 800059c:	68a1      	ldr	r1, [r4, #8]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <cleanup_stdio+0x38>)
 80005a0:	4299      	cmp	r1, r3
 80005a2:	d002      	beq.n	80005aa <cleanup_stdio+0x1e>
 80005a4:	4620      	mov	r0, r4
 80005a6:	f000 fc55 	bl	8000e54 <_fflush_r>
 80005aa:	68e1      	ldr	r1, [r4, #12]
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <cleanup_stdio+0x3c>)
 80005ae:	4299      	cmp	r1, r3
 80005b0:	d004      	beq.n	80005bc <cleanup_stdio+0x30>
 80005b2:	4620      	mov	r0, r4
 80005b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b8:	f000 bc4c 	b.w	8000e54 <_fflush_r>
 80005bc:	bd10      	pop	{r4, pc}
 80005be:	bf00      	nop
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	200000e4 	.word	0x200000e4
 80005c8:	2000014c 	.word	0x2000014c

080005cc <global_stdio_init.part.0>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <global_stdio_init.part.0+0x30>)
 80005d0:	4c0b      	ldr	r4, [pc, #44]	; (8000600 <global_stdio_init.part.0+0x34>)
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <global_stdio_init.part.0+0x38>)
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	4620      	mov	r0, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	2104      	movs	r1, #4
 80005dc:	f7ff ff94 	bl	8000508 <std>
 80005e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80005e4:	2201      	movs	r2, #1
 80005e6:	2109      	movs	r1, #9
 80005e8:	f7ff ff8e 	bl	8000508 <std>
 80005ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80005f0:	2202      	movs	r2, #2
 80005f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f6:	2112      	movs	r1, #18
 80005f8:	f7ff bf86 	b.w	8000508 <std>
 80005fc:	200001b4 	.word	0x200001b4
 8000600:	2000007c 	.word	0x2000007c
 8000604:	08000575 	.word	0x08000575

08000608 <__sfp_lock_acquire>:
 8000608:	4801      	ldr	r0, [pc, #4]	; (8000610 <__sfp_lock_acquire+0x8>)
 800060a:	f000 ba9a 	b.w	8000b42 <__retarget_lock_acquire_recursive>
 800060e:	bf00      	nop
 8000610:	200001bd 	.word	0x200001bd

08000614 <__sfp_lock_release>:
 8000614:	4801      	ldr	r0, [pc, #4]	; (800061c <__sfp_lock_release+0x8>)
 8000616:	f000 ba95 	b.w	8000b44 <__retarget_lock_release_recursive>
 800061a:	bf00      	nop
 800061c:	200001bd 	.word	0x200001bd

08000620 <__sinit>:
 8000620:	b510      	push	{r4, lr}
 8000622:	4604      	mov	r4, r0
 8000624:	f7ff fff0 	bl	8000608 <__sfp_lock_acquire>
 8000628:	6a23      	ldr	r3, [r4, #32]
 800062a:	b11b      	cbz	r3, 8000634 <__sinit+0x14>
 800062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000630:	f7ff bff0 	b.w	8000614 <__sfp_lock_release>
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__sinit+0x28>)
 8000636:	6223      	str	r3, [r4, #32]
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <__sinit+0x2c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f5      	bne.n	800062c <__sinit+0xc>
 8000640:	f7ff ffc4 	bl	80005cc <global_stdio_init.part.0>
 8000644:	e7f2      	b.n	800062c <__sinit+0xc>
 8000646:	bf00      	nop
 8000648:	0800058d 	.word	0x0800058d
 800064c:	200001b4 	.word	0x200001b4

08000650 <_fwalk_sglue>:
 8000650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000654:	4607      	mov	r7, r0
 8000656:	4688      	mov	r8, r1
 8000658:	4614      	mov	r4, r2
 800065a:	2600      	movs	r6, #0
 800065c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000660:	f1b9 0901 	subs.w	r9, r9, #1
 8000664:	d505      	bpl.n	8000672 <_fwalk_sglue+0x22>
 8000666:	6824      	ldr	r4, [r4, #0]
 8000668:	2c00      	cmp	r4, #0
 800066a:	d1f7      	bne.n	800065c <_fwalk_sglue+0xc>
 800066c:	4630      	mov	r0, r6
 800066e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000672:	89ab      	ldrh	r3, [r5, #12]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d907      	bls.n	8000688 <_fwalk_sglue+0x38>
 8000678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800067c:	3301      	adds	r3, #1
 800067e:	d003      	beq.n	8000688 <_fwalk_sglue+0x38>
 8000680:	4629      	mov	r1, r5
 8000682:	4638      	mov	r0, r7
 8000684:	47c0      	blx	r8
 8000686:	4306      	orrs	r6, r0
 8000688:	3568      	adds	r5, #104	; 0x68
 800068a:	e7e9      	b.n	8000660 <_fwalk_sglue+0x10>

0800068c <_puts_r>:
 800068c:	6a03      	ldr	r3, [r0, #32]
 800068e:	b570      	push	{r4, r5, r6, lr}
 8000690:	6884      	ldr	r4, [r0, #8]
 8000692:	4605      	mov	r5, r0
 8000694:	460e      	mov	r6, r1
 8000696:	b90b      	cbnz	r3, 800069c <_puts_r+0x10>
 8000698:	f7ff ffc2 	bl	8000620 <__sinit>
 800069c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800069e:	07db      	lsls	r3, r3, #31
 80006a0:	d405      	bmi.n	80006ae <_puts_r+0x22>
 80006a2:	89a3      	ldrh	r3, [r4, #12]
 80006a4:	0598      	lsls	r0, r3, #22
 80006a6:	d402      	bmi.n	80006ae <_puts_r+0x22>
 80006a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006aa:	f000 fa4a 	bl	8000b42 <__retarget_lock_acquire_recursive>
 80006ae:	89a3      	ldrh	r3, [r4, #12]
 80006b0:	0719      	lsls	r1, r3, #28
 80006b2:	d513      	bpl.n	80006dc <_puts_r+0x50>
 80006b4:	6923      	ldr	r3, [r4, #16]
 80006b6:	b18b      	cbz	r3, 80006dc <_puts_r+0x50>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	68a3      	ldr	r3, [r4, #8]
 80006bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006c0:	3b01      	subs	r3, #1
 80006c2:	60a3      	str	r3, [r4, #8]
 80006c4:	b9e9      	cbnz	r1, 8000702 <_puts_r+0x76>
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da2e      	bge.n	8000728 <_puts_r+0x9c>
 80006ca:	4622      	mov	r2, r4
 80006cc:	210a      	movs	r1, #10
 80006ce:	4628      	mov	r0, r5
 80006d0:	f000 f929 	bl	8000926 <__swbuf_r>
 80006d4:	3001      	adds	r0, #1
 80006d6:	d007      	beq.n	80006e8 <_puts_r+0x5c>
 80006d8:	250a      	movs	r5, #10
 80006da:	e007      	b.n	80006ec <_puts_r+0x60>
 80006dc:	4621      	mov	r1, r4
 80006de:	4628      	mov	r0, r5
 80006e0:	f000 f95e 	bl	80009a0 <__swsetup_r>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d0e7      	beq.n	80006b8 <_puts_r+0x2c>
 80006e8:	f04f 35ff 	mov.w	r5, #4294967295
 80006ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ee:	07da      	lsls	r2, r3, #31
 80006f0:	d405      	bmi.n	80006fe <_puts_r+0x72>
 80006f2:	89a3      	ldrh	r3, [r4, #12]
 80006f4:	059b      	lsls	r3, r3, #22
 80006f6:	d402      	bmi.n	80006fe <_puts_r+0x72>
 80006f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006fa:	f000 fa23 	bl	8000b44 <__retarget_lock_release_recursive>
 80006fe:	4628      	mov	r0, r5
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	2b00      	cmp	r3, #0
 8000704:	da04      	bge.n	8000710 <_puts_r+0x84>
 8000706:	69a2      	ldr	r2, [r4, #24]
 8000708:	429a      	cmp	r2, r3
 800070a:	dc06      	bgt.n	800071a <_puts_r+0x8e>
 800070c:	290a      	cmp	r1, #10
 800070e:	d004      	beq.n	800071a <_puts_r+0x8e>
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	6022      	str	r2, [r4, #0]
 8000716:	7019      	strb	r1, [r3, #0]
 8000718:	e7cf      	b.n	80006ba <_puts_r+0x2e>
 800071a:	4622      	mov	r2, r4
 800071c:	4628      	mov	r0, r5
 800071e:	f000 f902 	bl	8000926 <__swbuf_r>
 8000722:	3001      	adds	r0, #1
 8000724:	d1c9      	bne.n	80006ba <_puts_r+0x2e>
 8000726:	e7df      	b.n	80006e8 <_puts_r+0x5c>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	250a      	movs	r5, #10
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	6022      	str	r2, [r4, #0]
 8000730:	701d      	strb	r5, [r3, #0]
 8000732:	e7db      	b.n	80006ec <_puts_r+0x60>

08000734 <puts>:
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <puts+0xc>)
 8000736:	4601      	mov	r1, r0
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	f7ff bfa7 	b.w	800068c <_puts_r>
 800073e:	bf00      	nop
 8000740:	20000058 	.word	0x20000058

08000744 <setvbuf>:
 8000744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000748:	461d      	mov	r5, r3
 800074a:	4b54      	ldr	r3, [pc, #336]	; (800089c <setvbuf+0x158>)
 800074c:	681f      	ldr	r7, [r3, #0]
 800074e:	4604      	mov	r4, r0
 8000750:	460e      	mov	r6, r1
 8000752:	4690      	mov	r8, r2
 8000754:	b127      	cbz	r7, 8000760 <setvbuf+0x1c>
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	b913      	cbnz	r3, 8000760 <setvbuf+0x1c>
 800075a:	4638      	mov	r0, r7
 800075c:	f7ff ff60 	bl	8000620 <__sinit>
 8000760:	f1b8 0f02 	cmp.w	r8, #2
 8000764:	d006      	beq.n	8000774 <setvbuf+0x30>
 8000766:	f1b8 0f01 	cmp.w	r8, #1
 800076a:	f200 8094 	bhi.w	8000896 <setvbuf+0x152>
 800076e:	2d00      	cmp	r5, #0
 8000770:	f2c0 8091 	blt.w	8000896 <setvbuf+0x152>
 8000774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000776:	07da      	lsls	r2, r3, #31
 8000778:	d405      	bmi.n	8000786 <setvbuf+0x42>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	059b      	lsls	r3, r3, #22
 800077e:	d402      	bmi.n	8000786 <setvbuf+0x42>
 8000780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000782:	f000 f9de 	bl	8000b42 <__retarget_lock_acquire_recursive>
 8000786:	4621      	mov	r1, r4
 8000788:	4638      	mov	r0, r7
 800078a:	f000 fb63 	bl	8000e54 <_fflush_r>
 800078e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000790:	b141      	cbz	r1, 80007a4 <setvbuf+0x60>
 8000792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000796:	4299      	cmp	r1, r3
 8000798:	d002      	beq.n	80007a0 <setvbuf+0x5c>
 800079a:	4638      	mov	r0, r7
 800079c:	f000 f9d4 	bl	8000b48 <_free_r>
 80007a0:	2300      	movs	r3, #0
 80007a2:	6363      	str	r3, [r4, #52]	; 0x34
 80007a4:	2300      	movs	r3, #0
 80007a6:	61a3      	str	r3, [r4, #24]
 80007a8:	6063      	str	r3, [r4, #4]
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	0618      	lsls	r0, r3, #24
 80007ae:	d503      	bpl.n	80007b8 <setvbuf+0x74>
 80007b0:	6921      	ldr	r1, [r4, #16]
 80007b2:	4638      	mov	r0, r7
 80007b4:	f000 f9c8 	bl	8000b48 <_free_r>
 80007b8:	89a3      	ldrh	r3, [r4, #12]
 80007ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80007be:	f023 0303 	bic.w	r3, r3, #3
 80007c2:	f1b8 0f02 	cmp.w	r8, #2
 80007c6:	81a3      	strh	r3, [r4, #12]
 80007c8:	d05f      	beq.n	800088a <setvbuf+0x146>
 80007ca:	ab01      	add	r3, sp, #4
 80007cc:	466a      	mov	r2, sp
 80007ce:	4621      	mov	r1, r4
 80007d0:	4638      	mov	r0, r7
 80007d2:	f000 fb67 	bl	8000ea4 <__swhatbuf_r>
 80007d6:	89a3      	ldrh	r3, [r4, #12]
 80007d8:	4318      	orrs	r0, r3
 80007da:	81a0      	strh	r0, [r4, #12]
 80007dc:	bb2d      	cbnz	r5, 800082a <setvbuf+0xe6>
 80007de:	9d00      	ldr	r5, [sp, #0]
 80007e0:	4628      	mov	r0, r5
 80007e2:	f000 f9fd 	bl	8000be0 <malloc>
 80007e6:	4606      	mov	r6, r0
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d150      	bne.n	800088e <setvbuf+0x14a>
 80007ec:	f8dd 9000 	ldr.w	r9, [sp]
 80007f0:	45a9      	cmp	r9, r5
 80007f2:	d13e      	bne.n	8000872 <setvbuf+0x12e>
 80007f4:	f04f 35ff 	mov.w	r5, #4294967295
 80007f8:	2200      	movs	r2, #0
 80007fa:	60a2      	str	r2, [r4, #8]
 80007fc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8000800:	6022      	str	r2, [r4, #0]
 8000802:	6122      	str	r2, [r4, #16]
 8000804:	2201      	movs	r2, #1
 8000806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800080a:	6162      	str	r2, [r4, #20]
 800080c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	07d1      	lsls	r1, r2, #31
 8000814:	81a3      	strh	r3, [r4, #12]
 8000816:	d404      	bmi.n	8000822 <setvbuf+0xde>
 8000818:	059b      	lsls	r3, r3, #22
 800081a:	d402      	bmi.n	8000822 <setvbuf+0xde>
 800081c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800081e:	f000 f991 	bl	8000b44 <__retarget_lock_release_recursive>
 8000822:	4628      	mov	r0, r5
 8000824:	b003      	add	sp, #12
 8000826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800082a:	2e00      	cmp	r6, #0
 800082c:	d0d8      	beq.n	80007e0 <setvbuf+0x9c>
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	b913      	cbnz	r3, 8000838 <setvbuf+0xf4>
 8000832:	4638      	mov	r0, r7
 8000834:	f7ff fef4 	bl	8000620 <__sinit>
 8000838:	f1b8 0f01 	cmp.w	r8, #1
 800083c:	bf08      	it	eq
 800083e:	89a3      	ldrheq	r3, [r4, #12]
 8000840:	6026      	str	r6, [r4, #0]
 8000842:	bf04      	itt	eq
 8000844:	f043 0301 	orreq.w	r3, r3, #1
 8000848:	81a3      	strheq	r3, [r4, #12]
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	f013 0208 	ands.w	r2, r3, #8
 8000850:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8000854:	d01d      	beq.n	8000892 <setvbuf+0x14e>
 8000856:	07da      	lsls	r2, r3, #31
 8000858:	bf41      	itttt	mi
 800085a:	2200      	movmi	r2, #0
 800085c:	426d      	negmi	r5, r5
 800085e:	60a2      	strmi	r2, [r4, #8]
 8000860:	61a5      	strmi	r5, [r4, #24]
 8000862:	bf58      	it	pl
 8000864:	60a5      	strpl	r5, [r4, #8]
 8000866:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8000868:	f015 0501 	ands.w	r5, r5, #1
 800086c:	d0d4      	beq.n	8000818 <setvbuf+0xd4>
 800086e:	2500      	movs	r5, #0
 8000870:	e7d7      	b.n	8000822 <setvbuf+0xde>
 8000872:	4648      	mov	r0, r9
 8000874:	f000 f9b4 	bl	8000be0 <malloc>
 8000878:	4606      	mov	r6, r0
 800087a:	2800      	cmp	r0, #0
 800087c:	d0ba      	beq.n	80007f4 <setvbuf+0xb0>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	81a3      	strh	r3, [r4, #12]
 8000886:	464d      	mov	r5, r9
 8000888:	e7d1      	b.n	800082e <setvbuf+0xea>
 800088a:	2500      	movs	r5, #0
 800088c:	e7b4      	b.n	80007f8 <setvbuf+0xb4>
 800088e:	46a9      	mov	r9, r5
 8000890:	e7f5      	b.n	800087e <setvbuf+0x13a>
 8000892:	60a2      	str	r2, [r4, #8]
 8000894:	e7e7      	b.n	8000866 <setvbuf+0x122>
 8000896:	f04f 35ff 	mov.w	r5, #4294967295
 800089a:	e7c2      	b.n	8000822 <setvbuf+0xde>
 800089c:	20000058 	.word	0x20000058

080008a0 <__sread>:
 80008a0:	b510      	push	{r4, lr}
 80008a2:	460c      	mov	r4, r1
 80008a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a8:	f000 f8fc 	bl	8000aa4 <_read_r>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	bfab      	itete	ge
 80008b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008b2:	89a3      	ldrhlt	r3, [r4, #12]
 80008b4:	181b      	addge	r3, r3, r0
 80008b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008ba:	bfac      	ite	ge
 80008bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80008be:	81a3      	strhlt	r3, [r4, #12]
 80008c0:	bd10      	pop	{r4, pc}

080008c2 <__swrite>:
 80008c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c6:	461f      	mov	r7, r3
 80008c8:	898b      	ldrh	r3, [r1, #12]
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	4605      	mov	r5, r0
 80008ce:	460c      	mov	r4, r1
 80008d0:	4616      	mov	r6, r2
 80008d2:	d505      	bpl.n	80008e0 <__swrite+0x1e>
 80008d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d8:	2302      	movs	r3, #2
 80008da:	2200      	movs	r2, #0
 80008dc:	f000 f8d0 	bl	8000a80 <_lseek_r>
 80008e0:	89a3      	ldrh	r3, [r4, #12]
 80008e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ea:	81a3      	strh	r3, [r4, #12]
 80008ec:	4632      	mov	r2, r6
 80008ee:	463b      	mov	r3, r7
 80008f0:	4628      	mov	r0, r5
 80008f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008f6:	f000 b8e7 	b.w	8000ac8 <_write_r>

080008fa <__sseek>:
 80008fa:	b510      	push	{r4, lr}
 80008fc:	460c      	mov	r4, r1
 80008fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000902:	f000 f8bd 	bl	8000a80 <_lseek_r>
 8000906:	1c43      	adds	r3, r0, #1
 8000908:	89a3      	ldrh	r3, [r4, #12]
 800090a:	bf15      	itete	ne
 800090c:	6560      	strne	r0, [r4, #84]	; 0x54
 800090e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000916:	81a3      	strheq	r3, [r4, #12]
 8000918:	bf18      	it	ne
 800091a:	81a3      	strhne	r3, [r4, #12]
 800091c:	bd10      	pop	{r4, pc}

0800091e <__sclose>:
 800091e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000922:	f000 b89d 	b.w	8000a60 <_close_r>

08000926 <__swbuf_r>:
 8000926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000928:	460e      	mov	r6, r1
 800092a:	4614      	mov	r4, r2
 800092c:	4605      	mov	r5, r0
 800092e:	b118      	cbz	r0, 8000938 <__swbuf_r+0x12>
 8000930:	6a03      	ldr	r3, [r0, #32]
 8000932:	b90b      	cbnz	r3, 8000938 <__swbuf_r+0x12>
 8000934:	f7ff fe74 	bl	8000620 <__sinit>
 8000938:	69a3      	ldr	r3, [r4, #24]
 800093a:	60a3      	str	r3, [r4, #8]
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	071a      	lsls	r2, r3, #28
 8000940:	d525      	bpl.n	800098e <__swbuf_r+0x68>
 8000942:	6923      	ldr	r3, [r4, #16]
 8000944:	b31b      	cbz	r3, 800098e <__swbuf_r+0x68>
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	6922      	ldr	r2, [r4, #16]
 800094a:	1a98      	subs	r0, r3, r2
 800094c:	6963      	ldr	r3, [r4, #20]
 800094e:	b2f6      	uxtb	r6, r6
 8000950:	4283      	cmp	r3, r0
 8000952:	4637      	mov	r7, r6
 8000954:	dc04      	bgt.n	8000960 <__swbuf_r+0x3a>
 8000956:	4621      	mov	r1, r4
 8000958:	4628      	mov	r0, r5
 800095a:	f000 fa7b 	bl	8000e54 <_fflush_r>
 800095e:	b9e0      	cbnz	r0, 800099a <__swbuf_r+0x74>
 8000960:	68a3      	ldr	r3, [r4, #8]
 8000962:	3b01      	subs	r3, #1
 8000964:	60a3      	str	r3, [r4, #8]
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	6022      	str	r2, [r4, #0]
 800096c:	701e      	strb	r6, [r3, #0]
 800096e:	6962      	ldr	r2, [r4, #20]
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	429a      	cmp	r2, r3
 8000974:	d004      	beq.n	8000980 <__swbuf_r+0x5a>
 8000976:	89a3      	ldrh	r3, [r4, #12]
 8000978:	07db      	lsls	r3, r3, #31
 800097a:	d506      	bpl.n	800098a <__swbuf_r+0x64>
 800097c:	2e0a      	cmp	r6, #10
 800097e:	d104      	bne.n	800098a <__swbuf_r+0x64>
 8000980:	4621      	mov	r1, r4
 8000982:	4628      	mov	r0, r5
 8000984:	f000 fa66 	bl	8000e54 <_fflush_r>
 8000988:	b938      	cbnz	r0, 800099a <__swbuf_r+0x74>
 800098a:	4638      	mov	r0, r7
 800098c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800098e:	4621      	mov	r1, r4
 8000990:	4628      	mov	r0, r5
 8000992:	f000 f805 	bl	80009a0 <__swsetup_r>
 8000996:	2800      	cmp	r0, #0
 8000998:	d0d5      	beq.n	8000946 <__swbuf_r+0x20>
 800099a:	f04f 37ff 	mov.w	r7, #4294967295
 800099e:	e7f4      	b.n	800098a <__swbuf_r+0x64>

080009a0 <__swsetup_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <__swsetup_r+0xac>)
 80009a4:	4605      	mov	r5, r0
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	460c      	mov	r4, r1
 80009aa:	b118      	cbz	r0, 80009b4 <__swsetup_r+0x14>
 80009ac:	6a03      	ldr	r3, [r0, #32]
 80009ae:	b90b      	cbnz	r3, 80009b4 <__swsetup_r+0x14>
 80009b0:	f7ff fe36 	bl	8000620 <__sinit>
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009ba:	0718      	lsls	r0, r3, #28
 80009bc:	d422      	bmi.n	8000a04 <__swsetup_r+0x64>
 80009be:	06d9      	lsls	r1, r3, #27
 80009c0:	d407      	bmi.n	80009d2 <__swsetup_r+0x32>
 80009c2:	2309      	movs	r3, #9
 80009c4:	602b      	str	r3, [r5, #0]
 80009c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009ca:	81a3      	strh	r3, [r4, #12]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	e034      	b.n	8000a3c <__swsetup_r+0x9c>
 80009d2:	0758      	lsls	r0, r3, #29
 80009d4:	d512      	bpl.n	80009fc <__swsetup_r+0x5c>
 80009d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d8:	b141      	cbz	r1, 80009ec <__swsetup_r+0x4c>
 80009da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009de:	4299      	cmp	r1, r3
 80009e0:	d002      	beq.n	80009e8 <__swsetup_r+0x48>
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 f8b0 	bl	8000b48 <_free_r>
 80009e8:	2300      	movs	r3, #0
 80009ea:	6363      	str	r3, [r4, #52]	; 0x34
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009f2:	81a3      	strh	r3, [r4, #12]
 80009f4:	2300      	movs	r3, #0
 80009f6:	6063      	str	r3, [r4, #4]
 80009f8:	6923      	ldr	r3, [r4, #16]
 80009fa:	6023      	str	r3, [r4, #0]
 80009fc:	89a3      	ldrh	r3, [r4, #12]
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	81a3      	strh	r3, [r4, #12]
 8000a04:	6923      	ldr	r3, [r4, #16]
 8000a06:	b94b      	cbnz	r3, 8000a1c <__swsetup_r+0x7c>
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a12:	d003      	beq.n	8000a1c <__swsetup_r+0x7c>
 8000a14:	4621      	mov	r1, r4
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 fa6a 	bl	8000ef0 <__smakebuf_r>
 8000a1c:	89a0      	ldrh	r0, [r4, #12]
 8000a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a22:	f010 0301 	ands.w	r3, r0, #1
 8000a26:	d00a      	beq.n	8000a3e <__swsetup_r+0x9e>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60a3      	str	r3, [r4, #8]
 8000a2c:	6963      	ldr	r3, [r4, #20]
 8000a2e:	425b      	negs	r3, r3
 8000a30:	61a3      	str	r3, [r4, #24]
 8000a32:	6923      	ldr	r3, [r4, #16]
 8000a34:	b943      	cbnz	r3, 8000a48 <__swsetup_r+0xa8>
 8000a36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a3a:	d1c4      	bne.n	80009c6 <__swsetup_r+0x26>
 8000a3c:	bd38      	pop	{r3, r4, r5, pc}
 8000a3e:	0781      	lsls	r1, r0, #30
 8000a40:	bf58      	it	pl
 8000a42:	6963      	ldrpl	r3, [r4, #20]
 8000a44:	60a3      	str	r3, [r4, #8]
 8000a46:	e7f4      	b.n	8000a32 <__swsetup_r+0x92>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7f7      	b.n	8000a3c <__swsetup_r+0x9c>
 8000a4c:	20000058 	.word	0x20000058

08000a50 <memset>:
 8000a50:	4402      	add	r2, r0
 8000a52:	4603      	mov	r3, r0
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d100      	bne.n	8000a5a <memset+0xa>
 8000a58:	4770      	bx	lr
 8000a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a5e:	e7f9      	b.n	8000a54 <memset+0x4>

08000a60 <_close_r>:
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	4d06      	ldr	r5, [pc, #24]	; (8000a7c <_close_r+0x1c>)
 8000a64:	2300      	movs	r3, #0
 8000a66:	4604      	mov	r4, r0
 8000a68:	4608      	mov	r0, r1
 8000a6a:	602b      	str	r3, [r5, #0]
 8000a6c:	f7ff fbde 	bl	800022c <_close>
 8000a70:	1c43      	adds	r3, r0, #1
 8000a72:	d102      	bne.n	8000a7a <_close_r+0x1a>
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	b103      	cbz	r3, 8000a7a <_close_r+0x1a>
 8000a78:	6023      	str	r3, [r4, #0]
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}
 8000a7c:	200001b8 	.word	0x200001b8

08000a80 <_lseek_r>:
 8000a80:	b538      	push	{r3, r4, r5, lr}
 8000a82:	4d07      	ldr	r5, [pc, #28]	; (8000aa0 <_lseek_r+0x20>)
 8000a84:	4604      	mov	r4, r0
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	602a      	str	r2, [r5, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f7ff fbf3 	bl	800027a <_lseek>
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	d102      	bne.n	8000a9e <_lseek_r+0x1e>
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	b103      	cbz	r3, 8000a9e <_lseek_r+0x1e>
 8000a9c:	6023      	str	r3, [r4, #0]
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	200001b8 	.word	0x200001b8

08000aa4 <_read_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4d07      	ldr	r5, [pc, #28]	; (8000ac4 <_read_r+0x20>)
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	2200      	movs	r2, #0
 8000ab0:	602a      	str	r2, [r5, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f7ff fc24 	bl	8000300 <_read>
 8000ab8:	1c43      	adds	r3, r0, #1
 8000aba:	d102      	bne.n	8000ac2 <_read_r+0x1e>
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	b103      	cbz	r3, 8000ac2 <_read_r+0x1e>
 8000ac0:	6023      	str	r3, [r4, #0]
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
 8000ac4:	200001b8 	.word	0x200001b8

08000ac8 <_write_r>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	4d07      	ldr	r5, [pc, #28]	; (8000ae8 <_write_r+0x20>)
 8000acc:	4604      	mov	r4, r0
 8000ace:	4608      	mov	r0, r1
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	602a      	str	r2, [r5, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f7ff fc3b 	bl	8000352 <_write>
 8000adc:	1c43      	adds	r3, r0, #1
 8000ade:	d102      	bne.n	8000ae6 <_write_r+0x1e>
 8000ae0:	682b      	ldr	r3, [r5, #0]
 8000ae2:	b103      	cbz	r3, 8000ae6 <_write_r+0x1e>
 8000ae4:	6023      	str	r3, [r4, #0]
 8000ae6:	bd38      	pop	{r3, r4, r5, pc}
 8000ae8:	200001b8 	.word	0x200001b8

08000aec <__errno>:
 8000aec:	4b01      	ldr	r3, [pc, #4]	; (8000af4 <__errno+0x8>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000058 	.word	0x20000058

08000af8 <__libc_init_array>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4d0d      	ldr	r5, [pc, #52]	; (8000b30 <__libc_init_array+0x38>)
 8000afc:	4c0d      	ldr	r4, [pc, #52]	; (8000b34 <__libc_init_array+0x3c>)
 8000afe:	1b64      	subs	r4, r4, r5
 8000b00:	10a4      	asrs	r4, r4, #2
 8000b02:	2600      	movs	r6, #0
 8000b04:	42a6      	cmp	r6, r4
 8000b06:	d109      	bne.n	8000b1c <__libc_init_array+0x24>
 8000b08:	4d0b      	ldr	r5, [pc, #44]	; (8000b38 <__libc_init_array+0x40>)
 8000b0a:	4c0c      	ldr	r4, [pc, #48]	; (8000b3c <__libc_init_array+0x44>)
 8000b0c:	f000 fa5e 	bl	8000fcc <_init>
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	10a4      	asrs	r4, r4, #2
 8000b14:	2600      	movs	r6, #0
 8000b16:	42a6      	cmp	r6, r4
 8000b18:	d105      	bne.n	8000b26 <__libc_init_array+0x2e>
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}
 8000b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b20:	4798      	blx	r3
 8000b22:	3601      	adds	r6, #1
 8000b24:	e7ee      	b.n	8000b04 <__libc_init_array+0xc>
 8000b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2a:	4798      	blx	r3
 8000b2c:	3601      	adds	r6, #1
 8000b2e:	e7f2      	b.n	8000b16 <__libc_init_array+0x1e>
 8000b30:	08000ff4 	.word	0x08000ff4
 8000b34:	08000ff4 	.word	0x08000ff4
 8000b38:	08000ff4 	.word	0x08000ff4
 8000b3c:	08000ff8 	.word	0x08000ff8

08000b40 <__retarget_lock_init_recursive>:
 8000b40:	4770      	bx	lr

08000b42 <__retarget_lock_acquire_recursive>:
 8000b42:	4770      	bx	lr

08000b44 <__retarget_lock_release_recursive>:
 8000b44:	4770      	bx	lr
	...

08000b48 <_free_r>:
 8000b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d044      	beq.n	8000bd8 <_free_r+0x90>
 8000b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b52:	9001      	str	r0, [sp, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f1a1 0404 	sub.w	r4, r1, #4
 8000b5a:	bfb8      	it	lt
 8000b5c:	18e4      	addlt	r4, r4, r3
 8000b5e:	f000 f8e7 	bl	8000d30 <__malloc_lock>
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <_free_r+0x94>)
 8000b64:	9801      	ldr	r0, [sp, #4]
 8000b66:	6813      	ldr	r3, [r2, #0]
 8000b68:	b933      	cbnz	r3, 8000b78 <_free_r+0x30>
 8000b6a:	6063      	str	r3, [r4, #4]
 8000b6c:	6014      	str	r4, [r2, #0]
 8000b6e:	b003      	add	sp, #12
 8000b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b74:	f000 b8e2 	b.w	8000d3c <__malloc_unlock>
 8000b78:	42a3      	cmp	r3, r4
 8000b7a:	d908      	bls.n	8000b8e <_free_r+0x46>
 8000b7c:	6825      	ldr	r5, [r4, #0]
 8000b7e:	1961      	adds	r1, r4, r5
 8000b80:	428b      	cmp	r3, r1
 8000b82:	bf01      	itttt	eq
 8000b84:	6819      	ldreq	r1, [r3, #0]
 8000b86:	685b      	ldreq	r3, [r3, #4]
 8000b88:	1949      	addeq	r1, r1, r5
 8000b8a:	6021      	streq	r1, [r4, #0]
 8000b8c:	e7ed      	b.n	8000b6a <_free_r+0x22>
 8000b8e:	461a      	mov	r2, r3
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	b10b      	cbz	r3, 8000b98 <_free_r+0x50>
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	d9fa      	bls.n	8000b8e <_free_r+0x46>
 8000b98:	6811      	ldr	r1, [r2, #0]
 8000b9a:	1855      	adds	r5, r2, r1
 8000b9c:	42a5      	cmp	r5, r4
 8000b9e:	d10b      	bne.n	8000bb8 <_free_r+0x70>
 8000ba0:	6824      	ldr	r4, [r4, #0]
 8000ba2:	4421      	add	r1, r4
 8000ba4:	1854      	adds	r4, r2, r1
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	6011      	str	r1, [r2, #0]
 8000baa:	d1e0      	bne.n	8000b6e <_free_r+0x26>
 8000bac:	681c      	ldr	r4, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	6053      	str	r3, [r2, #4]
 8000bb2:	440c      	add	r4, r1
 8000bb4:	6014      	str	r4, [r2, #0]
 8000bb6:	e7da      	b.n	8000b6e <_free_r+0x26>
 8000bb8:	d902      	bls.n	8000bc0 <_free_r+0x78>
 8000bba:	230c      	movs	r3, #12
 8000bbc:	6003      	str	r3, [r0, #0]
 8000bbe:	e7d6      	b.n	8000b6e <_free_r+0x26>
 8000bc0:	6825      	ldr	r5, [r4, #0]
 8000bc2:	1961      	adds	r1, r4, r5
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	bf04      	itt	eq
 8000bc8:	6819      	ldreq	r1, [r3, #0]
 8000bca:	685b      	ldreq	r3, [r3, #4]
 8000bcc:	6063      	str	r3, [r4, #4]
 8000bce:	bf04      	itt	eq
 8000bd0:	1949      	addeq	r1, r1, r5
 8000bd2:	6021      	streq	r1, [r4, #0]
 8000bd4:	6054      	str	r4, [r2, #4]
 8000bd6:	e7ca      	b.n	8000b6e <_free_r+0x26>
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd30      	pop	{r4, r5, pc}
 8000bdc:	200001c0 	.word	0x200001c0

08000be0 <malloc>:
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <malloc+0xc>)
 8000be2:	4601      	mov	r1, r0
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	f000 b823 	b.w	8000c30 <_malloc_r>
 8000bea:	bf00      	nop
 8000bec:	20000058 	.word	0x20000058

08000bf0 <sbrk_aligned>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	4e0e      	ldr	r6, [pc, #56]	; (8000c2c <sbrk_aligned+0x3c>)
 8000bf4:	460c      	mov	r4, r1
 8000bf6:	6831      	ldr	r1, [r6, #0]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	b911      	cbnz	r1, 8000c02 <sbrk_aligned+0x12>
 8000bfc:	f000 f9d6 	bl	8000fac <_sbrk_r>
 8000c00:	6030      	str	r0, [r6, #0]
 8000c02:	4621      	mov	r1, r4
 8000c04:	4628      	mov	r0, r5
 8000c06:	f000 f9d1 	bl	8000fac <_sbrk_r>
 8000c0a:	1c43      	adds	r3, r0, #1
 8000c0c:	d00a      	beq.n	8000c24 <sbrk_aligned+0x34>
 8000c0e:	1cc4      	adds	r4, r0, #3
 8000c10:	f024 0403 	bic.w	r4, r4, #3
 8000c14:	42a0      	cmp	r0, r4
 8000c16:	d007      	beq.n	8000c28 <sbrk_aligned+0x38>
 8000c18:	1a21      	subs	r1, r4, r0
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f000 f9c6 	bl	8000fac <_sbrk_r>
 8000c20:	3001      	adds	r0, #1
 8000c22:	d101      	bne.n	8000c28 <sbrk_aligned+0x38>
 8000c24:	f04f 34ff 	mov.w	r4, #4294967295
 8000c28:	4620      	mov	r0, r4
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	200001c4 	.word	0x200001c4

08000c30 <_malloc_r>:
 8000c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c34:	1ccd      	adds	r5, r1, #3
 8000c36:	f025 0503 	bic.w	r5, r5, #3
 8000c3a:	3508      	adds	r5, #8
 8000c3c:	2d0c      	cmp	r5, #12
 8000c3e:	bf38      	it	cc
 8000c40:	250c      	movcc	r5, #12
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	4607      	mov	r7, r0
 8000c46:	db01      	blt.n	8000c4c <_malloc_r+0x1c>
 8000c48:	42a9      	cmp	r1, r5
 8000c4a:	d905      	bls.n	8000c58 <_malloc_r+0x28>
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	2600      	movs	r6, #0
 8000c52:	4630      	mov	r0, r6
 8000c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d2c <_malloc_r+0xfc>
 8000c5c:	f000 f868 	bl	8000d30 <__malloc_lock>
 8000c60:	f8d8 3000 	ldr.w	r3, [r8]
 8000c64:	461c      	mov	r4, r3
 8000c66:	bb5c      	cbnz	r4, 8000cc0 <_malloc_r+0x90>
 8000c68:	4629      	mov	r1, r5
 8000c6a:	4638      	mov	r0, r7
 8000c6c:	f7ff ffc0 	bl	8000bf0 <sbrk_aligned>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	4604      	mov	r4, r0
 8000c74:	d155      	bne.n	8000d22 <_malloc_r+0xf2>
 8000c76:	f8d8 4000 	ldr.w	r4, [r8]
 8000c7a:	4626      	mov	r6, r4
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d145      	bne.n	8000d0c <_malloc_r+0xdc>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d048      	beq.n	8000d16 <_malloc_r+0xe6>
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	4631      	mov	r1, r6
 8000c88:	4638      	mov	r0, r7
 8000c8a:	eb04 0903 	add.w	r9, r4, r3
 8000c8e:	f000 f98d 	bl	8000fac <_sbrk_r>
 8000c92:	4581      	cmp	r9, r0
 8000c94:	d13f      	bne.n	8000d16 <_malloc_r+0xe6>
 8000c96:	6821      	ldr	r1, [r4, #0]
 8000c98:	1a6d      	subs	r5, r5, r1
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	4638      	mov	r0, r7
 8000c9e:	f7ff ffa7 	bl	8000bf0 <sbrk_aligned>
 8000ca2:	3001      	adds	r0, #1
 8000ca4:	d037      	beq.n	8000d16 <_malloc_r+0xe6>
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	442b      	add	r3, r5
 8000caa:	6023      	str	r3, [r4, #0]
 8000cac:	f8d8 3000 	ldr.w	r3, [r8]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d038      	beq.n	8000d26 <_malloc_r+0xf6>
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	42a2      	cmp	r2, r4
 8000cb8:	d12b      	bne.n	8000d12 <_malloc_r+0xe2>
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	e00f      	b.n	8000ce0 <_malloc_r+0xb0>
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	1b52      	subs	r2, r2, r5
 8000cc4:	d41f      	bmi.n	8000d06 <_malloc_r+0xd6>
 8000cc6:	2a0b      	cmp	r2, #11
 8000cc8:	d917      	bls.n	8000cfa <_malloc_r+0xca>
 8000cca:	1961      	adds	r1, r4, r5
 8000ccc:	42a3      	cmp	r3, r4
 8000cce:	6025      	str	r5, [r4, #0]
 8000cd0:	bf18      	it	ne
 8000cd2:	6059      	strne	r1, [r3, #4]
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	bf08      	it	eq
 8000cd8:	f8c8 1000 	streq.w	r1, [r8]
 8000cdc:	5162      	str	r2, [r4, r5]
 8000cde:	604b      	str	r3, [r1, #4]
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	f104 060b 	add.w	r6, r4, #11
 8000ce6:	f000 f829 	bl	8000d3c <__malloc_unlock>
 8000cea:	f026 0607 	bic.w	r6, r6, #7
 8000cee:	1d23      	adds	r3, r4, #4
 8000cf0:	1af2      	subs	r2, r6, r3
 8000cf2:	d0ae      	beq.n	8000c52 <_malloc_r+0x22>
 8000cf4:	1b9b      	subs	r3, r3, r6
 8000cf6:	50a3      	str	r3, [r4, r2]
 8000cf8:	e7ab      	b.n	8000c52 <_malloc_r+0x22>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	6862      	ldr	r2, [r4, #4]
 8000cfe:	d1dd      	bne.n	8000cbc <_malloc_r+0x8c>
 8000d00:	f8c8 2000 	str.w	r2, [r8]
 8000d04:	e7ec      	b.n	8000ce0 <_malloc_r+0xb0>
 8000d06:	4623      	mov	r3, r4
 8000d08:	6864      	ldr	r4, [r4, #4]
 8000d0a:	e7ac      	b.n	8000c66 <_malloc_r+0x36>
 8000d0c:	4634      	mov	r4, r6
 8000d0e:	6876      	ldr	r6, [r6, #4]
 8000d10:	e7b4      	b.n	8000c7c <_malloc_r+0x4c>
 8000d12:	4613      	mov	r3, r2
 8000d14:	e7cc      	b.n	8000cb0 <_malloc_r+0x80>
 8000d16:	230c      	movs	r3, #12
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	f000 f80e 	bl	8000d3c <__malloc_unlock>
 8000d20:	e797      	b.n	8000c52 <_malloc_r+0x22>
 8000d22:	6025      	str	r5, [r4, #0]
 8000d24:	e7dc      	b.n	8000ce0 <_malloc_r+0xb0>
 8000d26:	605b      	str	r3, [r3, #4]
 8000d28:	deff      	udf	#255	; 0xff
 8000d2a:	bf00      	nop
 8000d2c:	200001c0 	.word	0x200001c0

08000d30 <__malloc_lock>:
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <__malloc_lock+0x8>)
 8000d32:	f7ff bf06 	b.w	8000b42 <__retarget_lock_acquire_recursive>
 8000d36:	bf00      	nop
 8000d38:	200001bc 	.word	0x200001bc

08000d3c <__malloc_unlock>:
 8000d3c:	4801      	ldr	r0, [pc, #4]	; (8000d44 <__malloc_unlock+0x8>)
 8000d3e:	f7ff bf01 	b.w	8000b44 <__retarget_lock_release_recursive>
 8000d42:	bf00      	nop
 8000d44:	200001bc 	.word	0x200001bc

08000d48 <__sflush_r>:
 8000d48:	898a      	ldrh	r2, [r1, #12]
 8000d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d4e:	4605      	mov	r5, r0
 8000d50:	0710      	lsls	r0, r2, #28
 8000d52:	460c      	mov	r4, r1
 8000d54:	d458      	bmi.n	8000e08 <__sflush_r+0xc0>
 8000d56:	684b      	ldr	r3, [r1, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dc05      	bgt.n	8000d68 <__sflush_r+0x20>
 8000d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	dc02      	bgt.n	8000d68 <__sflush_r+0x20>
 8000d62:	2000      	movs	r0, #0
 8000d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d0f9      	beq.n	8000d62 <__sflush_r+0x1a>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d74:	682f      	ldr	r7, [r5, #0]
 8000d76:	6a21      	ldr	r1, [r4, #32]
 8000d78:	602b      	str	r3, [r5, #0]
 8000d7a:	d032      	beq.n	8000de2 <__sflush_r+0x9a>
 8000d7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d7e:	89a3      	ldrh	r3, [r4, #12]
 8000d80:	075a      	lsls	r2, r3, #29
 8000d82:	d505      	bpl.n	8000d90 <__sflush_r+0x48>
 8000d84:	6863      	ldr	r3, [r4, #4]
 8000d86:	1ac0      	subs	r0, r0, r3
 8000d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d8a:	b10b      	cbz	r3, 8000d90 <__sflush_r+0x48>
 8000d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8e:	1ac0      	subs	r0, r0, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	4602      	mov	r2, r0
 8000d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d96:	6a21      	ldr	r1, [r4, #32]
 8000d98:	4628      	mov	r0, r5
 8000d9a:	47b0      	blx	r6
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	89a3      	ldrh	r3, [r4, #12]
 8000da0:	d106      	bne.n	8000db0 <__sflush_r+0x68>
 8000da2:	6829      	ldr	r1, [r5, #0]
 8000da4:	291d      	cmp	r1, #29
 8000da6:	d82b      	bhi.n	8000e00 <__sflush_r+0xb8>
 8000da8:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <__sflush_r+0x108>)
 8000daa:	410a      	asrs	r2, r1
 8000dac:	07d6      	lsls	r6, r2, #31
 8000dae:	d427      	bmi.n	8000e00 <__sflush_r+0xb8>
 8000db0:	2200      	movs	r2, #0
 8000db2:	6062      	str	r2, [r4, #4]
 8000db4:	04d9      	lsls	r1, r3, #19
 8000db6:	6922      	ldr	r2, [r4, #16]
 8000db8:	6022      	str	r2, [r4, #0]
 8000dba:	d504      	bpl.n	8000dc6 <__sflush_r+0x7e>
 8000dbc:	1c42      	adds	r2, r0, #1
 8000dbe:	d101      	bne.n	8000dc4 <__sflush_r+0x7c>
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	b903      	cbnz	r3, 8000dc6 <__sflush_r+0x7e>
 8000dc4:	6560      	str	r0, [r4, #84]	; 0x54
 8000dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dc8:	602f      	str	r7, [r5, #0]
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	d0c9      	beq.n	8000d62 <__sflush_r+0x1a>
 8000dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d002      	beq.n	8000ddc <__sflush_r+0x94>
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f7ff feb6 	bl	8000b48 <_free_r>
 8000ddc:	2000      	movs	r0, #0
 8000dde:	6360      	str	r0, [r4, #52]	; 0x34
 8000de0:	e7c0      	b.n	8000d64 <__sflush_r+0x1c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	4628      	mov	r0, r5
 8000de6:	47b0      	blx	r6
 8000de8:	1c41      	adds	r1, r0, #1
 8000dea:	d1c8      	bne.n	8000d7e <__sflush_r+0x36>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0c5      	beq.n	8000d7e <__sflush_r+0x36>
 8000df2:	2b1d      	cmp	r3, #29
 8000df4:	d001      	beq.n	8000dfa <__sflush_r+0xb2>
 8000df6:	2b16      	cmp	r3, #22
 8000df8:	d101      	bne.n	8000dfe <__sflush_r+0xb6>
 8000dfa:	602f      	str	r7, [r5, #0]
 8000dfc:	e7b1      	b.n	8000d62 <__sflush_r+0x1a>
 8000dfe:	89a3      	ldrh	r3, [r4, #12]
 8000e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e04:	81a3      	strh	r3, [r4, #12]
 8000e06:	e7ad      	b.n	8000d64 <__sflush_r+0x1c>
 8000e08:	690f      	ldr	r7, [r1, #16]
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d0a9      	beq.n	8000d62 <__sflush_r+0x1a>
 8000e0e:	0793      	lsls	r3, r2, #30
 8000e10:	680e      	ldr	r6, [r1, #0]
 8000e12:	bf08      	it	eq
 8000e14:	694b      	ldreq	r3, [r1, #20]
 8000e16:	600f      	str	r7, [r1, #0]
 8000e18:	bf18      	it	ne
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	eba6 0807 	sub.w	r8, r6, r7
 8000e20:	608b      	str	r3, [r1, #8]
 8000e22:	f1b8 0f00 	cmp.w	r8, #0
 8000e26:	dd9c      	ble.n	8000d62 <__sflush_r+0x1a>
 8000e28:	6a21      	ldr	r1, [r4, #32]
 8000e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e2c:	4643      	mov	r3, r8
 8000e2e:	463a      	mov	r2, r7
 8000e30:	4628      	mov	r0, r5
 8000e32:	47b0      	blx	r6
 8000e34:	2800      	cmp	r0, #0
 8000e36:	dc06      	bgt.n	8000e46 <__sflush_r+0xfe>
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	81a3      	strh	r3, [r4, #12]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	e78e      	b.n	8000d64 <__sflush_r+0x1c>
 8000e46:	4407      	add	r7, r0
 8000e48:	eba8 0800 	sub.w	r8, r8, r0
 8000e4c:	e7e9      	b.n	8000e22 <__sflush_r+0xda>
 8000e4e:	bf00      	nop
 8000e50:	dfbffffe 	.word	0xdfbffffe

08000e54 <_fflush_r>:
 8000e54:	b538      	push	{r3, r4, r5, lr}
 8000e56:	690b      	ldr	r3, [r1, #16]
 8000e58:	4605      	mov	r5, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	b913      	cbnz	r3, 8000e64 <_fflush_r+0x10>
 8000e5e:	2500      	movs	r5, #0
 8000e60:	4628      	mov	r0, r5
 8000e62:	bd38      	pop	{r3, r4, r5, pc}
 8000e64:	b118      	cbz	r0, 8000e6e <_fflush_r+0x1a>
 8000e66:	6a03      	ldr	r3, [r0, #32]
 8000e68:	b90b      	cbnz	r3, 8000e6e <_fflush_r+0x1a>
 8000e6a:	f7ff fbd9 	bl	8000620 <__sinit>
 8000e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f3      	beq.n	8000e5e <_fflush_r+0xa>
 8000e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e78:	07d0      	lsls	r0, r2, #31
 8000e7a:	d404      	bmi.n	8000e86 <_fflush_r+0x32>
 8000e7c:	0599      	lsls	r1, r3, #22
 8000e7e:	d402      	bmi.n	8000e86 <_fflush_r+0x32>
 8000e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e82:	f7ff fe5e 	bl	8000b42 <__retarget_lock_acquire_recursive>
 8000e86:	4628      	mov	r0, r5
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f7ff ff5d 	bl	8000d48 <__sflush_r>
 8000e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e90:	07da      	lsls	r2, r3, #31
 8000e92:	4605      	mov	r5, r0
 8000e94:	d4e4      	bmi.n	8000e60 <_fflush_r+0xc>
 8000e96:	89a3      	ldrh	r3, [r4, #12]
 8000e98:	059b      	lsls	r3, r3, #22
 8000e9a:	d4e1      	bmi.n	8000e60 <_fflush_r+0xc>
 8000e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e9e:	f7ff fe51 	bl	8000b44 <__retarget_lock_release_recursive>
 8000ea2:	e7dd      	b.n	8000e60 <_fflush_r+0xc>

08000ea4 <__swhatbuf_r>:
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	460c      	mov	r4, r1
 8000ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eac:	2900      	cmp	r1, #0
 8000eae:	b096      	sub	sp, #88	; 0x58
 8000eb0:	4615      	mov	r5, r2
 8000eb2:	461e      	mov	r6, r3
 8000eb4:	da0d      	bge.n	8000ed2 <__swhatbuf_r+0x2e>
 8000eb6:	89a3      	ldrh	r3, [r4, #12]
 8000eb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	bf0c      	ite	eq
 8000ec2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000ec6:	2340      	movne	r3, #64	; 0x40
 8000ec8:	2000      	movs	r0, #0
 8000eca:	6031      	str	r1, [r6, #0]
 8000ecc:	602b      	str	r3, [r5, #0]
 8000ece:	b016      	add	sp, #88	; 0x58
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
 8000ed2:	466a      	mov	r2, sp
 8000ed4:	f000 f848 	bl	8000f68 <_fstat_r>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	dbec      	blt.n	8000eb6 <__swhatbuf_r+0x12>
 8000edc:	9901      	ldr	r1, [sp, #4]
 8000ede:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000ee2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000ee6:	4259      	negs	r1, r3
 8000ee8:	4159      	adcs	r1, r3
 8000eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eee:	e7eb      	b.n	8000ec8 <__swhatbuf_r+0x24>

08000ef0 <__smakebuf_r>:
 8000ef0:	898b      	ldrh	r3, [r1, #12]
 8000ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ef4:	079d      	lsls	r5, r3, #30
 8000ef6:	4606      	mov	r6, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	d507      	bpl.n	8000f0c <__smakebuf_r+0x1c>
 8000efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f00:	6023      	str	r3, [r4, #0]
 8000f02:	6123      	str	r3, [r4, #16]
 8000f04:	2301      	movs	r3, #1
 8000f06:	6163      	str	r3, [r4, #20]
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	ab01      	add	r3, sp, #4
 8000f0e:	466a      	mov	r2, sp
 8000f10:	f7ff ffc8 	bl	8000ea4 <__swhatbuf_r>
 8000f14:	9900      	ldr	r1, [sp, #0]
 8000f16:	4605      	mov	r5, r0
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f7ff fe89 	bl	8000c30 <_malloc_r>
 8000f1e:	b948      	cbnz	r0, 8000f34 <__smakebuf_r+0x44>
 8000f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f24:	059a      	lsls	r2, r3, #22
 8000f26:	d4ef      	bmi.n	8000f08 <__smakebuf_r+0x18>
 8000f28:	f023 0303 	bic.w	r3, r3, #3
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	81a3      	strh	r3, [r4, #12]
 8000f32:	e7e3      	b.n	8000efc <__smakebuf_r+0xc>
 8000f34:	89a3      	ldrh	r3, [r4, #12]
 8000f36:	6020      	str	r0, [r4, #0]
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	9b00      	ldr	r3, [sp, #0]
 8000f40:	6163      	str	r3, [r4, #20]
 8000f42:	9b01      	ldr	r3, [sp, #4]
 8000f44:	6120      	str	r0, [r4, #16]
 8000f46:	b15b      	cbz	r3, 8000f60 <__smakebuf_r+0x70>
 8000f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	f000 f81d 	bl	8000f8c <_isatty_r>
 8000f52:	b128      	cbz	r0, 8000f60 <__smakebuf_r+0x70>
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	81a3      	strh	r3, [r4, #12]
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	431d      	orrs	r5, r3
 8000f64:	81a5      	strh	r5, [r4, #12]
 8000f66:	e7cf      	b.n	8000f08 <__smakebuf_r+0x18>

08000f68 <_fstat_r>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4d07      	ldr	r5, [pc, #28]	; (8000f88 <_fstat_r+0x20>)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	602b      	str	r3, [r5, #0]
 8000f76:	f7ff f965 	bl	8000244 <_fstat>
 8000f7a:	1c43      	adds	r3, r0, #1
 8000f7c:	d102      	bne.n	8000f84 <_fstat_r+0x1c>
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	b103      	cbz	r3, 8000f84 <_fstat_r+0x1c>
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	200001b8 	.word	0x200001b8

08000f8c <_isatty_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4d06      	ldr	r5, [pc, #24]	; (8000fa8 <_isatty_r+0x1c>)
 8000f90:	2300      	movs	r3, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	602b      	str	r3, [r5, #0]
 8000f98:	f7ff f964 	bl	8000264 <_isatty>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_isatty_r+0x1a>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_isatty_r+0x1a>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200001b8 	.word	0x200001b8

08000fac <_sbrk_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d06      	ldr	r5, [pc, #24]	; (8000fc8 <_sbrk_r+0x1c>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f7ff f96c 	bl	8000294 <_sbrk>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk_r+0x1a>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	b103      	cbz	r3, 8000fc6 <_sbrk_r+0x1a>
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	200001b8 	.word	0x200001b8

08000fcc <_init>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr

08000fd8 <_fini>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	bf00      	nop
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr
