
mac-daddies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800111c  0800111c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800111c  0800111c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800111c  0800111c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800111c  0800111c  0001111c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  08001184  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001184  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001642  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000686  00000000  00000000  00021715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000110  00000000  00000000  00021f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b19  00000000  00000000  00022040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000203e  00000000  00000000  00025b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bf3c  00000000  00000000  00027b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b84  00000000  00000000  00033ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00034658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010f4 	.word	0x080010f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	080010f4 	.word	0x080010f4

080001d8 <user_led_init>:
 * - TIM6 will get started by TIM4_IRQ.
 *
 *
 */

void user_led_init() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	rcc->AHB1ENR |= GPIOA_EN;
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <user_led_init+0x28>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <user_led_init+0x28>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	gpioa->MODER |= (0b01 << 5 * 2);
 80001e8:	4b06      	ldr	r3, [pc, #24]	; (8000204 <user_led_init+0x2c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <user_led_init+0x2c>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023800 	.word	0x40023800
 8000204:	40020000 	.word	0x40020000

08000208 <tim4_init>:
void channel_monitor_init(void) {

}


void tim4_init(void) {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0

	/* PB6 is the input pin for TIC */
	rcc->AHB1ENR |= GPIOB_EN;			// enable GPIOB in RCC
 800020c:	4b2d      	ldr	r3, [pc, #180]	; (80002c4 <tim4_init+0xbc>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a2c      	ldr	r2, [pc, #176]	; (80002c4 <tim4_init+0xbc>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	gpiob->AFRL  |= (0b0010 << 6 * 4); 	// PB6 is AF02 (TIM4_CH1)
 8000218:	4b2b      	ldr	r3, [pc, #172]	; (80002c8 <tim4_init+0xc0>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a2a      	ldr	r2, [pc, #168]	; (80002c8 <tim4_init+0xc0>)
 800021e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000222:	6213      	str	r3, [r2, #32]
	gpiob->MODER |= (0b10 << 6*2);
 8000224:	4b28      	ldr	r3, [pc, #160]	; (80002c8 <tim4_init+0xc0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a27      	ldr	r2, [pc, #156]	; (80002c8 <tim4_init+0xc0>)
 800022a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022e:	6013      	str	r3, [r2, #0]

	/* TIM4 setup */
	rcc->APB1ENR |= TIM4_EN;			// enable TIM4 in RCC
 8000230:	4b24      	ldr	r3, [pc, #144]	; (80002c4 <tim4_init+0xbc>)
 8000232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000234:	4a23      	ldr	r2, [pc, #140]	; (80002c4 <tim4_init+0xbc>)
 8000236:	f043 0304 	orr.w	r3, r3, #4
 800023a:	6413      	str	r3, [r2, #64]	; 0x40

	tim4->CCMR1  &= ~(0b11 << 0);		// clear CC1S bits
 800023c:	4b23      	ldr	r3, [pc, #140]	; (80002cc <tim4_init+0xc4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	699a      	ldr	r2, [r3, #24]
 8000242:	4b22      	ldr	r3, [pc, #136]	; (80002cc <tim4_init+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f022 0203 	bic.w	r2, r2, #3
 800024a:	619a      	str	r2, [r3, #24]
	tim4->CCMR1  |=  (0b01 << 0);		// tim4 is in input capture mode
 800024c:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <tim4_init+0xc4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <tim4_init+0xc4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f042 0201 	orr.w	r2, r2, #1
 800025a:	619a      	str	r2, [r3, #24]

	tim4->CCER &=  ~(1 << 3 | 1 << 1);		// clear edge config, set to rising
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <tim4_init+0xc4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	6a1a      	ldr	r2, [r3, #32]
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <tim4_init+0xc4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f022 020a 	bic.w	r2, r2, #10
 800026a:	621a      	str	r2, [r3, #32]
	tim4->CCER |=   (1 << 3 | 1 << 1); 	// trigger TIC on either edge
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <tim4_init+0xc4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	6a1a      	ldr	r2, [r3, #32]
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <tim4_init+0xc4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f042 020a 	orr.w	r2, r2, #10
 800027a:	621a      	str	r2, [r3, #32]
	tim4->ARR |= ~(0b0);
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <tim4_init+0xc4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <tim4_init+0xc4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 32ff 	mov.w	r2, #4294967295
 800028a:	62da      	str	r2, [r3, #44]	; 0x2c
//	CC1 channel configured as input:
//	This bit determines if a capture of the counter value can actually be done into the input
//	capture/compare register 1 (TIMx_CCR1) or not.
//	0: Capture disabled
//	1: Capture enabled
	tim4->CCER |= (0b01 << 0); // enable input capture
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <tim4_init+0xc4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a1a      	ldr	r2, [r3, #32]
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <tim4_init+0xc4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f042 0201 	orr.w	r2, r2, #1
 800029a:	621a      	str	r2, [r3, #32]
	tim4->DIER |= 0b01 << 1;   // enable TIC interrupts
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <tim4_init+0xc4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	68da      	ldr	r2, [r3, #12]
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <tim4_init+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f042 0202 	orr.w	r2, r2, #2
 80002aa:	60da      	str	r2, [r3, #12]

	nvic_iser[0] |= (1 << 30); // TIM4 global interrupt is in NVIC_ISER0[30]
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <tim4_init+0xc8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <tim4_init+0xc8>)
 80002b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020400 	.word	0x40020400
 80002cc:	20000000 	.word	0x20000000
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <toggle_user_led>:

//void tim6_init(void) {
//	rcc->
//}

void toggle_user_led(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	gpioa->ODR ^= (1<<5);	// toggle pin 5
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <toggle_user_led+0x1c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <toggle_user_led+0x1c>)
 80002de:	f083 0320 	eor.w	r3, r3, #32
 80002e2:	6153      	str	r3, [r2, #20]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40020000 	.word	0x40020000

080002f4 <TIM4_IRQHandler>:




void TIM4_IRQHandler(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	tim4->DIER &= ~(0b01 << 1);  // reset CC1IE (Interrupt enable)
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <TIM4_IRQHandler+0x34>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	68da      	ldr	r2, [r3, #12]
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <TIM4_IRQHandler+0x34>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f022 0202 	bic.w	r2, r2, #2
 8000306:	60da      	str	r2, [r3, #12]
	tim4->SR = 0; 				 // clear all flags
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <TIM4_IRQHandler+0x34>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
	/* interrupt body */
	toggle_user_led();
 8000310:	f7ff ffe0 	bl	80002d4 <toggle_user_led>

	tim4->DIER |= 0b01 << 1;  // enable interrupts
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <TIM4_IRQHandler+0x34>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <TIM4_IRQHandler+0x34>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f042 0202 	orr.w	r2, r2, #2
 8000322:	60da      	str	r2, [r3, #12]

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000000 	.word	0x20000000

0800032c <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	init_usart2(57600,F_CPU);
 8000330:	4906      	ldr	r1, [pc, #24]	; (800034c <main+0x20>)
 8000332:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 8000336:	f000 f8f9 	bl	800052c <init_usart2>

	user_led_init();
 800033a:	f7ff ff4d 	bl	80001d8 <user_led_init>
    tim4_init();
 800033e:	f7ff ff63 	bl	8000208 <tim4_init>
	printf("Hello World!\n");
 8000342:	4803      	ldr	r0, [pc, #12]	; (8000350 <main+0x24>)
 8000344:	f000 fa8a 	bl	800085c <puts>

    /* Loop forever */
	while(1) {
 8000348:	e7fe      	b.n	8000348 <main+0x1c>
 800034a:	bf00      	nop
 800034c:	00f42400 	.word	0x00f42400
 8000350:	0800110c 	.word	0x0800110c

08000354 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800035c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000360:	4618      	mov	r0, r3
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037c:	605a      	str	r2, [r3, #4]
  return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <_isatty>:

int _isatty(int file)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000394:	2301      	movs	r3, #1
}
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b085      	sub	sp, #20
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ae:	2300      	movs	r3, #0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <_sbrk+0x5c>)
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <_sbrk+0x60>)
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <_sbrk+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d102      	bne.n	80003de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <_sbrk+0x64>)
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <_sbrk+0x68>)
 80003dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <_sbrk+0x64>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	693a      	ldr	r2, [r7, #16]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d207      	bcs.n	80003fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003ec:	f000 fc12 	bl	8000c14 <__errno>
 80003f0:	4603      	mov	r3, r0
 80003f2:	220c      	movs	r2, #12
 80003f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	e009      	b.n	8000410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <_sbrk+0x64>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <_sbrk+0x64>)
 800040c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040e:	68fb      	ldr	r3, [r7, #12]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20020000 	.word	0x20020000
 800041c:	00000400 	.word	0x00000400
 8000420:	2000007c 	.word	0x2000007c
 8000424:	200001d0 	.word	0x200001d0

08000428 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	e012      	b.n	8000464 <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	3301      	adds	r3, #1
 8000442:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 8000444:	f000 f836 	bl	80004b4 <usart2_getch>
 8000448:	4603      	mov	r3, r0
 800044a:	461a      	mov	r2, r3
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b0a      	cmp	r3, #10
 8000456:	d00a      	beq.n	800046e <_read+0x46>
		ptr++;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	3301      	adds	r3, #1
 800045c:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	429a      	cmp	r2, r3
 800046a:	dbe8      	blt.n	800043e <_read+0x16>
 800046c:	e000      	b.n	8000470 <_read+0x48>
		if(*ptr == '\n') break;
 800046e:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 8000470:	693b      	ldr	r3, [r7, #16]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <_write>:

int _write(int file, char *ptr, int len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e009      	b.n	80004a0 <_write+0x26>
	{
		usart2_putch(*ptr++);
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60ba      	str	r2, [r7, #8]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f82f 	bl	80004f8 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf1      	blt.n	800048c <_write+0x12>
	}
	return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <usart2_getch>:



char usart2_getch(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 80004ba:	bf00      	nop
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <usart2_getch+0x3c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	2b20      	cmp	r3, #32
 80004c6:	d1f9      	bne.n	80004bc <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <usart2_getch+0x40>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f811 	bl	80004f8 <usart2_putch>

	if (c == '\r'){  // If character is CR
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	d104      	bne.n	80004e6 <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 80004dc:	200a      	movs	r0, #10
 80004de:	f000 f80b 	bl	80004f8 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 80004e2:	230a      	movs	r3, #10
 80004e4:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40004400 	.word	0x40004400
 80004f4:	40004404 	.word	0x40004404

080004f8 <usart2_putch>:

void usart2_putch(char c){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 8000502:	bf00      	nop
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <usart2_putch+0x2c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050c:	2b80      	cmp	r3, #128	; 0x80
 800050e:	d1f9      	bne.n	8000504 <usart2_putch+0xc>
	*(USART_DR) = c;
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <usart2_putch+0x30>)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40004400 	.word	0x40004400
 8000528:	40004404 	.word	0x40004404

0800052c <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <init_usart2+0x8c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <init_usart2+0x8c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <init_usart2+0x90>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <init_usart2+0x90>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <init_usart2+0x94>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <init_usart2+0x94>)
 8000554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000558:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <init_usart2+0x94>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <init_usart2+0x94>)
 8000560:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000564:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <init_usart2+0x98>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <init_usart2+0x98>)
 800056c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000570:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <init_usart2+0x98>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <init_usart2+0x98>)
 8000578:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800057c:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <init_usart2+0x9c>)
 8000580:	f242 020c 	movw	r2, #8204	; 0x200c
 8000584:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <init_usart2+0xa0>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <init_usart2+0xa4>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 8000592:	4910      	ldr	r1, [pc, #64]	; (80005d4 <init_usart2+0xa8>)
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	fbb2 f3f3 	udiv	r3, r2, r3
 800059c:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <init_usart2+0xac>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6898      	ldr	r0, [r3, #8]
 80005a4:	2300      	movs	r3, #0
 80005a6:	2202      	movs	r2, #2
 80005a8:	2100      	movs	r1, #0
 80005aa:	f000 f95f 	bl	800086c <setvbuf>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023830 	.word	0x40023830
 80005bc:	40023840 	.word	0x40023840
 80005c0:	40020020 	.word	0x40020020
 80005c4:	40020000 	.word	0x40020000
 80005c8:	4000440c 	.word	0x4000440c
 80005cc:	40004410 	.word	0x40004410
 80005d0:	40004414 	.word	0x40004414
 80005d4:	40004408 	.word	0x40004408
 80005d8:	2000005c 	.word	0x2000005c

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 fb09 	bl	8000c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fe8d 	bl	800032c <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000620:	08001124 	.word	0x08001124
  ldr r2, =_sbss
 8000624:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000628:	200001cc 	.word	0x200001cc

0800062c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>
	...

08000630 <std>:
 8000630:	2300      	movs	r3, #0
 8000632:	b510      	push	{r4, lr}
 8000634:	4604      	mov	r4, r0
 8000636:	e9c0 3300 	strd	r3, r3, [r0]
 800063a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800063e:	6083      	str	r3, [r0, #8]
 8000640:	8181      	strh	r1, [r0, #12]
 8000642:	6643      	str	r3, [r0, #100]	; 0x64
 8000644:	81c2      	strh	r2, [r0, #14]
 8000646:	6183      	str	r3, [r0, #24]
 8000648:	4619      	mov	r1, r3
 800064a:	2208      	movs	r2, #8
 800064c:	305c      	adds	r0, #92	; 0x5c
 800064e:	f000 fa93 	bl	8000b78 <memset>
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <std+0x58>)
 8000654:	6263      	str	r3, [r4, #36]	; 0x24
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <std+0x5c>)
 8000658:	62a3      	str	r3, [r4, #40]	; 0x28
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <std+0x60>)
 800065c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <std+0x64>)
 8000660:	6323      	str	r3, [r4, #48]	; 0x30
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <std+0x68>)
 8000664:	6224      	str	r4, [r4, #32]
 8000666:	429c      	cmp	r4, r3
 8000668:	d006      	beq.n	8000678 <std+0x48>
 800066a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800066e:	4294      	cmp	r4, r2
 8000670:	d002      	beq.n	8000678 <std+0x48>
 8000672:	33d0      	adds	r3, #208	; 0xd0
 8000674:	429c      	cmp	r4, r3
 8000676:	d105      	bne.n	8000684 <std+0x54>
 8000678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000680:	f000 baf2 	b.w	8000c68 <__retarget_lock_init_recursive>
 8000684:	bd10      	pop	{r4, pc}
 8000686:	bf00      	nop
 8000688:	080009c9 	.word	0x080009c9
 800068c:	080009eb 	.word	0x080009eb
 8000690:	08000a23 	.word	0x08000a23
 8000694:	08000a47 	.word	0x08000a47
 8000698:	20000080 	.word	0x20000080

0800069c <stdio_exit_handler>:
 800069c:	4a02      	ldr	r2, [pc, #8]	; (80006a8 <stdio_exit_handler+0xc>)
 800069e:	4903      	ldr	r1, [pc, #12]	; (80006ac <stdio_exit_handler+0x10>)
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <stdio_exit_handler+0x14>)
 80006a2:	f000 b869 	b.w	8000778 <_fwalk_sglue>
 80006a6:	bf00      	nop
 80006a8:	20000004 	.word	0x20000004
 80006ac:	08000f7d 	.word	0x08000f7d
 80006b0:	20000010 	.word	0x20000010

080006b4 <cleanup_stdio>:
 80006b4:	6841      	ldr	r1, [r0, #4]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <cleanup_stdio+0x34>)
 80006b8:	4299      	cmp	r1, r3
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	d001      	beq.n	80006c4 <cleanup_stdio+0x10>
 80006c0:	f000 fc5c 	bl	8000f7c <_fflush_r>
 80006c4:	68a1      	ldr	r1, [r4, #8]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <cleanup_stdio+0x38>)
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d002      	beq.n	80006d2 <cleanup_stdio+0x1e>
 80006cc:	4620      	mov	r0, r4
 80006ce:	f000 fc55 	bl	8000f7c <_fflush_r>
 80006d2:	68e1      	ldr	r1, [r4, #12]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <cleanup_stdio+0x3c>)
 80006d6:	4299      	cmp	r1, r3
 80006d8:	d004      	beq.n	80006e4 <cleanup_stdio+0x30>
 80006da:	4620      	mov	r0, r4
 80006dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e0:	f000 bc4c 	b.w	8000f7c <_fflush_r>
 80006e4:	bd10      	pop	{r4, pc}
 80006e6:	bf00      	nop
 80006e8:	20000080 	.word	0x20000080
 80006ec:	200000e8 	.word	0x200000e8
 80006f0:	20000150 	.word	0x20000150

080006f4 <global_stdio_init.part.0>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <global_stdio_init.part.0+0x30>)
 80006f8:	4c0b      	ldr	r4, [pc, #44]	; (8000728 <global_stdio_init.part.0+0x34>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <global_stdio_init.part.0+0x38>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	4620      	mov	r0, r4
 8000700:	2200      	movs	r2, #0
 8000702:	2104      	movs	r1, #4
 8000704:	f7ff ff94 	bl	8000630 <std>
 8000708:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800070c:	2201      	movs	r2, #1
 800070e:	2109      	movs	r1, #9
 8000710:	f7ff ff8e 	bl	8000630 <std>
 8000714:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000718:	2202      	movs	r2, #2
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071e:	2112      	movs	r1, #18
 8000720:	f7ff bf86 	b.w	8000630 <std>
 8000724:	200001b8 	.word	0x200001b8
 8000728:	20000080 	.word	0x20000080
 800072c:	0800069d 	.word	0x0800069d

08000730 <__sfp_lock_acquire>:
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <__sfp_lock_acquire+0x8>)
 8000732:	f000 ba9a 	b.w	8000c6a <__retarget_lock_acquire_recursive>
 8000736:	bf00      	nop
 8000738:	200001c1 	.word	0x200001c1

0800073c <__sfp_lock_release>:
 800073c:	4801      	ldr	r0, [pc, #4]	; (8000744 <__sfp_lock_release+0x8>)
 800073e:	f000 ba95 	b.w	8000c6c <__retarget_lock_release_recursive>
 8000742:	bf00      	nop
 8000744:	200001c1 	.word	0x200001c1

08000748 <__sinit>:
 8000748:	b510      	push	{r4, lr}
 800074a:	4604      	mov	r4, r0
 800074c:	f7ff fff0 	bl	8000730 <__sfp_lock_acquire>
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	b11b      	cbz	r3, 800075c <__sinit+0x14>
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f7ff bff0 	b.w	800073c <__sfp_lock_release>
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__sinit+0x28>)
 800075e:	6223      	str	r3, [r4, #32]
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__sinit+0x2c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f5      	bne.n	8000754 <__sinit+0xc>
 8000768:	f7ff ffc4 	bl	80006f4 <global_stdio_init.part.0>
 800076c:	e7f2      	b.n	8000754 <__sinit+0xc>
 800076e:	bf00      	nop
 8000770:	080006b5 	.word	0x080006b5
 8000774:	200001b8 	.word	0x200001b8

08000778 <_fwalk_sglue>:
 8000778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800077c:	4607      	mov	r7, r0
 800077e:	4688      	mov	r8, r1
 8000780:	4614      	mov	r4, r2
 8000782:	2600      	movs	r6, #0
 8000784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000788:	f1b9 0901 	subs.w	r9, r9, #1
 800078c:	d505      	bpl.n	800079a <_fwalk_sglue+0x22>
 800078e:	6824      	ldr	r4, [r4, #0]
 8000790:	2c00      	cmp	r4, #0
 8000792:	d1f7      	bne.n	8000784 <_fwalk_sglue+0xc>
 8000794:	4630      	mov	r0, r6
 8000796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800079a:	89ab      	ldrh	r3, [r5, #12]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d907      	bls.n	80007b0 <_fwalk_sglue+0x38>
 80007a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	d003      	beq.n	80007b0 <_fwalk_sglue+0x38>
 80007a8:	4629      	mov	r1, r5
 80007aa:	4638      	mov	r0, r7
 80007ac:	47c0      	blx	r8
 80007ae:	4306      	orrs	r6, r0
 80007b0:	3568      	adds	r5, #104	; 0x68
 80007b2:	e7e9      	b.n	8000788 <_fwalk_sglue+0x10>

080007b4 <_puts_r>:
 80007b4:	6a03      	ldr	r3, [r0, #32]
 80007b6:	b570      	push	{r4, r5, r6, lr}
 80007b8:	6884      	ldr	r4, [r0, #8]
 80007ba:	4605      	mov	r5, r0
 80007bc:	460e      	mov	r6, r1
 80007be:	b90b      	cbnz	r3, 80007c4 <_puts_r+0x10>
 80007c0:	f7ff ffc2 	bl	8000748 <__sinit>
 80007c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007c6:	07db      	lsls	r3, r3, #31
 80007c8:	d405      	bmi.n	80007d6 <_puts_r+0x22>
 80007ca:	89a3      	ldrh	r3, [r4, #12]
 80007cc:	0598      	lsls	r0, r3, #22
 80007ce:	d402      	bmi.n	80007d6 <_puts_r+0x22>
 80007d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007d2:	f000 fa4a 	bl	8000c6a <__retarget_lock_acquire_recursive>
 80007d6:	89a3      	ldrh	r3, [r4, #12]
 80007d8:	0719      	lsls	r1, r3, #28
 80007da:	d513      	bpl.n	8000804 <_puts_r+0x50>
 80007dc:	6923      	ldr	r3, [r4, #16]
 80007de:	b18b      	cbz	r3, 8000804 <_puts_r+0x50>
 80007e0:	3e01      	subs	r6, #1
 80007e2:	68a3      	ldr	r3, [r4, #8]
 80007e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007e8:	3b01      	subs	r3, #1
 80007ea:	60a3      	str	r3, [r4, #8]
 80007ec:	b9e9      	cbnz	r1, 800082a <_puts_r+0x76>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da2e      	bge.n	8000850 <_puts_r+0x9c>
 80007f2:	4622      	mov	r2, r4
 80007f4:	210a      	movs	r1, #10
 80007f6:	4628      	mov	r0, r5
 80007f8:	f000 f929 	bl	8000a4e <__swbuf_r>
 80007fc:	3001      	adds	r0, #1
 80007fe:	d007      	beq.n	8000810 <_puts_r+0x5c>
 8000800:	250a      	movs	r5, #10
 8000802:	e007      	b.n	8000814 <_puts_r+0x60>
 8000804:	4621      	mov	r1, r4
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f95e 	bl	8000ac8 <__swsetup_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	d0e7      	beq.n	80007e0 <_puts_r+0x2c>
 8000810:	f04f 35ff 	mov.w	r5, #4294967295
 8000814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000816:	07da      	lsls	r2, r3, #31
 8000818:	d405      	bmi.n	8000826 <_puts_r+0x72>
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	059b      	lsls	r3, r3, #22
 800081e:	d402      	bmi.n	8000826 <_puts_r+0x72>
 8000820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000822:	f000 fa23 	bl	8000c6c <__retarget_lock_release_recursive>
 8000826:	4628      	mov	r0, r5
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	2b00      	cmp	r3, #0
 800082c:	da04      	bge.n	8000838 <_puts_r+0x84>
 800082e:	69a2      	ldr	r2, [r4, #24]
 8000830:	429a      	cmp	r2, r3
 8000832:	dc06      	bgt.n	8000842 <_puts_r+0x8e>
 8000834:	290a      	cmp	r1, #10
 8000836:	d004      	beq.n	8000842 <_puts_r+0x8e>
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	6022      	str	r2, [r4, #0]
 800083e:	7019      	strb	r1, [r3, #0]
 8000840:	e7cf      	b.n	80007e2 <_puts_r+0x2e>
 8000842:	4622      	mov	r2, r4
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f902 	bl	8000a4e <__swbuf_r>
 800084a:	3001      	adds	r0, #1
 800084c:	d1c9      	bne.n	80007e2 <_puts_r+0x2e>
 800084e:	e7df      	b.n	8000810 <_puts_r+0x5c>
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	250a      	movs	r5, #10
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	6022      	str	r2, [r4, #0]
 8000858:	701d      	strb	r5, [r3, #0]
 800085a:	e7db      	b.n	8000814 <_puts_r+0x60>

0800085c <puts>:
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <puts+0xc>)
 800085e:	4601      	mov	r1, r0
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	f7ff bfa7 	b.w	80007b4 <_puts_r>
 8000866:	bf00      	nop
 8000868:	2000005c 	.word	0x2000005c

0800086c <setvbuf>:
 800086c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000870:	461d      	mov	r5, r3
 8000872:	4b54      	ldr	r3, [pc, #336]	; (80009c4 <setvbuf+0x158>)
 8000874:	681f      	ldr	r7, [r3, #0]
 8000876:	4604      	mov	r4, r0
 8000878:	460e      	mov	r6, r1
 800087a:	4690      	mov	r8, r2
 800087c:	b127      	cbz	r7, 8000888 <setvbuf+0x1c>
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	b913      	cbnz	r3, 8000888 <setvbuf+0x1c>
 8000882:	4638      	mov	r0, r7
 8000884:	f7ff ff60 	bl	8000748 <__sinit>
 8000888:	f1b8 0f02 	cmp.w	r8, #2
 800088c:	d006      	beq.n	800089c <setvbuf+0x30>
 800088e:	f1b8 0f01 	cmp.w	r8, #1
 8000892:	f200 8094 	bhi.w	80009be <setvbuf+0x152>
 8000896:	2d00      	cmp	r5, #0
 8000898:	f2c0 8091 	blt.w	80009be <setvbuf+0x152>
 800089c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800089e:	07da      	lsls	r2, r3, #31
 80008a0:	d405      	bmi.n	80008ae <setvbuf+0x42>
 80008a2:	89a3      	ldrh	r3, [r4, #12]
 80008a4:	059b      	lsls	r3, r3, #22
 80008a6:	d402      	bmi.n	80008ae <setvbuf+0x42>
 80008a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008aa:	f000 f9de 	bl	8000c6a <__retarget_lock_acquire_recursive>
 80008ae:	4621      	mov	r1, r4
 80008b0:	4638      	mov	r0, r7
 80008b2:	f000 fb63 	bl	8000f7c <_fflush_r>
 80008b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008b8:	b141      	cbz	r1, 80008cc <setvbuf+0x60>
 80008ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008be:	4299      	cmp	r1, r3
 80008c0:	d002      	beq.n	80008c8 <setvbuf+0x5c>
 80008c2:	4638      	mov	r0, r7
 80008c4:	f000 f9d4 	bl	8000c70 <_free_r>
 80008c8:	2300      	movs	r3, #0
 80008ca:	6363      	str	r3, [r4, #52]	; 0x34
 80008cc:	2300      	movs	r3, #0
 80008ce:	61a3      	str	r3, [r4, #24]
 80008d0:	6063      	str	r3, [r4, #4]
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	0618      	lsls	r0, r3, #24
 80008d6:	d503      	bpl.n	80008e0 <setvbuf+0x74>
 80008d8:	6921      	ldr	r1, [r4, #16]
 80008da:	4638      	mov	r0, r7
 80008dc:	f000 f9c8 	bl	8000c70 <_free_r>
 80008e0:	89a3      	ldrh	r3, [r4, #12]
 80008e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80008e6:	f023 0303 	bic.w	r3, r3, #3
 80008ea:	f1b8 0f02 	cmp.w	r8, #2
 80008ee:	81a3      	strh	r3, [r4, #12]
 80008f0:	d05f      	beq.n	80009b2 <setvbuf+0x146>
 80008f2:	ab01      	add	r3, sp, #4
 80008f4:	466a      	mov	r2, sp
 80008f6:	4621      	mov	r1, r4
 80008f8:	4638      	mov	r0, r7
 80008fa:	f000 fb67 	bl	8000fcc <__swhatbuf_r>
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	4318      	orrs	r0, r3
 8000902:	81a0      	strh	r0, [r4, #12]
 8000904:	bb2d      	cbnz	r5, 8000952 <setvbuf+0xe6>
 8000906:	9d00      	ldr	r5, [sp, #0]
 8000908:	4628      	mov	r0, r5
 800090a:	f000 f9fd 	bl	8000d08 <malloc>
 800090e:	4606      	mov	r6, r0
 8000910:	2800      	cmp	r0, #0
 8000912:	d150      	bne.n	80009b6 <setvbuf+0x14a>
 8000914:	f8dd 9000 	ldr.w	r9, [sp]
 8000918:	45a9      	cmp	r9, r5
 800091a:	d13e      	bne.n	800099a <setvbuf+0x12e>
 800091c:	f04f 35ff 	mov.w	r5, #4294967295
 8000920:	2200      	movs	r2, #0
 8000922:	60a2      	str	r2, [r4, #8]
 8000924:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8000928:	6022      	str	r2, [r4, #0]
 800092a:	6122      	str	r2, [r4, #16]
 800092c:	2201      	movs	r2, #1
 800092e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000932:	6162      	str	r2, [r4, #20]
 8000934:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	07d1      	lsls	r1, r2, #31
 800093c:	81a3      	strh	r3, [r4, #12]
 800093e:	d404      	bmi.n	800094a <setvbuf+0xde>
 8000940:	059b      	lsls	r3, r3, #22
 8000942:	d402      	bmi.n	800094a <setvbuf+0xde>
 8000944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000946:	f000 f991 	bl	8000c6c <__retarget_lock_release_recursive>
 800094a:	4628      	mov	r0, r5
 800094c:	b003      	add	sp, #12
 800094e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000952:	2e00      	cmp	r6, #0
 8000954:	d0d8      	beq.n	8000908 <setvbuf+0x9c>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	b913      	cbnz	r3, 8000960 <setvbuf+0xf4>
 800095a:	4638      	mov	r0, r7
 800095c:	f7ff fef4 	bl	8000748 <__sinit>
 8000960:	f1b8 0f01 	cmp.w	r8, #1
 8000964:	bf08      	it	eq
 8000966:	89a3      	ldrheq	r3, [r4, #12]
 8000968:	6026      	str	r6, [r4, #0]
 800096a:	bf04      	itt	eq
 800096c:	f043 0301 	orreq.w	r3, r3, #1
 8000970:	81a3      	strheq	r3, [r4, #12]
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	f013 0208 	ands.w	r2, r3, #8
 8000978:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800097c:	d01d      	beq.n	80009ba <setvbuf+0x14e>
 800097e:	07da      	lsls	r2, r3, #31
 8000980:	bf41      	itttt	mi
 8000982:	2200      	movmi	r2, #0
 8000984:	426d      	negmi	r5, r5
 8000986:	60a2      	strmi	r2, [r4, #8]
 8000988:	61a5      	strmi	r5, [r4, #24]
 800098a:	bf58      	it	pl
 800098c:	60a5      	strpl	r5, [r4, #8]
 800098e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8000990:	f015 0501 	ands.w	r5, r5, #1
 8000994:	d0d4      	beq.n	8000940 <setvbuf+0xd4>
 8000996:	2500      	movs	r5, #0
 8000998:	e7d7      	b.n	800094a <setvbuf+0xde>
 800099a:	4648      	mov	r0, r9
 800099c:	f000 f9b4 	bl	8000d08 <malloc>
 80009a0:	4606      	mov	r6, r0
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d0ba      	beq.n	800091c <setvbuf+0xb0>
 80009a6:	89a3      	ldrh	r3, [r4, #12]
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	81a3      	strh	r3, [r4, #12]
 80009ae:	464d      	mov	r5, r9
 80009b0:	e7d1      	b.n	8000956 <setvbuf+0xea>
 80009b2:	2500      	movs	r5, #0
 80009b4:	e7b4      	b.n	8000920 <setvbuf+0xb4>
 80009b6:	46a9      	mov	r9, r5
 80009b8:	e7f5      	b.n	80009a6 <setvbuf+0x13a>
 80009ba:	60a2      	str	r2, [r4, #8]
 80009bc:	e7e7      	b.n	800098e <setvbuf+0x122>
 80009be:	f04f 35ff 	mov.w	r5, #4294967295
 80009c2:	e7c2      	b.n	800094a <setvbuf+0xde>
 80009c4:	2000005c 	.word	0x2000005c

080009c8 <__sread>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	460c      	mov	r4, r1
 80009cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d0:	f000 f8fc 	bl	8000bcc <_read_r>
 80009d4:	2800      	cmp	r0, #0
 80009d6:	bfab      	itete	ge
 80009d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009da:	89a3      	ldrhlt	r3, [r4, #12]
 80009dc:	181b      	addge	r3, r3, r0
 80009de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80009e2:	bfac      	ite	ge
 80009e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80009e6:	81a3      	strhlt	r3, [r4, #12]
 80009e8:	bd10      	pop	{r4, pc}

080009ea <__swrite>:
 80009ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ee:	461f      	mov	r7, r3
 80009f0:	898b      	ldrh	r3, [r1, #12]
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	4605      	mov	r5, r0
 80009f6:	460c      	mov	r4, r1
 80009f8:	4616      	mov	r6, r2
 80009fa:	d505      	bpl.n	8000a08 <__swrite+0x1e>
 80009fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a00:	2302      	movs	r3, #2
 8000a02:	2200      	movs	r2, #0
 8000a04:	f000 f8d0 	bl	8000ba8 <_lseek_r>
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a12:	81a3      	strh	r3, [r4, #12]
 8000a14:	4632      	mov	r2, r6
 8000a16:	463b      	mov	r3, r7
 8000a18:	4628      	mov	r0, r5
 8000a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1e:	f000 b8e7 	b.w	8000bf0 <_write_r>

08000a22 <__sseek>:
 8000a22:	b510      	push	{r4, lr}
 8000a24:	460c      	mov	r4, r1
 8000a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a2a:	f000 f8bd 	bl	8000ba8 <_lseek_r>
 8000a2e:	1c43      	adds	r3, r0, #1
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	bf15      	itete	ne
 8000a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a3e:	81a3      	strheq	r3, [r4, #12]
 8000a40:	bf18      	it	ne
 8000a42:	81a3      	strhne	r3, [r4, #12]
 8000a44:	bd10      	pop	{r4, pc}

08000a46 <__sclose>:
 8000a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a4a:	f000 b89d 	b.w	8000b88 <_close_r>

08000a4e <__swbuf_r>:
 8000a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a50:	460e      	mov	r6, r1
 8000a52:	4614      	mov	r4, r2
 8000a54:	4605      	mov	r5, r0
 8000a56:	b118      	cbz	r0, 8000a60 <__swbuf_r+0x12>
 8000a58:	6a03      	ldr	r3, [r0, #32]
 8000a5a:	b90b      	cbnz	r3, 8000a60 <__swbuf_r+0x12>
 8000a5c:	f7ff fe74 	bl	8000748 <__sinit>
 8000a60:	69a3      	ldr	r3, [r4, #24]
 8000a62:	60a3      	str	r3, [r4, #8]
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	071a      	lsls	r2, r3, #28
 8000a68:	d525      	bpl.n	8000ab6 <__swbuf_r+0x68>
 8000a6a:	6923      	ldr	r3, [r4, #16]
 8000a6c:	b31b      	cbz	r3, 8000ab6 <__swbuf_r+0x68>
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	6922      	ldr	r2, [r4, #16]
 8000a72:	1a98      	subs	r0, r3, r2
 8000a74:	6963      	ldr	r3, [r4, #20]
 8000a76:	b2f6      	uxtb	r6, r6
 8000a78:	4283      	cmp	r3, r0
 8000a7a:	4637      	mov	r7, r6
 8000a7c:	dc04      	bgt.n	8000a88 <__swbuf_r+0x3a>
 8000a7e:	4621      	mov	r1, r4
 8000a80:	4628      	mov	r0, r5
 8000a82:	f000 fa7b 	bl	8000f7c <_fflush_r>
 8000a86:	b9e0      	cbnz	r0, 8000ac2 <__swbuf_r+0x74>
 8000a88:	68a3      	ldr	r3, [r4, #8]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60a3      	str	r3, [r4, #8]
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	6022      	str	r2, [r4, #0]
 8000a94:	701e      	strb	r6, [r3, #0]
 8000a96:	6962      	ldr	r2, [r4, #20]
 8000a98:	1c43      	adds	r3, r0, #1
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d004      	beq.n	8000aa8 <__swbuf_r+0x5a>
 8000a9e:	89a3      	ldrh	r3, [r4, #12]
 8000aa0:	07db      	lsls	r3, r3, #31
 8000aa2:	d506      	bpl.n	8000ab2 <__swbuf_r+0x64>
 8000aa4:	2e0a      	cmp	r6, #10
 8000aa6:	d104      	bne.n	8000ab2 <__swbuf_r+0x64>
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	4628      	mov	r0, r5
 8000aac:	f000 fa66 	bl	8000f7c <_fflush_r>
 8000ab0:	b938      	cbnz	r0, 8000ac2 <__swbuf_r+0x74>
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f000 f805 	bl	8000ac8 <__swsetup_r>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d0d5      	beq.n	8000a6e <__swbuf_r+0x20>
 8000ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8000ac6:	e7f4      	b.n	8000ab2 <__swbuf_r+0x64>

08000ac8 <__swsetup_r>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <__swsetup_r+0xac>)
 8000acc:	4605      	mov	r5, r0
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	b118      	cbz	r0, 8000adc <__swsetup_r+0x14>
 8000ad4:	6a03      	ldr	r3, [r0, #32]
 8000ad6:	b90b      	cbnz	r3, 8000adc <__swsetup_r+0x14>
 8000ad8:	f7ff fe36 	bl	8000748 <__sinit>
 8000adc:	89a3      	ldrh	r3, [r4, #12]
 8000ade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ae2:	0718      	lsls	r0, r3, #28
 8000ae4:	d422      	bmi.n	8000b2c <__swsetup_r+0x64>
 8000ae6:	06d9      	lsls	r1, r3, #27
 8000ae8:	d407      	bmi.n	8000afa <__swsetup_r+0x32>
 8000aea:	2309      	movs	r3, #9
 8000aec:	602b      	str	r3, [r5, #0]
 8000aee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000af2:	81a3      	strh	r3, [r4, #12]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	e034      	b.n	8000b64 <__swsetup_r+0x9c>
 8000afa:	0758      	lsls	r0, r3, #29
 8000afc:	d512      	bpl.n	8000b24 <__swsetup_r+0x5c>
 8000afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b00:	b141      	cbz	r1, 8000b14 <__swsetup_r+0x4c>
 8000b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d002      	beq.n	8000b10 <__swsetup_r+0x48>
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 f8b0 	bl	8000c70 <_free_r>
 8000b10:	2300      	movs	r3, #0
 8000b12:	6363      	str	r3, [r4, #52]	; 0x34
 8000b14:	89a3      	ldrh	r3, [r4, #12]
 8000b16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b1a:	81a3      	strh	r3, [r4, #12]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	6063      	str	r3, [r4, #4]
 8000b20:	6923      	ldr	r3, [r4, #16]
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	89a3      	ldrh	r3, [r4, #12]
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	81a3      	strh	r3, [r4, #12]
 8000b2c:	6923      	ldr	r3, [r4, #16]
 8000b2e:	b94b      	cbnz	r3, 8000b44 <__swsetup_r+0x7c>
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b3a:	d003      	beq.n	8000b44 <__swsetup_r+0x7c>
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 fa6a 	bl	8001018 <__smakebuf_r>
 8000b44:	89a0      	ldrh	r0, [r4, #12]
 8000b46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b4a:	f010 0301 	ands.w	r3, r0, #1
 8000b4e:	d00a      	beq.n	8000b66 <__swsetup_r+0x9e>
 8000b50:	2300      	movs	r3, #0
 8000b52:	60a3      	str	r3, [r4, #8]
 8000b54:	6963      	ldr	r3, [r4, #20]
 8000b56:	425b      	negs	r3, r3
 8000b58:	61a3      	str	r3, [r4, #24]
 8000b5a:	6923      	ldr	r3, [r4, #16]
 8000b5c:	b943      	cbnz	r3, 8000b70 <__swsetup_r+0xa8>
 8000b5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b62:	d1c4      	bne.n	8000aee <__swsetup_r+0x26>
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	0781      	lsls	r1, r0, #30
 8000b68:	bf58      	it	pl
 8000b6a:	6963      	ldrpl	r3, [r4, #20]
 8000b6c:	60a3      	str	r3, [r4, #8]
 8000b6e:	e7f4      	b.n	8000b5a <__swsetup_r+0x92>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7f7      	b.n	8000b64 <__swsetup_r+0x9c>
 8000b74:	2000005c 	.word	0x2000005c

08000b78 <memset>:
 8000b78:	4402      	add	r2, r0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d100      	bne.n	8000b82 <memset+0xa>
 8000b80:	4770      	bx	lr
 8000b82:	f803 1b01 	strb.w	r1, [r3], #1
 8000b86:	e7f9      	b.n	8000b7c <memset+0x4>

08000b88 <_close_r>:
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	4d06      	ldr	r5, [pc, #24]	; (8000ba4 <_close_r+0x1c>)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4608      	mov	r0, r1
 8000b92:	602b      	str	r3, [r5, #0]
 8000b94:	f7ff fbde 	bl	8000354 <_close>
 8000b98:	1c43      	adds	r3, r0, #1
 8000b9a:	d102      	bne.n	8000ba2 <_close_r+0x1a>
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	b103      	cbz	r3, 8000ba2 <_close_r+0x1a>
 8000ba0:	6023      	str	r3, [r4, #0]
 8000ba2:	bd38      	pop	{r3, r4, r5, pc}
 8000ba4:	200001bc 	.word	0x200001bc

08000ba8 <_lseek_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4d07      	ldr	r5, [pc, #28]	; (8000bc8 <_lseek_r+0x20>)
 8000bac:	4604      	mov	r4, r0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	602a      	str	r2, [r5, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	f7ff fbf3 	bl	80003a2 <_lseek>
 8000bbc:	1c43      	adds	r3, r0, #1
 8000bbe:	d102      	bne.n	8000bc6 <_lseek_r+0x1e>
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	b103      	cbz	r3, 8000bc6 <_lseek_r+0x1e>
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	200001bc 	.word	0x200001bc

08000bcc <_read_r>:
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	4d07      	ldr	r5, [pc, #28]	; (8000bec <_read_r+0x20>)
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	602a      	str	r2, [r5, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f7ff fc24 	bl	8000428 <_read>
 8000be0:	1c43      	adds	r3, r0, #1
 8000be2:	d102      	bne.n	8000bea <_read_r+0x1e>
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	b103      	cbz	r3, 8000bea <_read_r+0x1e>
 8000be8:	6023      	str	r3, [r4, #0]
 8000bea:	bd38      	pop	{r3, r4, r5, pc}
 8000bec:	200001bc 	.word	0x200001bc

08000bf0 <_write_r>:
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4d07      	ldr	r5, [pc, #28]	; (8000c10 <_write_r+0x20>)
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	602a      	str	r2, [r5, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f7ff fc3b 	bl	800047a <_write>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d102      	bne.n	8000c0e <_write_r+0x1e>
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	b103      	cbz	r3, 8000c0e <_write_r+0x1e>
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
 8000c10:	200001bc 	.word	0x200001bc

08000c14 <__errno>:
 8000c14:	4b01      	ldr	r3, [pc, #4]	; (8000c1c <__errno+0x8>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2000005c 	.word	0x2000005c

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4d0d      	ldr	r5, [pc, #52]	; (8000c58 <__libc_init_array+0x38>)
 8000c24:	4c0d      	ldr	r4, [pc, #52]	; (8000c5c <__libc_init_array+0x3c>)
 8000c26:	1b64      	subs	r4, r4, r5
 8000c28:	10a4      	asrs	r4, r4, #2
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	42a6      	cmp	r6, r4
 8000c2e:	d109      	bne.n	8000c44 <__libc_init_array+0x24>
 8000c30:	4d0b      	ldr	r5, [pc, #44]	; (8000c60 <__libc_init_array+0x40>)
 8000c32:	4c0c      	ldr	r4, [pc, #48]	; (8000c64 <__libc_init_array+0x44>)
 8000c34:	f000 fa5e 	bl	80010f4 <_init>
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	10a4      	asrs	r4, r4, #2
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	42a6      	cmp	r6, r4
 8000c40:	d105      	bne.n	8000c4e <__libc_init_array+0x2e>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c48:	4798      	blx	r3
 8000c4a:	3601      	adds	r6, #1
 8000c4c:	e7ee      	b.n	8000c2c <__libc_init_array+0xc>
 8000c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c52:	4798      	blx	r3
 8000c54:	3601      	adds	r6, #1
 8000c56:	e7f2      	b.n	8000c3e <__libc_init_array+0x1e>
 8000c58:	0800111c 	.word	0x0800111c
 8000c5c:	0800111c 	.word	0x0800111c
 8000c60:	0800111c 	.word	0x0800111c
 8000c64:	08001120 	.word	0x08001120

08000c68 <__retarget_lock_init_recursive>:
 8000c68:	4770      	bx	lr

08000c6a <__retarget_lock_acquire_recursive>:
 8000c6a:	4770      	bx	lr

08000c6c <__retarget_lock_release_recursive>:
 8000c6c:	4770      	bx	lr
	...

08000c70 <_free_r>:
 8000c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d044      	beq.n	8000d00 <_free_r+0x90>
 8000c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c7a:	9001      	str	r0, [sp, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8000c82:	bfb8      	it	lt
 8000c84:	18e4      	addlt	r4, r4, r3
 8000c86:	f000 f8e7 	bl	8000e58 <__malloc_lock>
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <_free_r+0x94>)
 8000c8c:	9801      	ldr	r0, [sp, #4]
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	b933      	cbnz	r3, 8000ca0 <_free_r+0x30>
 8000c92:	6063      	str	r3, [r4, #4]
 8000c94:	6014      	str	r4, [r2, #0]
 8000c96:	b003      	add	sp, #12
 8000c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c9c:	f000 b8e2 	b.w	8000e64 <__malloc_unlock>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	d908      	bls.n	8000cb6 <_free_r+0x46>
 8000ca4:	6825      	ldr	r5, [r4, #0]
 8000ca6:	1961      	adds	r1, r4, r5
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	bf01      	itttt	eq
 8000cac:	6819      	ldreq	r1, [r3, #0]
 8000cae:	685b      	ldreq	r3, [r3, #4]
 8000cb0:	1949      	addeq	r1, r1, r5
 8000cb2:	6021      	streq	r1, [r4, #0]
 8000cb4:	e7ed      	b.n	8000c92 <_free_r+0x22>
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	b10b      	cbz	r3, 8000cc0 <_free_r+0x50>
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d9fa      	bls.n	8000cb6 <_free_r+0x46>
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	1855      	adds	r5, r2, r1
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	d10b      	bne.n	8000ce0 <_free_r+0x70>
 8000cc8:	6824      	ldr	r4, [r4, #0]
 8000cca:	4421      	add	r1, r4
 8000ccc:	1854      	adds	r4, r2, r1
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	6011      	str	r1, [r2, #0]
 8000cd2:	d1e0      	bne.n	8000c96 <_free_r+0x26>
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	6053      	str	r3, [r2, #4]
 8000cda:	440c      	add	r4, r1
 8000cdc:	6014      	str	r4, [r2, #0]
 8000cde:	e7da      	b.n	8000c96 <_free_r+0x26>
 8000ce0:	d902      	bls.n	8000ce8 <_free_r+0x78>
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	6003      	str	r3, [r0, #0]
 8000ce6:	e7d6      	b.n	8000c96 <_free_r+0x26>
 8000ce8:	6825      	ldr	r5, [r4, #0]
 8000cea:	1961      	adds	r1, r4, r5
 8000cec:	428b      	cmp	r3, r1
 8000cee:	bf04      	itt	eq
 8000cf0:	6819      	ldreq	r1, [r3, #0]
 8000cf2:	685b      	ldreq	r3, [r3, #4]
 8000cf4:	6063      	str	r3, [r4, #4]
 8000cf6:	bf04      	itt	eq
 8000cf8:	1949      	addeq	r1, r1, r5
 8000cfa:	6021      	streq	r1, [r4, #0]
 8000cfc:	6054      	str	r4, [r2, #4]
 8000cfe:	e7ca      	b.n	8000c96 <_free_r+0x26>
 8000d00:	b003      	add	sp, #12
 8000d02:	bd30      	pop	{r4, r5, pc}
 8000d04:	200001c4 	.word	0x200001c4

08000d08 <malloc>:
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <malloc+0xc>)
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	f000 b823 	b.w	8000d58 <_malloc_r>
 8000d12:	bf00      	nop
 8000d14:	2000005c 	.word	0x2000005c

08000d18 <sbrk_aligned>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	4e0e      	ldr	r6, [pc, #56]	; (8000d54 <sbrk_aligned+0x3c>)
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	6831      	ldr	r1, [r6, #0]
 8000d20:	4605      	mov	r5, r0
 8000d22:	b911      	cbnz	r1, 8000d2a <sbrk_aligned+0x12>
 8000d24:	f000 f9d6 	bl	80010d4 <_sbrk_r>
 8000d28:	6030      	str	r0, [r6, #0]
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f000 f9d1 	bl	80010d4 <_sbrk_r>
 8000d32:	1c43      	adds	r3, r0, #1
 8000d34:	d00a      	beq.n	8000d4c <sbrk_aligned+0x34>
 8000d36:	1cc4      	adds	r4, r0, #3
 8000d38:	f024 0403 	bic.w	r4, r4, #3
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	d007      	beq.n	8000d50 <sbrk_aligned+0x38>
 8000d40:	1a21      	subs	r1, r4, r0
 8000d42:	4628      	mov	r0, r5
 8000d44:	f000 f9c6 	bl	80010d4 <_sbrk_r>
 8000d48:	3001      	adds	r0, #1
 8000d4a:	d101      	bne.n	8000d50 <sbrk_aligned+0x38>
 8000d4c:	f04f 34ff 	mov.w	r4, #4294967295
 8000d50:	4620      	mov	r0, r4
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	200001c8 	.word	0x200001c8

08000d58 <_malloc_r>:
 8000d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d5c:	1ccd      	adds	r5, r1, #3
 8000d5e:	f025 0503 	bic.w	r5, r5, #3
 8000d62:	3508      	adds	r5, #8
 8000d64:	2d0c      	cmp	r5, #12
 8000d66:	bf38      	it	cc
 8000d68:	250c      	movcc	r5, #12
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	db01      	blt.n	8000d74 <_malloc_r+0x1c>
 8000d70:	42a9      	cmp	r1, r5
 8000d72:	d905      	bls.n	8000d80 <_malloc_r+0x28>
 8000d74:	230c      	movs	r3, #12
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	2600      	movs	r6, #0
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000e54 <_malloc_r+0xfc>
 8000d84:	f000 f868 	bl	8000e58 <__malloc_lock>
 8000d88:	f8d8 3000 	ldr.w	r3, [r8]
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	bb5c      	cbnz	r4, 8000de8 <_malloc_r+0x90>
 8000d90:	4629      	mov	r1, r5
 8000d92:	4638      	mov	r0, r7
 8000d94:	f7ff ffc0 	bl	8000d18 <sbrk_aligned>
 8000d98:	1c43      	adds	r3, r0, #1
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	d155      	bne.n	8000e4a <_malloc_r+0xf2>
 8000d9e:	f8d8 4000 	ldr.w	r4, [r8]
 8000da2:	4626      	mov	r6, r4
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d145      	bne.n	8000e34 <_malloc_r+0xdc>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d048      	beq.n	8000e3e <_malloc_r+0xe6>
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	4631      	mov	r1, r6
 8000db0:	4638      	mov	r0, r7
 8000db2:	eb04 0903 	add.w	r9, r4, r3
 8000db6:	f000 f98d 	bl	80010d4 <_sbrk_r>
 8000dba:	4581      	cmp	r9, r0
 8000dbc:	d13f      	bne.n	8000e3e <_malloc_r+0xe6>
 8000dbe:	6821      	ldr	r1, [r4, #0]
 8000dc0:	1a6d      	subs	r5, r5, r1
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	4638      	mov	r0, r7
 8000dc6:	f7ff ffa7 	bl	8000d18 <sbrk_aligned>
 8000dca:	3001      	adds	r0, #1
 8000dcc:	d037      	beq.n	8000e3e <_malloc_r+0xe6>
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	442b      	add	r3, r5
 8000dd2:	6023      	str	r3, [r4, #0]
 8000dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d038      	beq.n	8000e4e <_malloc_r+0xf6>
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	42a2      	cmp	r2, r4
 8000de0:	d12b      	bne.n	8000e3a <_malloc_r+0xe2>
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	e00f      	b.n	8000e08 <_malloc_r+0xb0>
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	1b52      	subs	r2, r2, r5
 8000dec:	d41f      	bmi.n	8000e2e <_malloc_r+0xd6>
 8000dee:	2a0b      	cmp	r2, #11
 8000df0:	d917      	bls.n	8000e22 <_malloc_r+0xca>
 8000df2:	1961      	adds	r1, r4, r5
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	6025      	str	r5, [r4, #0]
 8000df8:	bf18      	it	ne
 8000dfa:	6059      	strne	r1, [r3, #4]
 8000dfc:	6863      	ldr	r3, [r4, #4]
 8000dfe:	bf08      	it	eq
 8000e00:	f8c8 1000 	streq.w	r1, [r8]
 8000e04:	5162      	str	r2, [r4, r5]
 8000e06:	604b      	str	r3, [r1, #4]
 8000e08:	4638      	mov	r0, r7
 8000e0a:	f104 060b 	add.w	r6, r4, #11
 8000e0e:	f000 f829 	bl	8000e64 <__malloc_unlock>
 8000e12:	f026 0607 	bic.w	r6, r6, #7
 8000e16:	1d23      	adds	r3, r4, #4
 8000e18:	1af2      	subs	r2, r6, r3
 8000e1a:	d0ae      	beq.n	8000d7a <_malloc_r+0x22>
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	50a3      	str	r3, [r4, r2]
 8000e20:	e7ab      	b.n	8000d7a <_malloc_r+0x22>
 8000e22:	42a3      	cmp	r3, r4
 8000e24:	6862      	ldr	r2, [r4, #4]
 8000e26:	d1dd      	bne.n	8000de4 <_malloc_r+0x8c>
 8000e28:	f8c8 2000 	str.w	r2, [r8]
 8000e2c:	e7ec      	b.n	8000e08 <_malloc_r+0xb0>
 8000e2e:	4623      	mov	r3, r4
 8000e30:	6864      	ldr	r4, [r4, #4]
 8000e32:	e7ac      	b.n	8000d8e <_malloc_r+0x36>
 8000e34:	4634      	mov	r4, r6
 8000e36:	6876      	ldr	r6, [r6, #4]
 8000e38:	e7b4      	b.n	8000da4 <_malloc_r+0x4c>
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	e7cc      	b.n	8000dd8 <_malloc_r+0x80>
 8000e3e:	230c      	movs	r3, #12
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4638      	mov	r0, r7
 8000e44:	f000 f80e 	bl	8000e64 <__malloc_unlock>
 8000e48:	e797      	b.n	8000d7a <_malloc_r+0x22>
 8000e4a:	6025      	str	r5, [r4, #0]
 8000e4c:	e7dc      	b.n	8000e08 <_malloc_r+0xb0>
 8000e4e:	605b      	str	r3, [r3, #4]
 8000e50:	deff      	udf	#255	; 0xff
 8000e52:	bf00      	nop
 8000e54:	200001c4 	.word	0x200001c4

08000e58 <__malloc_lock>:
 8000e58:	4801      	ldr	r0, [pc, #4]	; (8000e60 <__malloc_lock+0x8>)
 8000e5a:	f7ff bf06 	b.w	8000c6a <__retarget_lock_acquire_recursive>
 8000e5e:	bf00      	nop
 8000e60:	200001c0 	.word	0x200001c0

08000e64 <__malloc_unlock>:
 8000e64:	4801      	ldr	r0, [pc, #4]	; (8000e6c <__malloc_unlock+0x8>)
 8000e66:	f7ff bf01 	b.w	8000c6c <__retarget_lock_release_recursive>
 8000e6a:	bf00      	nop
 8000e6c:	200001c0 	.word	0x200001c0

08000e70 <__sflush_r>:
 8000e70:	898a      	ldrh	r2, [r1, #12]
 8000e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e76:	4605      	mov	r5, r0
 8000e78:	0710      	lsls	r0, r2, #28
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	d458      	bmi.n	8000f30 <__sflush_r+0xc0>
 8000e7e:	684b      	ldr	r3, [r1, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dc05      	bgt.n	8000e90 <__sflush_r+0x20>
 8000e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dc02      	bgt.n	8000e90 <__sflush_r+0x20>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d0f9      	beq.n	8000e8a <__sflush_r+0x1a>
 8000e96:	2300      	movs	r3, #0
 8000e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000e9c:	682f      	ldr	r7, [r5, #0]
 8000e9e:	6a21      	ldr	r1, [r4, #32]
 8000ea0:	602b      	str	r3, [r5, #0]
 8000ea2:	d032      	beq.n	8000f0a <__sflush_r+0x9a>
 8000ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	075a      	lsls	r2, r3, #29
 8000eaa:	d505      	bpl.n	8000eb8 <__sflush_r+0x48>
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	1ac0      	subs	r0, r0, r3
 8000eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000eb2:	b10b      	cbz	r3, 8000eb8 <__sflush_r+0x48>
 8000eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eb6:	1ac0      	subs	r0, r0, r3
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ebe:	6a21      	ldr	r1, [r4, #32]
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	47b0      	blx	r6
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	89a3      	ldrh	r3, [r4, #12]
 8000ec8:	d106      	bne.n	8000ed8 <__sflush_r+0x68>
 8000eca:	6829      	ldr	r1, [r5, #0]
 8000ecc:	291d      	cmp	r1, #29
 8000ece:	d82b      	bhi.n	8000f28 <__sflush_r+0xb8>
 8000ed0:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <__sflush_r+0x108>)
 8000ed2:	410a      	asrs	r2, r1
 8000ed4:	07d6      	lsls	r6, r2, #31
 8000ed6:	d427      	bmi.n	8000f28 <__sflush_r+0xb8>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6062      	str	r2, [r4, #4]
 8000edc:	04d9      	lsls	r1, r3, #19
 8000ede:	6922      	ldr	r2, [r4, #16]
 8000ee0:	6022      	str	r2, [r4, #0]
 8000ee2:	d504      	bpl.n	8000eee <__sflush_r+0x7e>
 8000ee4:	1c42      	adds	r2, r0, #1
 8000ee6:	d101      	bne.n	8000eec <__sflush_r+0x7c>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	b903      	cbnz	r3, 8000eee <__sflush_r+0x7e>
 8000eec:	6560      	str	r0, [r4, #84]	; 0x54
 8000eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ef0:	602f      	str	r7, [r5, #0]
 8000ef2:	2900      	cmp	r1, #0
 8000ef4:	d0c9      	beq.n	8000e8a <__sflush_r+0x1a>
 8000ef6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d002      	beq.n	8000f04 <__sflush_r+0x94>
 8000efe:	4628      	mov	r0, r5
 8000f00:	f7ff feb6 	bl	8000c70 <_free_r>
 8000f04:	2000      	movs	r0, #0
 8000f06:	6360      	str	r0, [r4, #52]	; 0x34
 8000f08:	e7c0      	b.n	8000e8c <__sflush_r+0x1c>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	47b0      	blx	r6
 8000f10:	1c41      	adds	r1, r0, #1
 8000f12:	d1c8      	bne.n	8000ea6 <__sflush_r+0x36>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0c5      	beq.n	8000ea6 <__sflush_r+0x36>
 8000f1a:	2b1d      	cmp	r3, #29
 8000f1c:	d001      	beq.n	8000f22 <__sflush_r+0xb2>
 8000f1e:	2b16      	cmp	r3, #22
 8000f20:	d101      	bne.n	8000f26 <__sflush_r+0xb6>
 8000f22:	602f      	str	r7, [r5, #0]
 8000f24:	e7b1      	b.n	8000e8a <__sflush_r+0x1a>
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2c:	81a3      	strh	r3, [r4, #12]
 8000f2e:	e7ad      	b.n	8000e8c <__sflush_r+0x1c>
 8000f30:	690f      	ldr	r7, [r1, #16]
 8000f32:	2f00      	cmp	r7, #0
 8000f34:	d0a9      	beq.n	8000e8a <__sflush_r+0x1a>
 8000f36:	0793      	lsls	r3, r2, #30
 8000f38:	680e      	ldr	r6, [r1, #0]
 8000f3a:	bf08      	it	eq
 8000f3c:	694b      	ldreq	r3, [r1, #20]
 8000f3e:	600f      	str	r7, [r1, #0]
 8000f40:	bf18      	it	ne
 8000f42:	2300      	movne	r3, #0
 8000f44:	eba6 0807 	sub.w	r8, r6, r7
 8000f48:	608b      	str	r3, [r1, #8]
 8000f4a:	f1b8 0f00 	cmp.w	r8, #0
 8000f4e:	dd9c      	ble.n	8000e8a <__sflush_r+0x1a>
 8000f50:	6a21      	ldr	r1, [r4, #32]
 8000f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f54:	4643      	mov	r3, r8
 8000f56:	463a      	mov	r2, r7
 8000f58:	4628      	mov	r0, r5
 8000f5a:	47b0      	blx	r6
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	dc06      	bgt.n	8000f6e <__sflush_r+0xfe>
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	81a3      	strh	r3, [r4, #12]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	e78e      	b.n	8000e8c <__sflush_r+0x1c>
 8000f6e:	4407      	add	r7, r0
 8000f70:	eba8 0800 	sub.w	r8, r8, r0
 8000f74:	e7e9      	b.n	8000f4a <__sflush_r+0xda>
 8000f76:	bf00      	nop
 8000f78:	dfbffffe 	.word	0xdfbffffe

08000f7c <_fflush_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	690b      	ldr	r3, [r1, #16]
 8000f80:	4605      	mov	r5, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	b913      	cbnz	r3, 8000f8c <_fflush_r+0x10>
 8000f86:	2500      	movs	r5, #0
 8000f88:	4628      	mov	r0, r5
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	b118      	cbz	r0, 8000f96 <_fflush_r+0x1a>
 8000f8e:	6a03      	ldr	r3, [r0, #32]
 8000f90:	b90b      	cbnz	r3, 8000f96 <_fflush_r+0x1a>
 8000f92:	f7ff fbd9 	bl	8000748 <__sinit>
 8000f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f3      	beq.n	8000f86 <_fflush_r+0xa>
 8000f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000fa0:	07d0      	lsls	r0, r2, #31
 8000fa2:	d404      	bmi.n	8000fae <_fflush_r+0x32>
 8000fa4:	0599      	lsls	r1, r3, #22
 8000fa6:	d402      	bmi.n	8000fae <_fflush_r+0x32>
 8000fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000faa:	f7ff fe5e 	bl	8000c6a <__retarget_lock_acquire_recursive>
 8000fae:	4628      	mov	r0, r5
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	f7ff ff5d 	bl	8000e70 <__sflush_r>
 8000fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000fb8:	07da      	lsls	r2, r3, #31
 8000fba:	4605      	mov	r5, r0
 8000fbc:	d4e4      	bmi.n	8000f88 <_fflush_r+0xc>
 8000fbe:	89a3      	ldrh	r3, [r4, #12]
 8000fc0:	059b      	lsls	r3, r3, #22
 8000fc2:	d4e1      	bmi.n	8000f88 <_fflush_r+0xc>
 8000fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fc6:	f7ff fe51 	bl	8000c6c <__retarget_lock_release_recursive>
 8000fca:	e7dd      	b.n	8000f88 <_fflush_r+0xc>

08000fcc <__swhatbuf_r>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	460c      	mov	r4, r1
 8000fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	b096      	sub	sp, #88	; 0x58
 8000fd8:	4615      	mov	r5, r2
 8000fda:	461e      	mov	r6, r3
 8000fdc:	da0d      	bge.n	8000ffa <__swhatbuf_r+0x2e>
 8000fde:	89a3      	ldrh	r3, [r4, #12]
 8000fe0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000fe4:	f04f 0100 	mov.w	r1, #0
 8000fe8:	bf0c      	ite	eq
 8000fea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000fee:	2340      	movne	r3, #64	; 0x40
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	6031      	str	r1, [r6, #0]
 8000ff4:	602b      	str	r3, [r5, #0]
 8000ff6:	b016      	add	sp, #88	; 0x58
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	466a      	mov	r2, sp
 8000ffc:	f000 f848 	bl	8001090 <_fstat_r>
 8001000:	2800      	cmp	r0, #0
 8001002:	dbec      	blt.n	8000fde <__swhatbuf_r+0x12>
 8001004:	9901      	ldr	r1, [sp, #4]
 8001006:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800100a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800100e:	4259      	negs	r1, r3
 8001010:	4159      	adcs	r1, r3
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	e7eb      	b.n	8000ff0 <__swhatbuf_r+0x24>

08001018 <__smakebuf_r>:
 8001018:	898b      	ldrh	r3, [r1, #12]
 800101a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800101c:	079d      	lsls	r5, r3, #30
 800101e:	4606      	mov	r6, r0
 8001020:	460c      	mov	r4, r1
 8001022:	d507      	bpl.n	8001034 <__smakebuf_r+0x1c>
 8001024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	6123      	str	r3, [r4, #16]
 800102c:	2301      	movs	r3, #1
 800102e:	6163      	str	r3, [r4, #20]
 8001030:	b002      	add	sp, #8
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	ab01      	add	r3, sp, #4
 8001036:	466a      	mov	r2, sp
 8001038:	f7ff ffc8 	bl	8000fcc <__swhatbuf_r>
 800103c:	9900      	ldr	r1, [sp, #0]
 800103e:	4605      	mov	r5, r0
 8001040:	4630      	mov	r0, r6
 8001042:	f7ff fe89 	bl	8000d58 <_malloc_r>
 8001046:	b948      	cbnz	r0, 800105c <__smakebuf_r+0x44>
 8001048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800104c:	059a      	lsls	r2, r3, #22
 800104e:	d4ef      	bmi.n	8001030 <__smakebuf_r+0x18>
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	81a3      	strh	r3, [r4, #12]
 800105a:	e7e3      	b.n	8001024 <__smakebuf_r+0xc>
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	6020      	str	r0, [r4, #0]
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	81a3      	strh	r3, [r4, #12]
 8001066:	9b00      	ldr	r3, [sp, #0]
 8001068:	6163      	str	r3, [r4, #20]
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	6120      	str	r0, [r4, #16]
 800106e:	b15b      	cbz	r3, 8001088 <__smakebuf_r+0x70>
 8001070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001074:	4630      	mov	r0, r6
 8001076:	f000 f81d 	bl	80010b4 <_isatty_r>
 800107a:	b128      	cbz	r0, 8001088 <__smakebuf_r+0x70>
 800107c:	89a3      	ldrh	r3, [r4, #12]
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	81a3      	strh	r3, [r4, #12]
 8001088:	89a3      	ldrh	r3, [r4, #12]
 800108a:	431d      	orrs	r5, r3
 800108c:	81a5      	strh	r5, [r4, #12]
 800108e:	e7cf      	b.n	8001030 <__smakebuf_r+0x18>

08001090 <_fstat_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4d07      	ldr	r5, [pc, #28]	; (80010b0 <_fstat_r+0x20>)
 8001094:	2300      	movs	r3, #0
 8001096:	4604      	mov	r4, r0
 8001098:	4608      	mov	r0, r1
 800109a:	4611      	mov	r1, r2
 800109c:	602b      	str	r3, [r5, #0]
 800109e:	f7ff f965 	bl	800036c <_fstat>
 80010a2:	1c43      	adds	r3, r0, #1
 80010a4:	d102      	bne.n	80010ac <_fstat_r+0x1c>
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	b103      	cbz	r3, 80010ac <_fstat_r+0x1c>
 80010aa:	6023      	str	r3, [r4, #0]
 80010ac:	bd38      	pop	{r3, r4, r5, pc}
 80010ae:	bf00      	nop
 80010b0:	200001bc 	.word	0x200001bc

080010b4 <_isatty_r>:
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	4d06      	ldr	r5, [pc, #24]	; (80010d0 <_isatty_r+0x1c>)
 80010b8:	2300      	movs	r3, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	602b      	str	r3, [r5, #0]
 80010c0:	f7ff f964 	bl	800038c <_isatty>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	d102      	bne.n	80010ce <_isatty_r+0x1a>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	b103      	cbz	r3, 80010ce <_isatty_r+0x1a>
 80010cc:	6023      	str	r3, [r4, #0]
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	200001bc 	.word	0x200001bc

080010d4 <_sbrk_r>:
 80010d4:	b538      	push	{r3, r4, r5, lr}
 80010d6:	4d06      	ldr	r5, [pc, #24]	; (80010f0 <_sbrk_r+0x1c>)
 80010d8:	2300      	movs	r3, #0
 80010da:	4604      	mov	r4, r0
 80010dc:	4608      	mov	r0, r1
 80010de:	602b      	str	r3, [r5, #0]
 80010e0:	f7ff f96c 	bl	80003bc <_sbrk>
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	d102      	bne.n	80010ee <_sbrk_r+0x1a>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	b103      	cbz	r3, 80010ee <_sbrk_r+0x1a>
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	200001bc 	.word	0x200001bc

080010f4 <_init>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	bf00      	nop
 80010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fa:	bc08      	pop	{r3}
 80010fc:	469e      	mov	lr, r3
 80010fe:	4770      	bx	lr

08001100 <_fini>:
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	bf00      	nop
 8001104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001106:	bc08      	pop	{r3}
 8001108:	469e      	mov	lr, r3
 800110a:	4770      	bx	lr
