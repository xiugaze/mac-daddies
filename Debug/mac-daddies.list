
mac-daddies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000158c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001758  08001758  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001758  08001758  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001758  08001758  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001758  08001758  00011758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800175c  0800175c  0001175c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d8  20000068  080017c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080017c8  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023a4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000094c  00000000  00000000  0002247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013f  00000000  00000000  00022fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fb5  00000000  00000000  000230df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002909  00000000  00000000  00027094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c123  00000000  00000000  0002999d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ce0  00000000  00000000  00035ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000367a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001714 	.word	0x08001714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001714 	.word	0x08001714

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <channel_monitor_get_state>:
void monitor_led_init();
void monitor_led_set(channel_state);

static channel_state state = IDLE;

channel_state channel_monitor_get_state(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	return state;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <channel_monitor_get_state+0x14>)
 8000296:	781b      	ldrb	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004

080002a8 <channel_monitor_init>:
/*
 * TODO:
 * - Implement fudge factor (error%) for 1.1ms
 * - Implement channel monitor leds
 */
void channel_monitor_init(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	monitor_led_init();
 80002ac:	f000 f8d6 	bl	800045c <monitor_led_init>
	tim4_init();
 80002b0:	f000 f802 	bl	80002b8 <tim4_init>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <tim4_init>:

// channel 1: tic
// channel 2: toc
void tim4_init(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

	/* PB6 is the input pin for TIC on TIM4_CH1 */
	rcc->AHB1ENR |= GPIOB_EN;			// enable GPIOB in RCC
 80002bc:	4b33      	ldr	r3, [pc, #204]	; (800038c <tim4_init+0xd4>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	4a32      	ldr	r2, [pc, #200]	; (800038c <tim4_init+0xd4>)
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6313      	str	r3, [r2, #48]	; 0x30
	gpiob->AFRL  |= (0b0010 << 6 * 4); 	// PB6 is AF02 (TIM4_CH1)
 80002c8:	4b31      	ldr	r3, [pc, #196]	; (8000390 <tim4_init+0xd8>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a30      	ldr	r2, [pc, #192]	; (8000390 <tim4_init+0xd8>)
 80002ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002d2:	6213      	str	r3, [r2, #32]
	gpiob->MODER |= (0b10 << 6*2);
 80002d4:	4b2e      	ldr	r3, [pc, #184]	; (8000390 <tim4_init+0xd8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <tim4_init+0xd8>)
 80002da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002de:	6013      	str	r3, [r2, #0]

	/* TIM4 setup */
	rcc->APB1ENR |= TIM4_EN;			// enable TIM4 in RCC
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <tim4_init+0xd4>)
 80002e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e4:	4a29      	ldr	r2, [pc, #164]	; (800038c <tim4_init+0xd4>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6413      	str	r3, [r2, #64]	; 0x40

	/* configure TIM4_CH1 as TIC */
	tim4->CCMR1  &= ~(0b11 << 0);		// clear CC1S bits
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <tim4_init+0xdc>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	699a      	ldr	r2, [r3, #24]
 80002f2:	4b28      	ldr	r3, [pc, #160]	; (8000394 <tim4_init+0xdc>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f022 0203 	bic.w	r2, r2, #3
 80002fa:	619a      	str	r2, [r3, #24]
	tim4->CCMR1  |=  (0b01 << 0);		// tim4_ch1 is in input capture mode
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <tim4_init+0xdc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	699a      	ldr	r2, [r3, #24]
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <tim4_init+0xdc>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f042 0201 	orr.w	r2, r2, #1
 800030a:	619a      	str	r2, [r3, #24]

	tim4->CCER &=  ~(1 << 3 | 1 << 1);	// clear edge config, set to rising
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <tim4_init+0xdc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6a1a      	ldr	r2, [r3, #32]
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <tim4_init+0xdc>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f022 020a 	bic.w	r2, r2, #10
 800031a:	621a      	str	r2, [r3, #32]
	tim4->CCER |=   (1 << 3 | 1 << 1); 	// trigger TIC on either edge
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <tim4_init+0xdc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	6a1a      	ldr	r2, [r3, #32]
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <tim4_init+0xdc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f042 020a 	orr.w	r2, r2, #10
 800032a:	621a      	str	r2, [r3, #32]

	/* configure TIM4_CH2 as TOC (just free running with an interrupt */
	tim4->CCMR1 &= ~(0b11 << 8);		// clear CC2S bits, tim4_ch2 is in output mode
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <tim4_init+0xdc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <tim4_init+0xdc>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800033a:	619a      	str	r2, [r3, #24]


	tim4->CCR2 = CYCLES_1_1_MS;			// Timeout interrupt fires
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <tim4_init+0xdc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f244 42c0 	movw	r2, #17600	; 0x44c0
 8000344:	639a      	str	r2, [r3, #56]	; 0x38
//	CC1 channel configured as input:
//	This bit determines if a capture of the counter value can actually be done into the input
//	capture/compare register 1 (TIMx_CCR1) or not.
//	0: Capture disabled
//	1: Capture enabled
	tim4->CCER |= (0b01 << 0); // enable input capture
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <tim4_init+0xdc>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6a1a      	ldr	r2, [r3, #32]
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <tim4_init+0xdc>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f042 0201 	orr.w	r2, r2, #1
 8000354:	621a      	str	r2, [r3, #32]
	tim4->DIER |= 0b11 << 1;   // enable TIC interrupts
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <tim4_init+0xdc>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <tim4_init+0xdc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f042 0206 	orr.w	r2, r2, #6
 8000364:	60da      	str	r2, [r3, #12]

	nvic_iser[0] |= (1 << 30); // TIM4 global interrupt is in NVIC_ISER0[30]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <tim4_init+0xe0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <tim4_init+0xe0>)
 800036c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000370:	6013      	str	r3, [r2, #0]
	tim4->CR1 |= 1; 		   // start the timer
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <tim4_init+0xdc>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <tim4_init+0xdc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f042 0201 	orr.w	r2, r2, #1
 8000380:	601a      	str	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800
 8000390:	40020400 	.word	0x40020400
 8000394:	20000000 	.word	0x20000000
 8000398:	e000e100 	.word	0xe000e100

0800039c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	state = IDLE;
 80003a0:	4b2a      	ldr	r3, [pc, #168]	; (800044c <TIM4_IRQHandler+0xb0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
	static int line_state;

	if(((tim4->SR >> 2) & 0b01) & (tim4->DIER >> 2) & 1) {
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <TIM4_IRQHandler+0xb4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	691b      	ldr	r3, [r3, #16]
 80003ac:	089a      	lsrs	r2, r3, #2
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <TIM4_IRQHandler+0xb4>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	4013      	ands	r3, r2
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d012      	beq.n	80003e6 <TIM4_IRQHandler+0x4a>
		tim4->DIER &= ~(1 << 2);
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <TIM4_IRQHandler+0xb4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <TIM4_IRQHandler+0xb4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f022 0204 	bic.w	r2, r2, #4
 80003ce:	60da      	str	r2, [r3, #12]

		if(line_state) {
 80003d0:	4b20      	ldr	r3, [pc, #128]	; (8000454 <TIM4_IRQHandler+0xb8>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <TIM4_IRQHandler+0x44>
			state = IDLE;
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <TIM4_IRQHandler+0xb0>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	e002      	b.n	80003e6 <TIM4_IRQHandler+0x4a>
		} else {
			state = COLLISION;
 80003e0:	4b1a      	ldr	r3, [pc, #104]	; (800044c <TIM4_IRQHandler+0xb0>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	701a      	strb	r2, [r3, #0]
	/*
	 * You were right the first time: the first read upstairs will clear
	 * the status register. If there's a pending TIC and a pending TOC, we read
	 * it up there clearing the interrupt
	 */
	if(((tim4->SR >> 1) &  0b01) & (tim4->DIER >> 1) & 1) {
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <TIM4_IRQHandler+0xb4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	085a      	lsrs	r2, r3, #1
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <TIM4_IRQHandler+0xb4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	085b      	lsrs	r3, r3, #1
 80003f6:	4013      	ands	r3, r2
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d01a      	beq.n	8000436 <TIM4_IRQHandler+0x9a>
			// edge
		line_state = (gpiob->IDR >> 6) & 0b01;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <TIM4_IRQHandler+0xbc>)
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	099b      	lsrs	r3, r3, #6
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <TIM4_IRQHandler+0xb8>)
 800040c:	6013      	str	r3, [r2, #0]
		//tim4->CNT = 0
		tim4->CCR2 = tim4->CCR1 + CYCLES_1_1_MS;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <TIM4_IRQHandler+0xb4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <TIM4_IRQHandler+0xb4>)
 8000416:	6812      	ldr	r2, [r2, #0]
 8000418:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 800041c:	3340      	adds	r3, #64	; 0x40
 800041e:	6393      	str	r3, [r2, #56]	; 0x38
		tim4->DIER |= (1 << 2);
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <TIM4_IRQHandler+0xb4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	68da      	ldr	r2, [r3, #12]
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <TIM4_IRQHandler+0xb4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f042 0204 	orr.w	r2, r2, #4
 800042e:	60da      	str	r2, [r3, #12]
		state = BUSY;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <TIM4_IRQHandler+0xb0>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}


	monitor_led_set(state);
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <TIM4_IRQHandler+0xb0>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f83a 	bl	80004b4 <monitor_led_set>
	tim4->SR = 0;
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <TIM4_IRQHandler+0xb4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
	//tim4->DIER |= 0b11 << 1;  // enable interrupts
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000004 	.word	0x20000004
 8000450:	20000000 	.word	0x20000000
 8000454:	20000084 	.word	0x20000084
 8000458:	40020400 	.word	0x40020400

0800045c <monitor_led_init>:
void ld2_toggle(void) {
	gpioa->ODR ^= (1<<5);	// toggle pin 5
}
*/

void monitor_led_init() {
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	rcc->AHB1ENR |= GPIOA_EN;
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <monitor_led_init+0x50>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <monitor_led_init+0x50>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
	gpioa->MODER &= ~(0b1100001111);
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <monitor_led_init+0x54>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a0f      	ldr	r2, [pc, #60]	; (80004b0 <monitor_led_init+0x54>)
 8000472:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
 8000476:	f023 0303 	bic.w	r3, r3, #3
 800047a:	6013      	str	r3, [r2, #0]
    gpioa->MODER |= (0b01 << 0); // setting GPIOA_PIN_0 as output (Green LED)
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <monitor_led_init+0x54>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <monitor_led_init+0x54>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]
    gpioa->MODER |= (0b01 << 2); // setting GPIOA_PIN_1 as output (Red LED)
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <monitor_led_init+0x54>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <monitor_led_init+0x54>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6013      	str	r3, [r2, #0]
    gpioa->MODER |= (0b01 << 8); // setting GPIOA_PIN_4 as output (Yellow LED)
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <monitor_led_init+0x54>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <monitor_led_init+0x54>)
 800049a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40020000 	.word	0x40020000

080004b4 <monitor_led_set>:

void monitor_led_set(channel_state state) {
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]

    // GPIOA_PIN_0 is connected to the green LED,
    // GPIOA_PIN_1 is connected to the red LED,
    // GPIOA_PIN_2 is connected to the yellow LED
	gpioa->ODR &= ~(0b10011);
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <monitor_led_set+0x60>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <monitor_led_set+0x60>)
 80004c4:	f023 0313 	bic.w	r3, r3, #19
 80004c8:	6153      	str	r3, [r2, #20]
	switch(state){
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d013      	beq.n	80004f8 <monitor_led_set+0x44>
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	dc18      	bgt.n	8000506 <monitor_led_set+0x52>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d008      	beq.n	80004ea <monitor_led_set+0x36>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d114      	bne.n	8000506 <monitor_led_set+0x52>
	case IDLE:
		gpioa->ODR |= 1 << 0;  // turn on Green LED
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <monitor_led_set+0x60>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <monitor_led_set+0x60>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6153      	str	r3, [r2, #20]
		break;
 80004e8:	e00d      	b.n	8000506 <monitor_led_set+0x52>
	case BUSY:
	    gpioa->ODR |= 1 << 1;  // turn off Green/Red LED's
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <monitor_led_set+0x60>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a09      	ldr	r2, [pc, #36]	; (8000514 <monitor_led_set+0x60>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	6153      	str	r3, [r2, #20]
	    break;
 80004f6:	e006      	b.n	8000506 <monitor_led_set+0x52>
	case COLLISION:
		gpioa->ODR |= 1 << 4;  // turn off Green/Yellow LED's
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <monitor_led_set+0x60>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <monitor_led_set+0x60>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	6153      	str	r3, [r2, #20]
		break;
 8000504:	bf00      	nop

	}
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000

08000518 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	init_usart2(57600,F_CPU);
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <main+0x28>)
 800051e:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 8000522:	f000 fa13 	bl	800094c <init_usart2>

	printf("Test print\n");
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <main+0x2c>)
 8000528:	f000 fc14 	bl	8000d54 <puts>
	// NOTE: for some reason prints are not working, does
	// the UART get interrupted ?
	channel_monitor_init();
 800052c:	f7ff febc 	bl	80002a8 <channel_monitor_init>
	transmit_init();
 8000530:	f000 f8e4 	bl	80006fc <transmit_init>


    /* Loop forever */
	while(1) {
		printf("looping!\n");
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <main+0x30>)
 8000536:	f000 fc0d 	bl	8000d54 <puts>
		get_transmission();
 800053a:	f000 f871 	bl	8000620 <get_transmission>
		printf("looping!\n");
 800053e:	e7f9      	b.n	8000534 <main+0x1c>
 8000540:	00f42400 	.word	0x00f42400
 8000544:	0800172c 	.word	0x0800172c
 8000548:	08001738 	.word	0x08001738

0800054c <_close>:
  }
  return len;
}

int _close(int file)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000574:	605a      	str	r2, [r3, #4]
  return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_isatty>:

int _isatty(int file)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800058c:	2301      	movs	r3, #1
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f000 fe18 	bl	8001218 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20020000 	.word	0x20020000
 8000614:	00000400 	.word	0x00000400
 8000618:	20000088 	.word	0x20000088
 800061c:	20000a40 	.word	0x20000a40

08000620 <get_transmission>:
static volatile uint32_t* const nvic_iser = (uint32_t*)NVIC_ISER;


int transmit_halfbits(void);

int get_transmission(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

	//check if 0 if it is then write 101010101010 a bunch of time set length to whatever and then do an early return

	//Prompt user and grab input
	printf("\nEnter a message: \n");
 8000626:	4830      	ldr	r0, [pc, #192]	; (80006e8 <get_transmission+0xc8>)
 8000628:	f000 fb94 	bl	8000d54 <puts>
	fgets(userInput, sizeof(userInput), stdin);
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <get_transmission+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	461a      	mov	r2, r3
 8000634:	2164      	movs	r1, #100	; 0x64
 8000636:	482e      	ldr	r0, [pc, #184]	; (80006f0 <get_transmission+0xd0>)
 8000638:	f000 fa6c 	bl	8000b14 <fgets>

	//Getting rid of the newline char
	int len = strlen(userInput);
 800063c:	482c      	ldr	r0, [pc, #176]	; (80006f0 <get_transmission+0xd0>)
 800063e:	f7ff fe1f 	bl	8000280 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	60bb      	str	r3, [r7, #8]
	if (len > 0 && userInput[len - 1] == '\n') {
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	dd0a      	ble.n	8000662 <get_transmission+0x42>
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <get_transmission+0xd0>)
 8000652:	5cd3      	ldrb	r3, [r2, r3]
 8000654:	2b0a      	cmp	r3, #10
 8000656:	d104      	bne.n	8000662 <get_transmission+0x42>
	     userInput[len - 1] = '\0';
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3b01      	subs	r3, #1
 800065c:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <get_transmission+0xd0>)
 800065e:	2100      	movs	r1, #0
 8000660:	54d1      	strb	r1, [r2, r3]
	}
	//Encode the message and add it to the transmission buffer
	int bufferIndex = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
//
//		return transmit_halfbits();
//	}


	for (int i = 0; i < len; i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	e029      	b.n	80006c0 <get_transmission+0xa0>

		char currentChar = userInput[i];
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <get_transmission+0xd0>)
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	71fb      	strb	r3, [r7, #7]
		int j = (sizeof(char)*8) - 1;
 8000676:	2307      	movs	r3, #7
 8000678:	60fb      	str	r3, [r7, #12]
		while(j >= 0) {
 800067a:	e01b      	b.n	80006b4 <get_transmission+0x94>
			uint16_t to_write = (currentChar >> j) & 1;
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	80bb      	strh	r3, [r7, #4]
			transmissionBuffer[bufferIndex] = to_write ^ 1;		// first half of Manchester bit
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	f083 0301 	eor.w	r3, r3, #1
 8000692:	b299      	uxth	r1, r3
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <get_transmission+0xd4>)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			transmissionBuffer[bufferIndex+1] = to_write ^ 0;   // second half of Manchester bit
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3301      	adds	r3, #1
 80006a0:	4914      	ldr	r1, [pc, #80]	; (80006f4 <get_transmission+0xd4>)
 80006a2:	88ba      	ldrh	r2, [r7, #4]
 80006a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			bufferIndex += 2; // advance the pointer twice
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	3302      	adds	r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
			j--;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
		while(j >= 0) {
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dae0      	bge.n	800067c <get_transmission+0x5c>
	for (int i = 0; i < len; i++) {
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	3301      	adds	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	dbd1      	blt.n	800066c <get_transmission+0x4c>

	/*
	 * size of the transmission buffer is the length of the input times the
	 * number of bits in a byte times the number of bits in one baud (Manchester)
	 */
	transmission_length = strlen(userInput) * BITS_PER_CHAR * 2;
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <get_transmission+0xd0>)
 80006ca:	f7ff fdd9 	bl	8000280 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <get_transmission+0xd8>)
 80006d6:	601a      	str	r2, [r3, #0]
	return transmit_halfbits();
 80006d8:	f000 f896 	bl	8000808 <transmit_halfbits>
 80006dc:	4603      	mov	r3, r0

}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08001744 	.word	0x08001744
 80006ec:	20000064 	.word	0x20000064
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	200000f0 	.word	0x200000f0
 80006f8:	20000008 	.word	0x20000008

080006fc <transmit_init>:


void transmit_init() {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	rcc->AHB1ENR |= GPIOA_EN;			// enable GPIOA
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <transmit_init+0x70>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <transmit_init+0x70>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6313      	str	r3, [r2, #48]	; 0x30

	// NOTE: do not think this is necessary
//	gpioa->AFRL  |= (0b0010 << 6 * 4); 	// PA6 is AF02 (TIM3_CH1)
//	gpioa->MODER |= (0b10 << 6*2);		// PA6 is in AF mode
	gpioa->MODER  &= ~(0b11 << 6*2);
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <transmit_init+0x74>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <transmit_init+0x74>)
 8000712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000716:	6013      	str	r3, [r2, #0]
	gpioa->MODER  |=  (0b01 << 6*2);	// PA6 is in output mode
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <transmit_init+0x74>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <transmit_init+0x74>)
 800071e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000722:	6013      	str	r3, [r2, #0]
	gpioa->ODR    |=  (1 << 6);
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <transmit_init+0x74>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <transmit_init+0x74>)
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	6153      	str	r3, [r2, #20]

	// NOTE: not sure if this is necessary either?
	//gpioa->IDR 	  |=  (0b01 << 6); 		// line starts high?


	rcc->APB1ENR |= TIM3_EN;			// enable TIM3
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <transmit_init+0x70>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <transmit_init+0x70>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6413      	str	r3, [r2, #64]	; 0x40

	tim3->CCMR1 &= ~(0b11 << 0);		// clear CC1S bits, tim3_ch1 is in output mode
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <transmit_init+0x78>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <transmit_init+0x78>)
 8000742:	f023 0303 	bic.w	r3, r3, #3
 8000746:	6193      	str	r3, [r2, #24]
	//tim3->CCR1 = HALF_BIT_PERIOD;		// interrupt fires on HALF_BIT_PERIOD

	nvic_iser[0] |= (1 << 29);			// TIM3 global interrupt is vector 29
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <transmit_init+0x7c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <transmit_init+0x7c>)
 800074e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000752:	6013      	str	r3, [r2, #0]
	tim3->CR1 |= 0b01;					// Start the timer
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <transmit_init+0x78>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <transmit_init+0x78>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000
 8000774:	40000400 	.word	0x40000400
 8000778:	e000e100 	.word	0xe000e100

0800077c <TIM3_IRQHandler>:

/*
 * TIMER3 IRQ is supposed to iterate through the transmission buffer
 * and write the value to the IDR.
 */
void TIM3_IRQHandler(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

	tim3->SR=0;
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <TIM3_IRQHandler+0x78>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]

	static int buffer_position = 0;

	if(channel_monitor_get_state() == COLLISION || buffer_position == transmission_length) {
 8000786:	f7ff fd83 	bl	8000290 <channel_monitor_get_state>
 800078a:	4603      	mov	r3, r0
 800078c:	2b02      	cmp	r3, #2
 800078e:	d005      	beq.n	800079c <TIM3_IRQHandler+0x20>
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <TIM3_IRQHandler+0x7c>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <TIM3_IRQHandler+0x80>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d112      	bne.n	80007c2 <TIM3_IRQHandler+0x46>
	//if(channel_monitor_get_state() == BUSY || buffer_position == 8) {

		tim3->DIER &= ~(0b01 << 1); // disable interrupts
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <TIM3_IRQHandler+0x78>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <TIM3_IRQHandler+0x78>)
 80007a2:	f023 0302 	bic.w	r3, r3, #2
 80007a6:	60d3      	str	r3, [r2, #12]
		transmission_length = -1;  	// don't transmit
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <TIM3_IRQHandler+0x80>)
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295
 80007ae:	601a      	str	r2, [r3, #0]
		buffer_position = 0;	   	// reset the buffer position
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <TIM3_IRQHandler+0x7c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
		gpioa->ODR |= 1 << 6;		// let the line go high
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <TIM3_IRQHandler+0x84>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a11      	ldr	r2, [pc, #68]	; (8000800 <TIM3_IRQHandler+0x84>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6153      	str	r3, [r2, #20]
	}

	tim3->CCR1 += HALF_BIT_PERIOD;  // next interrupt fires last time + 500uS
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <TIM3_IRQHandler+0x78>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <TIM3_IRQHandler+0x78>)
 80007c8:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80007cc:	3310      	adds	r3, #16
 80007ce:	6353      	str	r3, [r2, #52]	; 0x34

	gpioa->BSRR = (1 << (6 + 16*(1 - transmissionBuffer[buffer_position++])));
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <TIM3_IRQHandler+0x7c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <TIM3_IRQHandler+0x7c>)
 80007d8:	600a      	str	r2, [r1, #0]
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <TIM3_IRQHandler+0x88>)
 80007dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e0:	f1c3 0301 	rsb	r3, r3, #1
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	3306      	adds	r3, #6
 80007e8:	2201      	movs	r2, #1
 80007ea:	409a      	lsls	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <TIM3_IRQHandler+0x84>)
 80007ee:	619a      	str	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40000400 	.word	0x40000400
 80007f8:	200008f0 	.word	0x200008f0
 80007fc:	20000008 	.word	0x20000008
 8000800:	40020000 	.word	0x40020000
 8000804:	200000f0 	.word	0x200000f0

08000808 <transmit_halfbits>:

int transmit_halfbits(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	if(transmission_length < 0) {
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <transmit_halfbits+0x38>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	da02      	bge.n	800081a <transmit_halfbits+0x12>
		return -1;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	e010      	b.n	800083c <transmit_halfbits+0x34>
	}

	while(channel_monitor_get_state() == BUSY) {};
 800081a:	bf00      	nop
 800081c:	f7ff fd38 	bl	8000290 <channel_monitor_get_state>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fa      	beq.n	800081c <transmit_halfbits+0x14>

	tim3->CCR1 = (tim3->CNT); // trigger on current time + 500uS
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <transmit_halfbits+0x3c>)
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <transmit_halfbits+0x3c>)
 800082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082c:	6353      	str	r3, [r2, #52]	; 0x34
	tim3->DIER |= 0b01 << 1;  // enable interrupts on channel 1
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <transmit_halfbits+0x3c>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <transmit_halfbits+0x3c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	60d3      	str	r3, [r2, #12]
	return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000008 	.word	0x20000008
 8000844:	40000400 	.word	0x40000400

08000848 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e012      	b.n	8000884 <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	3301      	adds	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 8000864:	f000 f836 	bl	80008d4 <usart2_getch>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b0a      	cmp	r3, #10
 8000876:	d00a      	beq.n	800088e <_read+0x46>
		ptr++;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	dbe8      	blt.n	800085e <_read+0x16>
 800088c:	e000      	b.n	8000890 <_read+0x48>
		if(*ptr == '\n') break;
 800088e:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 8000890:	693b      	ldr	r3, [r7, #16]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_write>:

int _write(int file, char *ptr, int len)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e009      	b.n	80008c0 <_write+0x26>
	{
		usart2_putch(*ptr++);
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f82f 	bl	8000918 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf1      	blt.n	80008ac <_write+0x12>
	}
	return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <usart2_getch>:



char usart2_getch(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 80008da:	bf00      	nop
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <usart2_getch+0x3c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d1f9      	bne.n	80008dc <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <usart2_getch+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f811 	bl	8000918 <usart2_putch>

	if (c == '\r'){  // If character is CR
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b0d      	cmp	r3, #13
 80008fa:	d104      	bne.n	8000906 <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 80008fc:	200a      	movs	r0, #10
 80008fe:	f000 f80b 	bl	8000918 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 8000902:	230a      	movs	r3, #10
 8000904:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 8000906:	79fb      	ldrb	r3, [r7, #7]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40004400 	.word	0x40004400
 8000914:	40004404 	.word	0x40004404

08000918 <usart2_putch>:

void usart2_putch(char c){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 8000922:	bf00      	nop
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <usart2_putch+0x2c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092c:	2b80      	cmp	r3, #128	; 0x80
 800092e:	d1f9      	bne.n	8000924 <usart2_putch+0xc>
	*(USART_DR) = c;
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <usart2_putch+0x30>)
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	6013      	str	r3, [r2, #0]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40004404 	.word	0x40004404

0800094c <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <init_usart2+0x8c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <init_usart2+0x8c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <init_usart2+0x90>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <init_usart2+0x90>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <init_usart2+0x94>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <init_usart2+0x94>)
 8000974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000978:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <init_usart2+0x94>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <init_usart2+0x94>)
 8000980:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000984:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <init_usart2+0x98>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <init_usart2+0x98>)
 800098c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000990:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <init_usart2+0x98>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <init_usart2+0x98>)
 8000998:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800099c:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <init_usart2+0x9c>)
 80009a0:	f242 020c 	movw	r2, #8204	; 0x200c
 80009a4:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <init_usart2+0xa0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <init_usart2+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 80009b2:	4910      	ldr	r1, [pc, #64]	; (80009f4 <init_usart2+0xa8>)
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009bc:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <init_usart2+0xac>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6898      	ldr	r0, [r3, #8]
 80009c4:	2300      	movs	r3, #0
 80009c6:	2202      	movs	r2, #2
 80009c8:	2100      	movs	r1, #0
 80009ca:	f000 fa51 	bl	8000e70 <setvbuf>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023830 	.word	0x40023830
 80009dc:	40023840 	.word	0x40023840
 80009e0:	40020020 	.word	0x40020020
 80009e4:	40020000 	.word	0x40020000
 80009e8:	4000440c 	.word	0x4000440c
 80009ec:	40004410 	.word	0x40004410
 80009f0:	40004414 	.word	0x40004414
 80009f4:	40004408 	.word	0x40004408
 80009f8:	20000064 	.word	0x20000064

080009fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2a:	f000 fbfb 	bl	8001224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fd73 	bl	8000518 <main>

08000a32 <LoopForever>:

LoopForever:
  b LoopForever
 8000a32:	e7fe      	b.n	8000a32 <LoopForever>
  ldr   r0, =_estack
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a40:	08001760 	.word	0x08001760
  ldr r2, =_sbss
 8000a44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a48:	20000a40 	.word	0x20000a40

08000a4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>

08000a4e <_fgets_r>:
 8000a4e:	2a01      	cmp	r2, #1
 8000a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a54:	4681      	mov	r9, r0
 8000a56:	460d      	mov	r5, r1
 8000a58:	4617      	mov	r7, r2
 8000a5a:	461c      	mov	r4, r3
 8000a5c:	dc03      	bgt.n	8000a66 <_fgets_r+0x18>
 8000a5e:	2500      	movs	r5, #0
 8000a60:	4628      	mov	r0, r5
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	b118      	cbz	r0, 8000a70 <_fgets_r+0x22>
 8000a68:	6a03      	ldr	r3, [r0, #32]
 8000a6a:	b90b      	cbnz	r3, 8000a70 <_fgets_r+0x22>
 8000a6c:	f000 f8e8 	bl	8000c40 <__sinit>
 8000a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a72:	07de      	lsls	r6, r3, #31
 8000a74:	d405      	bmi.n	8000a82 <_fgets_r+0x34>
 8000a76:	89a3      	ldrh	r3, [r4, #12]
 8000a78:	0598      	lsls	r0, r3, #22
 8000a7a:	d402      	bmi.n	8000a82 <_fgets_r+0x34>
 8000a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a7e:	f000 fbf6 	bl	800126e <__retarget_lock_acquire_recursive>
 8000a82:	3f01      	subs	r7, #1
 8000a84:	46a8      	mov	r8, r5
 8000a86:	6866      	ldr	r6, [r4, #4]
 8000a88:	b996      	cbnz	r6, 8000ab0 <_fgets_r+0x62>
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	4648      	mov	r0, r9
 8000a8e:	f000 f977 	bl	8000d80 <__srefill_r>
 8000a92:	b160      	cbz	r0, 8000aae <_fgets_r+0x60>
 8000a94:	45a8      	cmp	r8, r5
 8000a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a98:	d138      	bne.n	8000b0c <_fgets_r+0xbe>
 8000a9a:	07d9      	lsls	r1, r3, #31
 8000a9c:	d4df      	bmi.n	8000a5e <_fgets_r+0x10>
 8000a9e:	89a5      	ldrh	r5, [r4, #12]
 8000aa0:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8000aa4:	d1db      	bne.n	8000a5e <_fgets_r+0x10>
 8000aa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aa8:	f000 fbe2 	bl	8001270 <__retarget_lock_release_recursive>
 8000aac:	e7d8      	b.n	8000a60 <_fgets_r+0x12>
 8000aae:	6866      	ldr	r6, [r4, #4]
 8000ab0:	f8d4 a000 	ldr.w	sl, [r4]
 8000ab4:	42be      	cmp	r6, r7
 8000ab6:	bf28      	it	cs
 8000ab8:	463e      	movcs	r6, r7
 8000aba:	4632      	mov	r2, r6
 8000abc:	210a      	movs	r1, #10
 8000abe:	4650      	mov	r0, sl
 8000ac0:	f7ff fb8e 	bl	80001e0 <memchr>
 8000ac4:	6863      	ldr	r3, [r4, #4]
 8000ac6:	b1a0      	cbz	r0, 8000af2 <_fgets_r+0xa4>
 8000ac8:	3001      	adds	r0, #1
 8000aca:	eba0 060a 	sub.w	r6, r0, sl
 8000ace:	1b9b      	subs	r3, r3, r6
 8000ad0:	e9c4 0300 	strd	r0, r3, [r4]
 8000ad4:	4632      	mov	r2, r6
 8000ad6:	4651      	mov	r1, sl
 8000ad8:	4640      	mov	r0, r8
 8000ada:	f000 fbca 	bl	8001272 <memcpy>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f808 3006 	strb.w	r3, [r8, r6]
 8000ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ae6:	07da      	lsls	r2, r3, #31
 8000ae8:	d4ba      	bmi.n	8000a60 <_fgets_r+0x12>
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	059b      	lsls	r3, r3, #22
 8000aee:	d4b7      	bmi.n	8000a60 <_fgets_r+0x12>
 8000af0:	e7d9      	b.n	8000aa6 <_fgets_r+0x58>
 8000af2:	1b9b      	subs	r3, r3, r6
 8000af4:	6063      	str	r3, [r4, #4]
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	4433      	add	r3, r6
 8000afa:	4640      	mov	r0, r8
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	4632      	mov	r2, r6
 8000b00:	4651      	mov	r1, sl
 8000b02:	f000 fbb6 	bl	8001272 <memcpy>
 8000b06:	1bbf      	subs	r7, r7, r6
 8000b08:	44b0      	add	r8, r6
 8000b0a:	d1bc      	bne.n	8000a86 <_fgets_r+0x38>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f888 3000 	strb.w	r3, [r8]
 8000b12:	e7e7      	b.n	8000ae4 <_fgets_r+0x96>

08000b14 <fgets>:
 8000b14:	4613      	mov	r3, r2
 8000b16:	460a      	mov	r2, r1
 8000b18:	4601      	mov	r1, r0
 8000b1a:	4802      	ldr	r0, [pc, #8]	; (8000b24 <fgets+0x10>)
 8000b1c:	6800      	ldr	r0, [r0, #0]
 8000b1e:	f7ff bf96 	b.w	8000a4e <_fgets_r>
 8000b22:	bf00      	nop
 8000b24:	20000064 	.word	0x20000064

08000b28 <std>:
 8000b28:	2300      	movs	r3, #0
 8000b2a:	b510      	push	{r4, lr}
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8000b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b36:	6083      	str	r3, [r0, #8]
 8000b38:	8181      	strh	r1, [r0, #12]
 8000b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8000b3c:	81c2      	strh	r2, [r0, #14]
 8000b3e:	6183      	str	r3, [r0, #24]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2208      	movs	r2, #8
 8000b44:	305c      	adds	r0, #92	; 0x5c
 8000b46:	f000 fb19 	bl	800117c <memset>
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <std+0x58>)
 8000b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <std+0x5c>)
 8000b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <std+0x60>)
 8000b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <std+0x64>)
 8000b58:	6323      	str	r3, [r4, #48]	; 0x30
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <std+0x68>)
 8000b5c:	6224      	str	r4, [r4, #32]
 8000b5e:	429c      	cmp	r4, r3
 8000b60:	d006      	beq.n	8000b70 <std+0x48>
 8000b62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b66:	4294      	cmp	r4, r2
 8000b68:	d002      	beq.n	8000b70 <std+0x48>
 8000b6a:	33d0      	adds	r3, #208	; 0xd0
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	d105      	bne.n	8000b7c <std+0x54>
 8000b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b78:	f000 bb78 	b.w	800126c <__retarget_lock_init_recursive>
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	bf00      	nop
 8000b80:	08000fcd 	.word	0x08000fcd
 8000b84:	08000fef 	.word	0x08000fef
 8000b88:	08001027 	.word	0x08001027
 8000b8c:	0800104b 	.word	0x0800104b
 8000b90:	200008f4 	.word	0x200008f4

08000b94 <stdio_exit_handler>:
 8000b94:	4a02      	ldr	r2, [pc, #8]	; (8000ba0 <stdio_exit_handler+0xc>)
 8000b96:	4903      	ldr	r1, [pc, #12]	; (8000ba4 <stdio_exit_handler+0x10>)
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <stdio_exit_handler+0x14>)
 8000b9a:	f000 b869 	b.w	8000c70 <_fwalk_sglue>
 8000b9e:	bf00      	nop
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	0800159d 	.word	0x0800159d
 8000ba8:	20000018 	.word	0x20000018

08000bac <cleanup_stdio>:
 8000bac:	6841      	ldr	r1, [r0, #4]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <cleanup_stdio+0x34>)
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	b510      	push	{r4, lr}
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	d001      	beq.n	8000bbc <cleanup_stdio+0x10>
 8000bb8:	f000 fcf0 	bl	800159c <_fflush_r>
 8000bbc:	68a1      	ldr	r1, [r4, #8]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <cleanup_stdio+0x38>)
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d002      	beq.n	8000bca <cleanup_stdio+0x1e>
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f000 fce9 	bl	800159c <_fflush_r>
 8000bca:	68e1      	ldr	r1, [r4, #12]
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <cleanup_stdio+0x3c>)
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d004      	beq.n	8000bdc <cleanup_stdio+0x30>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bd8:	f000 bce0 	b.w	800159c <_fflush_r>
 8000bdc:	bd10      	pop	{r4, pc}
 8000bde:	bf00      	nop
 8000be0:	200008f4 	.word	0x200008f4
 8000be4:	2000095c 	.word	0x2000095c
 8000be8:	200009c4 	.word	0x200009c4

08000bec <global_stdio_init.part.0>:
 8000bec:	b510      	push	{r4, lr}
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <global_stdio_init.part.0+0x30>)
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <global_stdio_init.part.0+0x34>)
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <global_stdio_init.part.0+0x38>)
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	f7ff ff94 	bl	8000b28 <std>
 8000c00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000c04:	2201      	movs	r2, #1
 8000c06:	2109      	movs	r1, #9
 8000c08:	f7ff ff8e 	bl	8000b28 <std>
 8000c0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c10:	2202      	movs	r2, #2
 8000c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c16:	2112      	movs	r1, #18
 8000c18:	f7ff bf86 	b.w	8000b28 <std>
 8000c1c:	20000a2c 	.word	0x20000a2c
 8000c20:	200008f4 	.word	0x200008f4
 8000c24:	08000b95 	.word	0x08000b95

08000c28 <__sfp_lock_acquire>:
 8000c28:	4801      	ldr	r0, [pc, #4]	; (8000c30 <__sfp_lock_acquire+0x8>)
 8000c2a:	f000 bb20 	b.w	800126e <__retarget_lock_acquire_recursive>
 8000c2e:	bf00      	nop
 8000c30:	20000a35 	.word	0x20000a35

08000c34 <__sfp_lock_release>:
 8000c34:	4801      	ldr	r0, [pc, #4]	; (8000c3c <__sfp_lock_release+0x8>)
 8000c36:	f000 bb1b 	b.w	8001270 <__retarget_lock_release_recursive>
 8000c3a:	bf00      	nop
 8000c3c:	20000a35 	.word	0x20000a35

08000c40 <__sinit>:
 8000c40:	b510      	push	{r4, lr}
 8000c42:	4604      	mov	r4, r0
 8000c44:	f7ff fff0 	bl	8000c28 <__sfp_lock_acquire>
 8000c48:	6a23      	ldr	r3, [r4, #32]
 8000c4a:	b11b      	cbz	r3, 8000c54 <__sinit+0x14>
 8000c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c50:	f7ff bff0 	b.w	8000c34 <__sfp_lock_release>
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__sinit+0x28>)
 8000c56:	6223      	str	r3, [r4, #32]
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__sinit+0x2c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f5      	bne.n	8000c4c <__sinit+0xc>
 8000c60:	f7ff ffc4 	bl	8000bec <global_stdio_init.part.0>
 8000c64:	e7f2      	b.n	8000c4c <__sinit+0xc>
 8000c66:	bf00      	nop
 8000c68:	08000bad 	.word	0x08000bad
 8000c6c:	20000a2c 	.word	0x20000a2c

08000c70 <_fwalk_sglue>:
 8000c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c74:	4607      	mov	r7, r0
 8000c76:	4688      	mov	r8, r1
 8000c78:	4614      	mov	r4, r2
 8000c7a:	2600      	movs	r6, #0
 8000c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c80:	f1b9 0901 	subs.w	r9, r9, #1
 8000c84:	d505      	bpl.n	8000c92 <_fwalk_sglue+0x22>
 8000c86:	6824      	ldr	r4, [r4, #0]
 8000c88:	2c00      	cmp	r4, #0
 8000c8a:	d1f7      	bne.n	8000c7c <_fwalk_sglue+0xc>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c92:	89ab      	ldrh	r3, [r5, #12]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d907      	bls.n	8000ca8 <_fwalk_sglue+0x38>
 8000c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	d003      	beq.n	8000ca8 <_fwalk_sglue+0x38>
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	47c0      	blx	r8
 8000ca6:	4306      	orrs	r6, r0
 8000ca8:	3568      	adds	r5, #104	; 0x68
 8000caa:	e7e9      	b.n	8000c80 <_fwalk_sglue+0x10>

08000cac <_puts_r>:
 8000cac:	6a03      	ldr	r3, [r0, #32]
 8000cae:	b570      	push	{r4, r5, r6, lr}
 8000cb0:	6884      	ldr	r4, [r0, #8]
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	460e      	mov	r6, r1
 8000cb6:	b90b      	cbnz	r3, 8000cbc <_puts_r+0x10>
 8000cb8:	f7ff ffc2 	bl	8000c40 <__sinit>
 8000cbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cbe:	07db      	lsls	r3, r3, #31
 8000cc0:	d405      	bmi.n	8000cce <_puts_r+0x22>
 8000cc2:	89a3      	ldrh	r3, [r4, #12]
 8000cc4:	0598      	lsls	r0, r3, #22
 8000cc6:	d402      	bmi.n	8000cce <_puts_r+0x22>
 8000cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cca:	f000 fad0 	bl	800126e <__retarget_lock_acquire_recursive>
 8000cce:	89a3      	ldrh	r3, [r4, #12]
 8000cd0:	0719      	lsls	r1, r3, #28
 8000cd2:	d513      	bpl.n	8000cfc <_puts_r+0x50>
 8000cd4:	6923      	ldr	r3, [r4, #16]
 8000cd6:	b18b      	cbz	r3, 8000cfc <_puts_r+0x50>
 8000cd8:	3e01      	subs	r6, #1
 8000cda:	68a3      	ldr	r3, [r4, #8]
 8000cdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	60a3      	str	r3, [r4, #8]
 8000ce4:	b9e9      	cbnz	r1, 8000d22 <_puts_r+0x76>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da2e      	bge.n	8000d48 <_puts_r+0x9c>
 8000cea:	4622      	mov	r2, r4
 8000cec:	210a      	movs	r1, #10
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f000 f9af 	bl	8001052 <__swbuf_r>
 8000cf4:	3001      	adds	r0, #1
 8000cf6:	d007      	beq.n	8000d08 <_puts_r+0x5c>
 8000cf8:	250a      	movs	r5, #10
 8000cfa:	e007      	b.n	8000d0c <_puts_r+0x60>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f000 f9e4 	bl	80010cc <__swsetup_r>
 8000d04:	2800      	cmp	r0, #0
 8000d06:	d0e7      	beq.n	8000cd8 <_puts_r+0x2c>
 8000d08:	f04f 35ff 	mov.w	r5, #4294967295
 8000d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d0e:	07da      	lsls	r2, r3, #31
 8000d10:	d405      	bmi.n	8000d1e <_puts_r+0x72>
 8000d12:	89a3      	ldrh	r3, [r4, #12]
 8000d14:	059b      	lsls	r3, r3, #22
 8000d16:	d402      	bmi.n	8000d1e <_puts_r+0x72>
 8000d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d1a:	f000 faa9 	bl	8001270 <__retarget_lock_release_recursive>
 8000d1e:	4628      	mov	r0, r5
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da04      	bge.n	8000d30 <_puts_r+0x84>
 8000d26:	69a2      	ldr	r2, [r4, #24]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dc06      	bgt.n	8000d3a <_puts_r+0x8e>
 8000d2c:	290a      	cmp	r1, #10
 8000d2e:	d004      	beq.n	8000d3a <_puts_r+0x8e>
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	6022      	str	r2, [r4, #0]
 8000d36:	7019      	strb	r1, [r3, #0]
 8000d38:	e7cf      	b.n	8000cda <_puts_r+0x2e>
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f000 f988 	bl	8001052 <__swbuf_r>
 8000d42:	3001      	adds	r0, #1
 8000d44:	d1c9      	bne.n	8000cda <_puts_r+0x2e>
 8000d46:	e7df      	b.n	8000d08 <_puts_r+0x5c>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	250a      	movs	r5, #10
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	6022      	str	r2, [r4, #0]
 8000d50:	701d      	strb	r5, [r3, #0]
 8000d52:	e7db      	b.n	8000d0c <_puts_r+0x60>

08000d54 <puts>:
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <puts+0xc>)
 8000d56:	4601      	mov	r1, r0
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	f7ff bfa7 	b.w	8000cac <_puts_r>
 8000d5e:	bf00      	nop
 8000d60:	20000064 	.word	0x20000064

08000d64 <lflush>:
 8000d64:	898b      	ldrh	r3, [r1, #12]
 8000d66:	f003 0309 	and.w	r3, r3, #9
 8000d6a:	2b09      	cmp	r3, #9
 8000d6c:	d103      	bne.n	8000d76 <lflush+0x12>
 8000d6e:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <lflush+0x18>)
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	f000 bc13 	b.w	800159c <_fflush_r>
 8000d76:	2000      	movs	r0, #0
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000064 	.word	0x20000064

08000d80 <__srefill_r>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	460c      	mov	r4, r1
 8000d84:	4605      	mov	r5, r0
 8000d86:	b118      	cbz	r0, 8000d90 <__srefill_r+0x10>
 8000d88:	6a03      	ldr	r3, [r0, #32]
 8000d8a:	b90b      	cbnz	r3, 8000d90 <__srefill_r+0x10>
 8000d8c:	f7ff ff58 	bl	8000c40 <__sinit>
 8000d90:	2300      	movs	r3, #0
 8000d92:	6063      	str	r3, [r4, #4]
 8000d94:	89a3      	ldrh	r3, [r4, #12]
 8000d96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d9a:	069e      	lsls	r6, r3, #26
 8000d9c:	d502      	bpl.n	8000da4 <__srefill_r+0x24>
 8000d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000da2:	e05c      	b.n	8000e5e <__srefill_r+0xde>
 8000da4:	0758      	lsls	r0, r3, #29
 8000da6:	d448      	bmi.n	8000e3a <__srefill_r+0xba>
 8000da8:	06d9      	lsls	r1, r3, #27
 8000daa:	d405      	bmi.n	8000db8 <__srefill_r+0x38>
 8000dac:	2309      	movs	r3, #9
 8000dae:	602b      	str	r3, [r5, #0]
 8000db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000db4:	81a3      	strh	r3, [r4, #12]
 8000db6:	e7f2      	b.n	8000d9e <__srefill_r+0x1e>
 8000db8:	071a      	lsls	r2, r3, #28
 8000dba:	d50b      	bpl.n	8000dd4 <__srefill_r+0x54>
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f000 fbec 	bl	800159c <_fflush_r>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d1ea      	bne.n	8000d9e <__srefill_r+0x1e>
 8000dc8:	89a3      	ldrh	r3, [r4, #12]
 8000dca:	60a0      	str	r0, [r4, #8]
 8000dcc:	f023 0308 	bic.w	r3, r3, #8
 8000dd0:	81a3      	strh	r3, [r4, #12]
 8000dd2:	61a0      	str	r0, [r4, #24]
 8000dd4:	89a3      	ldrh	r3, [r4, #12]
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	81a3      	strh	r3, [r4, #12]
 8000ddc:	6923      	ldr	r3, [r4, #16]
 8000dde:	b91b      	cbnz	r3, 8000de8 <__srefill_r+0x68>
 8000de0:	4621      	mov	r1, r4
 8000de2:	4628      	mov	r0, r5
 8000de4:	f000 fc28 	bl	8001638 <__smakebuf_r>
 8000de8:	89a6      	ldrh	r6, [r4, #12]
 8000dea:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8000dee:	07b3      	lsls	r3, r6, #30
 8000df0:	d00f      	beq.n	8000e12 <__srefill_r+0x92>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <__srefill_r+0xe4>)
 8000df6:	491c      	ldr	r1, [pc, #112]	; (8000e68 <__srefill_r+0xe8>)
 8000df8:	481c      	ldr	r0, [pc, #112]	; (8000e6c <__srefill_r+0xec>)
 8000dfa:	81a3      	strh	r3, [r4, #12]
 8000dfc:	f006 0609 	and.w	r6, r6, #9
 8000e00:	f7ff ff36 	bl	8000c70 <_fwalk_sglue>
 8000e04:	2e09      	cmp	r6, #9
 8000e06:	81a7      	strh	r7, [r4, #12]
 8000e08:	d103      	bne.n	8000e12 <__srefill_r+0x92>
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f000 fb3f 	bl	8001490 <__sflush_r>
 8000e12:	6922      	ldr	r2, [r4, #16]
 8000e14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000e16:	6963      	ldr	r3, [r4, #20]
 8000e18:	6a21      	ldr	r1, [r4, #32]
 8000e1a:	6022      	str	r2, [r4, #0]
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	47b0      	blx	r6
 8000e20:	2800      	cmp	r0, #0
 8000e22:	6060      	str	r0, [r4, #4]
 8000e24:	dc1c      	bgt.n	8000e60 <__srefill_r+0xe0>
 8000e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e2a:	bf17      	itett	ne
 8000e2c:	2200      	movne	r2, #0
 8000e2e:	f043 0320 	orreq.w	r3, r3, #32
 8000e32:	6062      	strne	r2, [r4, #4]
 8000e34:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8000e38:	e7bc      	b.n	8000db4 <__srefill_r+0x34>
 8000e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	d0cd      	beq.n	8000ddc <__srefill_r+0x5c>
 8000e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d002      	beq.n	8000e4e <__srefill_r+0xce>
 8000e48:	4628      	mov	r0, r5
 8000e4a:	f000 fa21 	bl	8001290 <_free_r>
 8000e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e50:	6063      	str	r3, [r4, #4]
 8000e52:	2000      	movs	r0, #0
 8000e54:	6360      	str	r0, [r4, #52]	; 0x34
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0c0      	beq.n	8000ddc <__srefill_r+0x5c>
 8000e5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e5c:	6023      	str	r3, [r4, #0]
 8000e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7fc      	b.n	8000e5e <__srefill_r+0xde>
 8000e64:	2000000c 	.word	0x2000000c
 8000e68:	08000d65 	.word	0x08000d65
 8000e6c:	20000018 	.word	0x20000018

08000e70 <setvbuf>:
 8000e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000e74:	461d      	mov	r5, r3
 8000e76:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <setvbuf+0x158>)
 8000e78:	681f      	ldr	r7, [r3, #0]
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	460e      	mov	r6, r1
 8000e7e:	4690      	mov	r8, r2
 8000e80:	b127      	cbz	r7, 8000e8c <setvbuf+0x1c>
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	b913      	cbnz	r3, 8000e8c <setvbuf+0x1c>
 8000e86:	4638      	mov	r0, r7
 8000e88:	f7ff feda 	bl	8000c40 <__sinit>
 8000e8c:	f1b8 0f02 	cmp.w	r8, #2
 8000e90:	d006      	beq.n	8000ea0 <setvbuf+0x30>
 8000e92:	f1b8 0f01 	cmp.w	r8, #1
 8000e96:	f200 8094 	bhi.w	8000fc2 <setvbuf+0x152>
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	f2c0 8091 	blt.w	8000fc2 <setvbuf+0x152>
 8000ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ea2:	07da      	lsls	r2, r3, #31
 8000ea4:	d405      	bmi.n	8000eb2 <setvbuf+0x42>
 8000ea6:	89a3      	ldrh	r3, [r4, #12]
 8000ea8:	059b      	lsls	r3, r3, #22
 8000eaa:	d402      	bmi.n	8000eb2 <setvbuf+0x42>
 8000eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eae:	f000 f9de 	bl	800126e <__retarget_lock_acquire_recursive>
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	f000 fb71 	bl	800159c <_fflush_r>
 8000eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ebc:	b141      	cbz	r1, 8000ed0 <setvbuf+0x60>
 8000ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d002      	beq.n	8000ecc <setvbuf+0x5c>
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	f000 f9e2 	bl	8001290 <_free_r>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6363      	str	r3, [r4, #52]	; 0x34
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61a3      	str	r3, [r4, #24]
 8000ed4:	6063      	str	r3, [r4, #4]
 8000ed6:	89a3      	ldrh	r3, [r4, #12]
 8000ed8:	0618      	lsls	r0, r3, #24
 8000eda:	d503      	bpl.n	8000ee4 <setvbuf+0x74>
 8000edc:	6921      	ldr	r1, [r4, #16]
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f000 f9d6 	bl	8001290 <_free_r>
 8000ee4:	89a3      	ldrh	r3, [r4, #12]
 8000ee6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f1b8 0f02 	cmp.w	r8, #2
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	d05f      	beq.n	8000fb6 <setvbuf+0x146>
 8000ef6:	ab01      	add	r3, sp, #4
 8000ef8:	466a      	mov	r2, sp
 8000efa:	4621      	mov	r1, r4
 8000efc:	4638      	mov	r0, r7
 8000efe:	f000 fb75 	bl	80015ec <__swhatbuf_r>
 8000f02:	89a3      	ldrh	r3, [r4, #12]
 8000f04:	4318      	orrs	r0, r3
 8000f06:	81a0      	strh	r0, [r4, #12]
 8000f08:	bb2d      	cbnz	r5, 8000f56 <setvbuf+0xe6>
 8000f0a:	9d00      	ldr	r5, [sp, #0]
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f000 fa0b 	bl	8001328 <malloc>
 8000f12:	4606      	mov	r6, r0
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d150      	bne.n	8000fba <setvbuf+0x14a>
 8000f18:	f8dd 9000 	ldr.w	r9, [sp]
 8000f1c:	45a9      	cmp	r9, r5
 8000f1e:	d13e      	bne.n	8000f9e <setvbuf+0x12e>
 8000f20:	f04f 35ff 	mov.w	r5, #4294967295
 8000f24:	2200      	movs	r2, #0
 8000f26:	60a2      	str	r2, [r4, #8]
 8000f28:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8000f2c:	6022      	str	r2, [r4, #0]
 8000f2e:	6122      	str	r2, [r4, #16]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f36:	6162      	str	r2, [r4, #20]
 8000f38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	07d1      	lsls	r1, r2, #31
 8000f40:	81a3      	strh	r3, [r4, #12]
 8000f42:	d404      	bmi.n	8000f4e <setvbuf+0xde>
 8000f44:	059b      	lsls	r3, r3, #22
 8000f46:	d402      	bmi.n	8000f4e <setvbuf+0xde>
 8000f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f4a:	f000 f991 	bl	8001270 <__retarget_lock_release_recursive>
 8000f4e:	4628      	mov	r0, r5
 8000f50:	b003      	add	sp, #12
 8000f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d0d8      	beq.n	8000f0c <setvbuf+0x9c>
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	b913      	cbnz	r3, 8000f64 <setvbuf+0xf4>
 8000f5e:	4638      	mov	r0, r7
 8000f60:	f7ff fe6e 	bl	8000c40 <__sinit>
 8000f64:	f1b8 0f01 	cmp.w	r8, #1
 8000f68:	bf08      	it	eq
 8000f6a:	89a3      	ldrheq	r3, [r4, #12]
 8000f6c:	6026      	str	r6, [r4, #0]
 8000f6e:	bf04      	itt	eq
 8000f70:	f043 0301 	orreq.w	r3, r3, #1
 8000f74:	81a3      	strheq	r3, [r4, #12]
 8000f76:	89a3      	ldrh	r3, [r4, #12]
 8000f78:	f013 0208 	ands.w	r2, r3, #8
 8000f7c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8000f80:	d01d      	beq.n	8000fbe <setvbuf+0x14e>
 8000f82:	07da      	lsls	r2, r3, #31
 8000f84:	bf41      	itttt	mi
 8000f86:	2200      	movmi	r2, #0
 8000f88:	426d      	negmi	r5, r5
 8000f8a:	60a2      	strmi	r2, [r4, #8]
 8000f8c:	61a5      	strmi	r5, [r4, #24]
 8000f8e:	bf58      	it	pl
 8000f90:	60a5      	strpl	r5, [r4, #8]
 8000f92:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8000f94:	f015 0501 	ands.w	r5, r5, #1
 8000f98:	d0d4      	beq.n	8000f44 <setvbuf+0xd4>
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	e7d7      	b.n	8000f4e <setvbuf+0xde>
 8000f9e:	4648      	mov	r0, r9
 8000fa0:	f000 f9c2 	bl	8001328 <malloc>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d0ba      	beq.n	8000f20 <setvbuf+0xb0>
 8000faa:	89a3      	ldrh	r3, [r4, #12]
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	81a3      	strh	r3, [r4, #12]
 8000fb2:	464d      	mov	r5, r9
 8000fb4:	e7d1      	b.n	8000f5a <setvbuf+0xea>
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	e7b4      	b.n	8000f24 <setvbuf+0xb4>
 8000fba:	46a9      	mov	r9, r5
 8000fbc:	e7f5      	b.n	8000faa <setvbuf+0x13a>
 8000fbe:	60a2      	str	r2, [r4, #8]
 8000fc0:	e7e7      	b.n	8000f92 <setvbuf+0x122>
 8000fc2:	f04f 35ff 	mov.w	r5, #4294967295
 8000fc6:	e7c2      	b.n	8000f4e <setvbuf+0xde>
 8000fc8:	20000064 	.word	0x20000064

08000fcc <__sread>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	460c      	mov	r4, r1
 8000fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd4:	f000 f8fc 	bl	80011d0 <_read_r>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	bfab      	itete	ge
 8000fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fde:	89a3      	ldrhlt	r3, [r4, #12]
 8000fe0:	181b      	addge	r3, r3, r0
 8000fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fe6:	bfac      	ite	ge
 8000fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fea:	81a3      	strhlt	r3, [r4, #12]
 8000fec:	bd10      	pop	{r4, pc}

08000fee <__swrite>:
 8000fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff2:	461f      	mov	r7, r3
 8000ff4:	898b      	ldrh	r3, [r1, #12]
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4616      	mov	r6, r2
 8000ffe:	d505      	bpl.n	800100c <__swrite+0x1e>
 8001000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001004:	2302      	movs	r3, #2
 8001006:	2200      	movs	r2, #0
 8001008:	f000 f8d0 	bl	80011ac <_lseek_r>
 800100c:	89a3      	ldrh	r3, [r4, #12]
 800100e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001016:	81a3      	strh	r3, [r4, #12]
 8001018:	4632      	mov	r2, r6
 800101a:	463b      	mov	r3, r7
 800101c:	4628      	mov	r0, r5
 800101e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001022:	f000 b8e7 	b.w	80011f4 <_write_r>

08001026 <__sseek>:
 8001026:	b510      	push	{r4, lr}
 8001028:	460c      	mov	r4, r1
 800102a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102e:	f000 f8bd 	bl	80011ac <_lseek_r>
 8001032:	1c43      	adds	r3, r0, #1
 8001034:	89a3      	ldrh	r3, [r4, #12]
 8001036:	bf15      	itete	ne
 8001038:	6560      	strne	r0, [r4, #84]	; 0x54
 800103a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800103e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001042:	81a3      	strheq	r3, [r4, #12]
 8001044:	bf18      	it	ne
 8001046:	81a3      	strhne	r3, [r4, #12]
 8001048:	bd10      	pop	{r4, pc}

0800104a <__sclose>:
 800104a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800104e:	f000 b89d 	b.w	800118c <_close_r>

08001052 <__swbuf_r>:
 8001052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001054:	460e      	mov	r6, r1
 8001056:	4614      	mov	r4, r2
 8001058:	4605      	mov	r5, r0
 800105a:	b118      	cbz	r0, 8001064 <__swbuf_r+0x12>
 800105c:	6a03      	ldr	r3, [r0, #32]
 800105e:	b90b      	cbnz	r3, 8001064 <__swbuf_r+0x12>
 8001060:	f7ff fdee 	bl	8000c40 <__sinit>
 8001064:	69a3      	ldr	r3, [r4, #24]
 8001066:	60a3      	str	r3, [r4, #8]
 8001068:	89a3      	ldrh	r3, [r4, #12]
 800106a:	071a      	lsls	r2, r3, #28
 800106c:	d525      	bpl.n	80010ba <__swbuf_r+0x68>
 800106e:	6923      	ldr	r3, [r4, #16]
 8001070:	b31b      	cbz	r3, 80010ba <__swbuf_r+0x68>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	6922      	ldr	r2, [r4, #16]
 8001076:	1a98      	subs	r0, r3, r2
 8001078:	6963      	ldr	r3, [r4, #20]
 800107a:	b2f6      	uxtb	r6, r6
 800107c:	4283      	cmp	r3, r0
 800107e:	4637      	mov	r7, r6
 8001080:	dc04      	bgt.n	800108c <__swbuf_r+0x3a>
 8001082:	4621      	mov	r1, r4
 8001084:	4628      	mov	r0, r5
 8001086:	f000 fa89 	bl	800159c <_fflush_r>
 800108a:	b9e0      	cbnz	r0, 80010c6 <__swbuf_r+0x74>
 800108c:	68a3      	ldr	r3, [r4, #8]
 800108e:	3b01      	subs	r3, #1
 8001090:	60a3      	str	r3, [r4, #8]
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	6022      	str	r2, [r4, #0]
 8001098:	701e      	strb	r6, [r3, #0]
 800109a:	6962      	ldr	r2, [r4, #20]
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	429a      	cmp	r2, r3
 80010a0:	d004      	beq.n	80010ac <__swbuf_r+0x5a>
 80010a2:	89a3      	ldrh	r3, [r4, #12]
 80010a4:	07db      	lsls	r3, r3, #31
 80010a6:	d506      	bpl.n	80010b6 <__swbuf_r+0x64>
 80010a8:	2e0a      	cmp	r6, #10
 80010aa:	d104      	bne.n	80010b6 <__swbuf_r+0x64>
 80010ac:	4621      	mov	r1, r4
 80010ae:	4628      	mov	r0, r5
 80010b0:	f000 fa74 	bl	800159c <_fflush_r>
 80010b4:	b938      	cbnz	r0, 80010c6 <__swbuf_r+0x74>
 80010b6:	4638      	mov	r0, r7
 80010b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ba:	4621      	mov	r1, r4
 80010bc:	4628      	mov	r0, r5
 80010be:	f000 f805 	bl	80010cc <__swsetup_r>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d0d5      	beq.n	8001072 <__swbuf_r+0x20>
 80010c6:	f04f 37ff 	mov.w	r7, #4294967295
 80010ca:	e7f4      	b.n	80010b6 <__swbuf_r+0x64>

080010cc <__swsetup_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <__swsetup_r+0xac>)
 80010d0:	4605      	mov	r5, r0
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	460c      	mov	r4, r1
 80010d6:	b118      	cbz	r0, 80010e0 <__swsetup_r+0x14>
 80010d8:	6a03      	ldr	r3, [r0, #32]
 80010da:	b90b      	cbnz	r3, 80010e0 <__swsetup_r+0x14>
 80010dc:	f7ff fdb0 	bl	8000c40 <__sinit>
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010e6:	0718      	lsls	r0, r3, #28
 80010e8:	d422      	bmi.n	8001130 <__swsetup_r+0x64>
 80010ea:	06d9      	lsls	r1, r3, #27
 80010ec:	d407      	bmi.n	80010fe <__swsetup_r+0x32>
 80010ee:	2309      	movs	r3, #9
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010f6:	81a3      	strh	r3, [r4, #12]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	e034      	b.n	8001168 <__swsetup_r+0x9c>
 80010fe:	0758      	lsls	r0, r3, #29
 8001100:	d512      	bpl.n	8001128 <__swsetup_r+0x5c>
 8001102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001104:	b141      	cbz	r1, 8001118 <__swsetup_r+0x4c>
 8001106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800110a:	4299      	cmp	r1, r3
 800110c:	d002      	beq.n	8001114 <__swsetup_r+0x48>
 800110e:	4628      	mov	r0, r5
 8001110:	f000 f8be 	bl	8001290 <_free_r>
 8001114:	2300      	movs	r3, #0
 8001116:	6363      	str	r3, [r4, #52]	; 0x34
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800111e:	81a3      	strh	r3, [r4, #12]
 8001120:	2300      	movs	r3, #0
 8001122:	6063      	str	r3, [r4, #4]
 8001124:	6923      	ldr	r3, [r4, #16]
 8001126:	6023      	str	r3, [r4, #0]
 8001128:	89a3      	ldrh	r3, [r4, #12]
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	81a3      	strh	r3, [r4, #12]
 8001130:	6923      	ldr	r3, [r4, #16]
 8001132:	b94b      	cbnz	r3, 8001148 <__swsetup_r+0x7c>
 8001134:	89a3      	ldrh	r3, [r4, #12]
 8001136:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800113a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113e:	d003      	beq.n	8001148 <__swsetup_r+0x7c>
 8001140:	4621      	mov	r1, r4
 8001142:	4628      	mov	r0, r5
 8001144:	f000 fa78 	bl	8001638 <__smakebuf_r>
 8001148:	89a0      	ldrh	r0, [r4, #12]
 800114a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800114e:	f010 0301 	ands.w	r3, r0, #1
 8001152:	d00a      	beq.n	800116a <__swsetup_r+0x9e>
 8001154:	2300      	movs	r3, #0
 8001156:	60a3      	str	r3, [r4, #8]
 8001158:	6963      	ldr	r3, [r4, #20]
 800115a:	425b      	negs	r3, r3
 800115c:	61a3      	str	r3, [r4, #24]
 800115e:	6923      	ldr	r3, [r4, #16]
 8001160:	b943      	cbnz	r3, 8001174 <__swsetup_r+0xa8>
 8001162:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001166:	d1c4      	bne.n	80010f2 <__swsetup_r+0x26>
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	0781      	lsls	r1, r0, #30
 800116c:	bf58      	it	pl
 800116e:	6963      	ldrpl	r3, [r4, #20]
 8001170:	60a3      	str	r3, [r4, #8]
 8001172:	e7f4      	b.n	800115e <__swsetup_r+0x92>
 8001174:	2000      	movs	r0, #0
 8001176:	e7f7      	b.n	8001168 <__swsetup_r+0x9c>
 8001178:	20000064 	.word	0x20000064

0800117c <memset>:
 800117c:	4402      	add	r2, r0
 800117e:	4603      	mov	r3, r0
 8001180:	4293      	cmp	r3, r2
 8001182:	d100      	bne.n	8001186 <memset+0xa>
 8001184:	4770      	bx	lr
 8001186:	f803 1b01 	strb.w	r1, [r3], #1
 800118a:	e7f9      	b.n	8001180 <memset+0x4>

0800118c <_close_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4d06      	ldr	r5, [pc, #24]	; (80011a8 <_close_r+0x1c>)
 8001190:	2300      	movs	r3, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	602b      	str	r3, [r5, #0]
 8001198:	f7ff f9d8 	bl	800054c <_close>
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	d102      	bne.n	80011a6 <_close_r+0x1a>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	b103      	cbz	r3, 80011a6 <_close_r+0x1a>
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
 80011a8:	20000a30 	.word	0x20000a30

080011ac <_lseek_r>:
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4d07      	ldr	r5, [pc, #28]	; (80011cc <_lseek_r+0x20>)
 80011b0:	4604      	mov	r4, r0
 80011b2:	4608      	mov	r0, r1
 80011b4:	4611      	mov	r1, r2
 80011b6:	2200      	movs	r2, #0
 80011b8:	602a      	str	r2, [r5, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	f7ff f9ed 	bl	800059a <_lseek>
 80011c0:	1c43      	adds	r3, r0, #1
 80011c2:	d102      	bne.n	80011ca <_lseek_r+0x1e>
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	b103      	cbz	r3, 80011ca <_lseek_r+0x1e>
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	20000a30 	.word	0x20000a30

080011d0 <_read_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4d07      	ldr	r5, [pc, #28]	; (80011f0 <_read_r+0x20>)
 80011d4:	4604      	mov	r4, r0
 80011d6:	4608      	mov	r0, r1
 80011d8:	4611      	mov	r1, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	602a      	str	r2, [r5, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	f7ff fb32 	bl	8000848 <_read>
 80011e4:	1c43      	adds	r3, r0, #1
 80011e6:	d102      	bne.n	80011ee <_read_r+0x1e>
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	b103      	cbz	r3, 80011ee <_read_r+0x1e>
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	bd38      	pop	{r3, r4, r5, pc}
 80011f0:	20000a30 	.word	0x20000a30

080011f4 <_write_r>:
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	4d07      	ldr	r5, [pc, #28]	; (8001214 <_write_r+0x20>)
 80011f8:	4604      	mov	r4, r0
 80011fa:	4608      	mov	r0, r1
 80011fc:	4611      	mov	r1, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	602a      	str	r2, [r5, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	f7ff fb49 	bl	800089a <_write>
 8001208:	1c43      	adds	r3, r0, #1
 800120a:	d102      	bne.n	8001212 <_write_r+0x1e>
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	b103      	cbz	r3, 8001212 <_write_r+0x1e>
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	bd38      	pop	{r3, r4, r5, pc}
 8001214:	20000a30 	.word	0x20000a30

08001218 <__errno>:
 8001218:	4b01      	ldr	r3, [pc, #4]	; (8001220 <__errno+0x8>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000064 	.word	0x20000064

08001224 <__libc_init_array>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4d0d      	ldr	r5, [pc, #52]	; (800125c <__libc_init_array+0x38>)
 8001228:	4c0d      	ldr	r4, [pc, #52]	; (8001260 <__libc_init_array+0x3c>)
 800122a:	1b64      	subs	r4, r4, r5
 800122c:	10a4      	asrs	r4, r4, #2
 800122e:	2600      	movs	r6, #0
 8001230:	42a6      	cmp	r6, r4
 8001232:	d109      	bne.n	8001248 <__libc_init_array+0x24>
 8001234:	4d0b      	ldr	r5, [pc, #44]	; (8001264 <__libc_init_array+0x40>)
 8001236:	4c0c      	ldr	r4, [pc, #48]	; (8001268 <__libc_init_array+0x44>)
 8001238:	f000 fa6c 	bl	8001714 <_init>
 800123c:	1b64      	subs	r4, r4, r5
 800123e:	10a4      	asrs	r4, r4, #2
 8001240:	2600      	movs	r6, #0
 8001242:	42a6      	cmp	r6, r4
 8001244:	d105      	bne.n	8001252 <__libc_init_array+0x2e>
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	f855 3b04 	ldr.w	r3, [r5], #4
 800124c:	4798      	blx	r3
 800124e:	3601      	adds	r6, #1
 8001250:	e7ee      	b.n	8001230 <__libc_init_array+0xc>
 8001252:	f855 3b04 	ldr.w	r3, [r5], #4
 8001256:	4798      	blx	r3
 8001258:	3601      	adds	r6, #1
 800125a:	e7f2      	b.n	8001242 <__libc_init_array+0x1e>
 800125c:	08001758 	.word	0x08001758
 8001260:	08001758 	.word	0x08001758
 8001264:	08001758 	.word	0x08001758
 8001268:	0800175c 	.word	0x0800175c

0800126c <__retarget_lock_init_recursive>:
 800126c:	4770      	bx	lr

0800126e <__retarget_lock_acquire_recursive>:
 800126e:	4770      	bx	lr

08001270 <__retarget_lock_release_recursive>:
 8001270:	4770      	bx	lr

08001272 <memcpy>:
 8001272:	440a      	add	r2, r1
 8001274:	4291      	cmp	r1, r2
 8001276:	f100 33ff 	add.w	r3, r0, #4294967295
 800127a:	d100      	bne.n	800127e <memcpy+0xc>
 800127c:	4770      	bx	lr
 800127e:	b510      	push	{r4, lr}
 8001280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001288:	4291      	cmp	r1, r2
 800128a:	d1f9      	bne.n	8001280 <memcpy+0xe>
 800128c:	bd10      	pop	{r4, pc}
	...

08001290 <_free_r>:
 8001290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001292:	2900      	cmp	r1, #0
 8001294:	d044      	beq.n	8001320 <_free_r+0x90>
 8001296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800129a:	9001      	str	r0, [sp, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	f1a1 0404 	sub.w	r4, r1, #4
 80012a2:	bfb8      	it	lt
 80012a4:	18e4      	addlt	r4, r4, r3
 80012a6:	f000 f8e7 	bl	8001478 <__malloc_lock>
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <_free_r+0x94>)
 80012ac:	9801      	ldr	r0, [sp, #4]
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	b933      	cbnz	r3, 80012c0 <_free_r+0x30>
 80012b2:	6063      	str	r3, [r4, #4]
 80012b4:	6014      	str	r4, [r2, #0]
 80012b6:	b003      	add	sp, #12
 80012b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80012bc:	f000 b8e2 	b.w	8001484 <__malloc_unlock>
 80012c0:	42a3      	cmp	r3, r4
 80012c2:	d908      	bls.n	80012d6 <_free_r+0x46>
 80012c4:	6825      	ldr	r5, [r4, #0]
 80012c6:	1961      	adds	r1, r4, r5
 80012c8:	428b      	cmp	r3, r1
 80012ca:	bf01      	itttt	eq
 80012cc:	6819      	ldreq	r1, [r3, #0]
 80012ce:	685b      	ldreq	r3, [r3, #4]
 80012d0:	1949      	addeq	r1, r1, r5
 80012d2:	6021      	streq	r1, [r4, #0]
 80012d4:	e7ed      	b.n	80012b2 <_free_r+0x22>
 80012d6:	461a      	mov	r2, r3
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b10b      	cbz	r3, 80012e0 <_free_r+0x50>
 80012dc:	42a3      	cmp	r3, r4
 80012de:	d9fa      	bls.n	80012d6 <_free_r+0x46>
 80012e0:	6811      	ldr	r1, [r2, #0]
 80012e2:	1855      	adds	r5, r2, r1
 80012e4:	42a5      	cmp	r5, r4
 80012e6:	d10b      	bne.n	8001300 <_free_r+0x70>
 80012e8:	6824      	ldr	r4, [r4, #0]
 80012ea:	4421      	add	r1, r4
 80012ec:	1854      	adds	r4, r2, r1
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	6011      	str	r1, [r2, #0]
 80012f2:	d1e0      	bne.n	80012b6 <_free_r+0x26>
 80012f4:	681c      	ldr	r4, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	6053      	str	r3, [r2, #4]
 80012fa:	440c      	add	r4, r1
 80012fc:	6014      	str	r4, [r2, #0]
 80012fe:	e7da      	b.n	80012b6 <_free_r+0x26>
 8001300:	d902      	bls.n	8001308 <_free_r+0x78>
 8001302:	230c      	movs	r3, #12
 8001304:	6003      	str	r3, [r0, #0]
 8001306:	e7d6      	b.n	80012b6 <_free_r+0x26>
 8001308:	6825      	ldr	r5, [r4, #0]
 800130a:	1961      	adds	r1, r4, r5
 800130c:	428b      	cmp	r3, r1
 800130e:	bf04      	itt	eq
 8001310:	6819      	ldreq	r1, [r3, #0]
 8001312:	685b      	ldreq	r3, [r3, #4]
 8001314:	6063      	str	r3, [r4, #4]
 8001316:	bf04      	itt	eq
 8001318:	1949      	addeq	r1, r1, r5
 800131a:	6021      	streq	r1, [r4, #0]
 800131c:	6054      	str	r4, [r2, #4]
 800131e:	e7ca      	b.n	80012b6 <_free_r+0x26>
 8001320:	b003      	add	sp, #12
 8001322:	bd30      	pop	{r4, r5, pc}
 8001324:	20000a38 	.word	0x20000a38

08001328 <malloc>:
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <malloc+0xc>)
 800132a:	4601      	mov	r1, r0
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f000 b823 	b.w	8001378 <_malloc_r>
 8001332:	bf00      	nop
 8001334:	20000064 	.word	0x20000064

08001338 <sbrk_aligned>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	4e0e      	ldr	r6, [pc, #56]	; (8001374 <sbrk_aligned+0x3c>)
 800133c:	460c      	mov	r4, r1
 800133e:	6831      	ldr	r1, [r6, #0]
 8001340:	4605      	mov	r5, r0
 8001342:	b911      	cbnz	r1, 800134a <sbrk_aligned+0x12>
 8001344:	f000 f9d6 	bl	80016f4 <_sbrk_r>
 8001348:	6030      	str	r0, [r6, #0]
 800134a:	4621      	mov	r1, r4
 800134c:	4628      	mov	r0, r5
 800134e:	f000 f9d1 	bl	80016f4 <_sbrk_r>
 8001352:	1c43      	adds	r3, r0, #1
 8001354:	d00a      	beq.n	800136c <sbrk_aligned+0x34>
 8001356:	1cc4      	adds	r4, r0, #3
 8001358:	f024 0403 	bic.w	r4, r4, #3
 800135c:	42a0      	cmp	r0, r4
 800135e:	d007      	beq.n	8001370 <sbrk_aligned+0x38>
 8001360:	1a21      	subs	r1, r4, r0
 8001362:	4628      	mov	r0, r5
 8001364:	f000 f9c6 	bl	80016f4 <_sbrk_r>
 8001368:	3001      	adds	r0, #1
 800136a:	d101      	bne.n	8001370 <sbrk_aligned+0x38>
 800136c:	f04f 34ff 	mov.w	r4, #4294967295
 8001370:	4620      	mov	r0, r4
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	20000a3c 	.word	0x20000a3c

08001378 <_malloc_r>:
 8001378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800137c:	1ccd      	adds	r5, r1, #3
 800137e:	f025 0503 	bic.w	r5, r5, #3
 8001382:	3508      	adds	r5, #8
 8001384:	2d0c      	cmp	r5, #12
 8001386:	bf38      	it	cc
 8001388:	250c      	movcc	r5, #12
 800138a:	2d00      	cmp	r5, #0
 800138c:	4607      	mov	r7, r0
 800138e:	db01      	blt.n	8001394 <_malloc_r+0x1c>
 8001390:	42a9      	cmp	r1, r5
 8001392:	d905      	bls.n	80013a0 <_malloc_r+0x28>
 8001394:	230c      	movs	r3, #12
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	2600      	movs	r6, #0
 800139a:	4630      	mov	r0, r6
 800139c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001474 <_malloc_r+0xfc>
 80013a4:	f000 f868 	bl	8001478 <__malloc_lock>
 80013a8:	f8d8 3000 	ldr.w	r3, [r8]
 80013ac:	461c      	mov	r4, r3
 80013ae:	bb5c      	cbnz	r4, 8001408 <_malloc_r+0x90>
 80013b0:	4629      	mov	r1, r5
 80013b2:	4638      	mov	r0, r7
 80013b4:	f7ff ffc0 	bl	8001338 <sbrk_aligned>
 80013b8:	1c43      	adds	r3, r0, #1
 80013ba:	4604      	mov	r4, r0
 80013bc:	d155      	bne.n	800146a <_malloc_r+0xf2>
 80013be:	f8d8 4000 	ldr.w	r4, [r8]
 80013c2:	4626      	mov	r6, r4
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d145      	bne.n	8001454 <_malloc_r+0xdc>
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d048      	beq.n	800145e <_malloc_r+0xe6>
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	4631      	mov	r1, r6
 80013d0:	4638      	mov	r0, r7
 80013d2:	eb04 0903 	add.w	r9, r4, r3
 80013d6:	f000 f98d 	bl	80016f4 <_sbrk_r>
 80013da:	4581      	cmp	r9, r0
 80013dc:	d13f      	bne.n	800145e <_malloc_r+0xe6>
 80013de:	6821      	ldr	r1, [r4, #0]
 80013e0:	1a6d      	subs	r5, r5, r1
 80013e2:	4629      	mov	r1, r5
 80013e4:	4638      	mov	r0, r7
 80013e6:	f7ff ffa7 	bl	8001338 <sbrk_aligned>
 80013ea:	3001      	adds	r0, #1
 80013ec:	d037      	beq.n	800145e <_malloc_r+0xe6>
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	442b      	add	r3, r5
 80013f2:	6023      	str	r3, [r4, #0]
 80013f4:	f8d8 3000 	ldr.w	r3, [r8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d038      	beq.n	800146e <_malloc_r+0xf6>
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	42a2      	cmp	r2, r4
 8001400:	d12b      	bne.n	800145a <_malloc_r+0xe2>
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	e00f      	b.n	8001428 <_malloc_r+0xb0>
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	1b52      	subs	r2, r2, r5
 800140c:	d41f      	bmi.n	800144e <_malloc_r+0xd6>
 800140e:	2a0b      	cmp	r2, #11
 8001410:	d917      	bls.n	8001442 <_malloc_r+0xca>
 8001412:	1961      	adds	r1, r4, r5
 8001414:	42a3      	cmp	r3, r4
 8001416:	6025      	str	r5, [r4, #0]
 8001418:	bf18      	it	ne
 800141a:	6059      	strne	r1, [r3, #4]
 800141c:	6863      	ldr	r3, [r4, #4]
 800141e:	bf08      	it	eq
 8001420:	f8c8 1000 	streq.w	r1, [r8]
 8001424:	5162      	str	r2, [r4, r5]
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	4638      	mov	r0, r7
 800142a:	f104 060b 	add.w	r6, r4, #11
 800142e:	f000 f829 	bl	8001484 <__malloc_unlock>
 8001432:	f026 0607 	bic.w	r6, r6, #7
 8001436:	1d23      	adds	r3, r4, #4
 8001438:	1af2      	subs	r2, r6, r3
 800143a:	d0ae      	beq.n	800139a <_malloc_r+0x22>
 800143c:	1b9b      	subs	r3, r3, r6
 800143e:	50a3      	str	r3, [r4, r2]
 8001440:	e7ab      	b.n	800139a <_malloc_r+0x22>
 8001442:	42a3      	cmp	r3, r4
 8001444:	6862      	ldr	r2, [r4, #4]
 8001446:	d1dd      	bne.n	8001404 <_malloc_r+0x8c>
 8001448:	f8c8 2000 	str.w	r2, [r8]
 800144c:	e7ec      	b.n	8001428 <_malloc_r+0xb0>
 800144e:	4623      	mov	r3, r4
 8001450:	6864      	ldr	r4, [r4, #4]
 8001452:	e7ac      	b.n	80013ae <_malloc_r+0x36>
 8001454:	4634      	mov	r4, r6
 8001456:	6876      	ldr	r6, [r6, #4]
 8001458:	e7b4      	b.n	80013c4 <_malloc_r+0x4c>
 800145a:	4613      	mov	r3, r2
 800145c:	e7cc      	b.n	80013f8 <_malloc_r+0x80>
 800145e:	230c      	movs	r3, #12
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4638      	mov	r0, r7
 8001464:	f000 f80e 	bl	8001484 <__malloc_unlock>
 8001468:	e797      	b.n	800139a <_malloc_r+0x22>
 800146a:	6025      	str	r5, [r4, #0]
 800146c:	e7dc      	b.n	8001428 <_malloc_r+0xb0>
 800146e:	605b      	str	r3, [r3, #4]
 8001470:	deff      	udf	#255	; 0xff
 8001472:	bf00      	nop
 8001474:	20000a38 	.word	0x20000a38

08001478 <__malloc_lock>:
 8001478:	4801      	ldr	r0, [pc, #4]	; (8001480 <__malloc_lock+0x8>)
 800147a:	f7ff bef8 	b.w	800126e <__retarget_lock_acquire_recursive>
 800147e:	bf00      	nop
 8001480:	20000a34 	.word	0x20000a34

08001484 <__malloc_unlock>:
 8001484:	4801      	ldr	r0, [pc, #4]	; (800148c <__malloc_unlock+0x8>)
 8001486:	f7ff bef3 	b.w	8001270 <__retarget_lock_release_recursive>
 800148a:	bf00      	nop
 800148c:	20000a34 	.word	0x20000a34

08001490 <__sflush_r>:
 8001490:	898a      	ldrh	r2, [r1, #12]
 8001492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001496:	4605      	mov	r5, r0
 8001498:	0710      	lsls	r0, r2, #28
 800149a:	460c      	mov	r4, r1
 800149c:	d458      	bmi.n	8001550 <__sflush_r+0xc0>
 800149e:	684b      	ldr	r3, [r1, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	dc05      	bgt.n	80014b0 <__sflush_r+0x20>
 80014a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc02      	bgt.n	80014b0 <__sflush_r+0x20>
 80014aa:	2000      	movs	r0, #0
 80014ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d0f9      	beq.n	80014aa <__sflush_r+0x1a>
 80014b6:	2300      	movs	r3, #0
 80014b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014bc:	682f      	ldr	r7, [r5, #0]
 80014be:	6a21      	ldr	r1, [r4, #32]
 80014c0:	602b      	str	r3, [r5, #0]
 80014c2:	d032      	beq.n	800152a <__sflush_r+0x9a>
 80014c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014c6:	89a3      	ldrh	r3, [r4, #12]
 80014c8:	075a      	lsls	r2, r3, #29
 80014ca:	d505      	bpl.n	80014d8 <__sflush_r+0x48>
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	1ac0      	subs	r0, r0, r3
 80014d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014d2:	b10b      	cbz	r3, 80014d8 <__sflush_r+0x48>
 80014d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d6:	1ac0      	subs	r0, r0, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	4602      	mov	r2, r0
 80014dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014de:	6a21      	ldr	r1, [r4, #32]
 80014e0:	4628      	mov	r0, r5
 80014e2:	47b0      	blx	r6
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	89a3      	ldrh	r3, [r4, #12]
 80014e8:	d106      	bne.n	80014f8 <__sflush_r+0x68>
 80014ea:	6829      	ldr	r1, [r5, #0]
 80014ec:	291d      	cmp	r1, #29
 80014ee:	d82b      	bhi.n	8001548 <__sflush_r+0xb8>
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <__sflush_r+0x108>)
 80014f2:	410a      	asrs	r2, r1
 80014f4:	07d6      	lsls	r6, r2, #31
 80014f6:	d427      	bmi.n	8001548 <__sflush_r+0xb8>
 80014f8:	2200      	movs	r2, #0
 80014fa:	6062      	str	r2, [r4, #4]
 80014fc:	04d9      	lsls	r1, r3, #19
 80014fe:	6922      	ldr	r2, [r4, #16]
 8001500:	6022      	str	r2, [r4, #0]
 8001502:	d504      	bpl.n	800150e <__sflush_r+0x7e>
 8001504:	1c42      	adds	r2, r0, #1
 8001506:	d101      	bne.n	800150c <__sflush_r+0x7c>
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	b903      	cbnz	r3, 800150e <__sflush_r+0x7e>
 800150c:	6560      	str	r0, [r4, #84]	; 0x54
 800150e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001510:	602f      	str	r7, [r5, #0]
 8001512:	2900      	cmp	r1, #0
 8001514:	d0c9      	beq.n	80014aa <__sflush_r+0x1a>
 8001516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800151a:	4299      	cmp	r1, r3
 800151c:	d002      	beq.n	8001524 <__sflush_r+0x94>
 800151e:	4628      	mov	r0, r5
 8001520:	f7ff feb6 	bl	8001290 <_free_r>
 8001524:	2000      	movs	r0, #0
 8001526:	6360      	str	r0, [r4, #52]	; 0x34
 8001528:	e7c0      	b.n	80014ac <__sflush_r+0x1c>
 800152a:	2301      	movs	r3, #1
 800152c:	4628      	mov	r0, r5
 800152e:	47b0      	blx	r6
 8001530:	1c41      	adds	r1, r0, #1
 8001532:	d1c8      	bne.n	80014c6 <__sflush_r+0x36>
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0c5      	beq.n	80014c6 <__sflush_r+0x36>
 800153a:	2b1d      	cmp	r3, #29
 800153c:	d001      	beq.n	8001542 <__sflush_r+0xb2>
 800153e:	2b16      	cmp	r3, #22
 8001540:	d101      	bne.n	8001546 <__sflush_r+0xb6>
 8001542:	602f      	str	r7, [r5, #0]
 8001544:	e7b1      	b.n	80014aa <__sflush_r+0x1a>
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154c:	81a3      	strh	r3, [r4, #12]
 800154e:	e7ad      	b.n	80014ac <__sflush_r+0x1c>
 8001550:	690f      	ldr	r7, [r1, #16]
 8001552:	2f00      	cmp	r7, #0
 8001554:	d0a9      	beq.n	80014aa <__sflush_r+0x1a>
 8001556:	0793      	lsls	r3, r2, #30
 8001558:	680e      	ldr	r6, [r1, #0]
 800155a:	bf08      	it	eq
 800155c:	694b      	ldreq	r3, [r1, #20]
 800155e:	600f      	str	r7, [r1, #0]
 8001560:	bf18      	it	ne
 8001562:	2300      	movne	r3, #0
 8001564:	eba6 0807 	sub.w	r8, r6, r7
 8001568:	608b      	str	r3, [r1, #8]
 800156a:	f1b8 0f00 	cmp.w	r8, #0
 800156e:	dd9c      	ble.n	80014aa <__sflush_r+0x1a>
 8001570:	6a21      	ldr	r1, [r4, #32]
 8001572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001574:	4643      	mov	r3, r8
 8001576:	463a      	mov	r2, r7
 8001578:	4628      	mov	r0, r5
 800157a:	47b0      	blx	r6
 800157c:	2800      	cmp	r0, #0
 800157e:	dc06      	bgt.n	800158e <__sflush_r+0xfe>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001586:	81a3      	strh	r3, [r4, #12]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	e78e      	b.n	80014ac <__sflush_r+0x1c>
 800158e:	4407      	add	r7, r0
 8001590:	eba8 0800 	sub.w	r8, r8, r0
 8001594:	e7e9      	b.n	800156a <__sflush_r+0xda>
 8001596:	bf00      	nop
 8001598:	dfbffffe 	.word	0xdfbffffe

0800159c <_fflush_r>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	690b      	ldr	r3, [r1, #16]
 80015a0:	4605      	mov	r5, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	b913      	cbnz	r3, 80015ac <_fflush_r+0x10>
 80015a6:	2500      	movs	r5, #0
 80015a8:	4628      	mov	r0, r5
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
 80015ac:	b118      	cbz	r0, 80015b6 <_fflush_r+0x1a>
 80015ae:	6a03      	ldr	r3, [r0, #32]
 80015b0:	b90b      	cbnz	r3, 80015b6 <_fflush_r+0x1a>
 80015b2:	f7ff fb45 	bl	8000c40 <__sinit>
 80015b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f3      	beq.n	80015a6 <_fflush_r+0xa>
 80015be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015c0:	07d0      	lsls	r0, r2, #31
 80015c2:	d404      	bmi.n	80015ce <_fflush_r+0x32>
 80015c4:	0599      	lsls	r1, r3, #22
 80015c6:	d402      	bmi.n	80015ce <_fflush_r+0x32>
 80015c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015ca:	f7ff fe50 	bl	800126e <__retarget_lock_acquire_recursive>
 80015ce:	4628      	mov	r0, r5
 80015d0:	4621      	mov	r1, r4
 80015d2:	f7ff ff5d 	bl	8001490 <__sflush_r>
 80015d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015d8:	07da      	lsls	r2, r3, #31
 80015da:	4605      	mov	r5, r0
 80015dc:	d4e4      	bmi.n	80015a8 <_fflush_r+0xc>
 80015de:	89a3      	ldrh	r3, [r4, #12]
 80015e0:	059b      	lsls	r3, r3, #22
 80015e2:	d4e1      	bmi.n	80015a8 <_fflush_r+0xc>
 80015e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e6:	f7ff fe43 	bl	8001270 <__retarget_lock_release_recursive>
 80015ea:	e7dd      	b.n	80015a8 <_fflush_r+0xc>

080015ec <__swhatbuf_r>:
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	460c      	mov	r4, r1
 80015f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f4:	2900      	cmp	r1, #0
 80015f6:	b096      	sub	sp, #88	; 0x58
 80015f8:	4615      	mov	r5, r2
 80015fa:	461e      	mov	r6, r3
 80015fc:	da0d      	bge.n	800161a <__swhatbuf_r+0x2e>
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	bf0c      	ite	eq
 800160a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800160e:	2340      	movne	r3, #64	; 0x40
 8001610:	2000      	movs	r0, #0
 8001612:	6031      	str	r1, [r6, #0]
 8001614:	602b      	str	r3, [r5, #0]
 8001616:	b016      	add	sp, #88	; 0x58
 8001618:	bd70      	pop	{r4, r5, r6, pc}
 800161a:	466a      	mov	r2, sp
 800161c:	f000 f848 	bl	80016b0 <_fstat_r>
 8001620:	2800      	cmp	r0, #0
 8001622:	dbec      	blt.n	80015fe <__swhatbuf_r+0x12>
 8001624:	9901      	ldr	r1, [sp, #4]
 8001626:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800162a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800162e:	4259      	negs	r1, r3
 8001630:	4159      	adcs	r1, r3
 8001632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001636:	e7eb      	b.n	8001610 <__swhatbuf_r+0x24>

08001638 <__smakebuf_r>:
 8001638:	898b      	ldrh	r3, [r1, #12]
 800163a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800163c:	079d      	lsls	r5, r3, #30
 800163e:	4606      	mov	r6, r0
 8001640:	460c      	mov	r4, r1
 8001642:	d507      	bpl.n	8001654 <__smakebuf_r+0x1c>
 8001644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	6123      	str	r3, [r4, #16]
 800164c:	2301      	movs	r3, #1
 800164e:	6163      	str	r3, [r4, #20]
 8001650:	b002      	add	sp, #8
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	ab01      	add	r3, sp, #4
 8001656:	466a      	mov	r2, sp
 8001658:	f7ff ffc8 	bl	80015ec <__swhatbuf_r>
 800165c:	9900      	ldr	r1, [sp, #0]
 800165e:	4605      	mov	r5, r0
 8001660:	4630      	mov	r0, r6
 8001662:	f7ff fe89 	bl	8001378 <_malloc_r>
 8001666:	b948      	cbnz	r0, 800167c <__smakebuf_r+0x44>
 8001668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800166c:	059a      	lsls	r2, r3, #22
 800166e:	d4ef      	bmi.n	8001650 <__smakebuf_r+0x18>
 8001670:	f023 0303 	bic.w	r3, r3, #3
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	e7e3      	b.n	8001644 <__smakebuf_r+0xc>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	6020      	str	r0, [r4, #0]
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	81a3      	strh	r3, [r4, #12]
 8001686:	9b00      	ldr	r3, [sp, #0]
 8001688:	6163      	str	r3, [r4, #20]
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	6120      	str	r0, [r4, #16]
 800168e:	b15b      	cbz	r3, 80016a8 <__smakebuf_r+0x70>
 8001690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001694:	4630      	mov	r0, r6
 8001696:	f000 f81d 	bl	80016d4 <_isatty_r>
 800169a:	b128      	cbz	r0, 80016a8 <__smakebuf_r+0x70>
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	81a3      	strh	r3, [r4, #12]
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	431d      	orrs	r5, r3
 80016ac:	81a5      	strh	r5, [r4, #12]
 80016ae:	e7cf      	b.n	8001650 <__smakebuf_r+0x18>

080016b0 <_fstat_r>:
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4d07      	ldr	r5, [pc, #28]	; (80016d0 <_fstat_r+0x20>)
 80016b4:	2300      	movs	r3, #0
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	602b      	str	r3, [r5, #0]
 80016be:	f7fe ff51 	bl	8000564 <_fstat>
 80016c2:	1c43      	adds	r3, r0, #1
 80016c4:	d102      	bne.n	80016cc <_fstat_r+0x1c>
 80016c6:	682b      	ldr	r3, [r5, #0]
 80016c8:	b103      	cbz	r3, 80016cc <_fstat_r+0x1c>
 80016ca:	6023      	str	r3, [r4, #0]
 80016cc:	bd38      	pop	{r3, r4, r5, pc}
 80016ce:	bf00      	nop
 80016d0:	20000a30 	.word	0x20000a30

080016d4 <_isatty_r>:
 80016d4:	b538      	push	{r3, r4, r5, lr}
 80016d6:	4d06      	ldr	r5, [pc, #24]	; (80016f0 <_isatty_r+0x1c>)
 80016d8:	2300      	movs	r3, #0
 80016da:	4604      	mov	r4, r0
 80016dc:	4608      	mov	r0, r1
 80016de:	602b      	str	r3, [r5, #0]
 80016e0:	f7fe ff50 	bl	8000584 <_isatty>
 80016e4:	1c43      	adds	r3, r0, #1
 80016e6:	d102      	bne.n	80016ee <_isatty_r+0x1a>
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	b103      	cbz	r3, 80016ee <_isatty_r+0x1a>
 80016ec:	6023      	str	r3, [r4, #0]
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	20000a30 	.word	0x20000a30

080016f4 <_sbrk_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4d06      	ldr	r5, [pc, #24]	; (8001710 <_sbrk_r+0x1c>)
 80016f8:	2300      	movs	r3, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	602b      	str	r3, [r5, #0]
 8001700:	f7fe ff58 	bl	80005b4 <_sbrk>
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	d102      	bne.n	800170e <_sbrk_r+0x1a>
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	b103      	cbz	r3, 800170e <_sbrk_r+0x1a>
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	bd38      	pop	{r3, r4, r5, pc}
 8001710:	20000a30 	.word	0x20000a30

08001714 <_init>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr

08001720 <_fini>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr
