
mac-daddies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ffc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a4  080011a4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080011a4  080011a4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a4  080011a4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a8  080011a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080011ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000064  08001210  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001210  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016de  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006dd  00000000  00000000  000217b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011d  00000000  00000000  00022038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b29  00000000  00000000  00022155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020b5  00000000  00000000  00025c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bf94  00000000  00000000  00027d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bd0  00000000  00000000  00033cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00034898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800117c 	.word	0x0800117c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	0800117c 	.word	0x0800117c

080001d8 <channel_monitor_init>:
/*
 * TODO:
 * - Implement fudge factor (error%) for 1.1ms
 * - Implement channel monitor leds
 */
void channel_monitor_init(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	ld2_init();
 80001dc:	f000 f8c8 	bl	8000370 <ld2_init>
	tim4_init();
 80001e0:	f000 f802 	bl	80001e8 <tim4_init>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <tim4_init>:

// channel 1: tic
// channel 2: toc
void tim4_init(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

	/* PB6 is the input pin for TIC on TIM4_CH1 */
	rcc->AHB1ENR |= GPIOB_EN;			// enable GPIOB in RCC
 80001ec:	4b33      	ldr	r3, [pc, #204]	; (80002bc <tim4_init+0xd4>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a32      	ldr	r2, [pc, #200]	; (80002bc <tim4_init+0xd4>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	gpiob->AFRL  |= (0b0010 << 6 * 4); 	// PB6 is AF02 (TIM4_CH1)
 80001f8:	4b31      	ldr	r3, [pc, #196]	; (80002c0 <tim4_init+0xd8>)
 80001fa:	6a1b      	ldr	r3, [r3, #32]
 80001fc:	4a30      	ldr	r2, [pc, #192]	; (80002c0 <tim4_init+0xd8>)
 80001fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000202:	6213      	str	r3, [r2, #32]
	gpiob->MODER |= (0b10 << 6*2);
 8000204:	4b2e      	ldr	r3, [pc, #184]	; (80002c0 <tim4_init+0xd8>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a2d      	ldr	r2, [pc, #180]	; (80002c0 <tim4_init+0xd8>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	6013      	str	r3, [r2, #0]

	/* TIM4 setup */
	rcc->APB1ENR |= TIM4_EN;			// enable TIM4 in RCC
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <tim4_init+0xd4>)
 8000212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000214:	4a29      	ldr	r2, [pc, #164]	; (80002bc <tim4_init+0xd4>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6413      	str	r3, [r2, #64]	; 0x40

	/* configure TIM4_CH1 as TIC */
	tim4->CCMR1  &= ~(0b11 << 0);		// clear CC1S bits
 800021c:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <tim4_init+0xdc>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	699a      	ldr	r2, [r3, #24]
 8000222:	4b28      	ldr	r3, [pc, #160]	; (80002c4 <tim4_init+0xdc>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f022 0203 	bic.w	r2, r2, #3
 800022a:	619a      	str	r2, [r3, #24]
	tim4->CCMR1  |=  (0b01 << 0);		// tim4_ch1 is in input capture mode
 800022c:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <tim4_init+0xdc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	699a      	ldr	r2, [r3, #24]
 8000232:	4b24      	ldr	r3, [pc, #144]	; (80002c4 <tim4_init+0xdc>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f042 0201 	orr.w	r2, r2, #1
 800023a:	619a      	str	r2, [r3, #24]

	tim4->CCER &=  ~(1 << 3 | 1 << 1);	// clear edge config, set to rising
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <tim4_init+0xdc>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	6a1a      	ldr	r2, [r3, #32]
 8000242:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <tim4_init+0xdc>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f022 020a 	bic.w	r2, r2, #10
 800024a:	621a      	str	r2, [r3, #32]
	tim4->CCER |=   (1 << 3 | 1 << 1); 	// trigger TIC on either edge
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <tim4_init+0xdc>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	6a1a      	ldr	r2, [r3, #32]
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <tim4_init+0xdc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f042 020a 	orr.w	r2, r2, #10
 800025a:	621a      	str	r2, [r3, #32]

	/* configure TIM4_CH2 as TOC (just free running with an interrupt */
	tim4->CCMR1 &= ~(0b11 << 8);		// clear CC2S bits, tim4_ch2 is in output mode
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <tim4_init+0xdc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	699a      	ldr	r2, [r3, #24]
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <tim4_init+0xdc>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800026a:	619a      	str	r2, [r3, #24]


	tim4->CCR2 = CYCLES_1_1_MS;
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <tim4_init+0xdc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f244 42c0 	movw	r2, #17600	; 0x44c0
 8000274:	639a      	str	r2, [r3, #56]	; 0x38
//	CC1 channel configured as input:
//	This bit determines if a capture of the counter value can actually be done into the input
//	capture/compare register 1 (TIMx_CCR1) or not.
//	0: Capture disabled
//	1: Capture enabled
	tim4->CCER |= (0b01 << 0); // enable input capture
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <tim4_init+0xdc>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	6a1a      	ldr	r2, [r3, #32]
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <tim4_init+0xdc>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f042 0201 	orr.w	r2, r2, #1
 8000284:	621a      	str	r2, [r3, #32]
	tim4->DIER |= 0b11 << 1;   // enable TIC interrupts
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <tim4_init+0xdc>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	68da      	ldr	r2, [r3, #12]
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <tim4_init+0xdc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f042 0206 	orr.w	r2, r2, #6
 8000294:	60da      	str	r2, [r3, #12]

	nvic_iser[0] |= (1 << 30); // TIM4 global interrupt is in NVIC_ISER0[30]
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <tim4_init+0xe0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <tim4_init+0xe0>)
 800029c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002a0:	6013      	str	r3, [r2, #0]
	tim4->CR1 |= 1; // start the timer
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <tim4_init+0xdc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <tim4_init+0xdc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f042 0201 	orr.w	r2, r2, #1
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020400 	.word	0x40020400
 80002c4:	20000000 	.word	0x20000000
 80002c8:	e000e100 	.word	0xe000e100

080002cc <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	static channel_state state = IDLE;
	tim4->DIER &= ~(0b11 << 1);  // reset CC1IE (Interrupt enable)
 80002d2:	4b24      	ldr	r3, [pc, #144]	; (8000364 <TIM4_IRQHandler+0x98>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <TIM4_IRQHandler+0x98>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f022 0206 	bic.w	r2, r2, #6
 80002e0:	60da      	str	r2, [r3, #12]
	/* interrupt body */


	uint32_t status = tim4->SR;				// read the status register
 80002e2:	4b20      	ldr	r3, [pc, #128]	; (8000364 <TIM4_IRQHandler+0x98>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	60fb      	str	r3, [r7, #12]
	tim4->SR = 0; 	        				// clear all flags
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <TIM4_IRQHandler+0x98>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
	uint32_t tic = (status >> 1) & 0b01; // 1 if from tic
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	085b      	lsrs	r3, r3, #1
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
	uint32_t toc = (status >> 2) & 0b01; // 1 if from toc
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	089b      	lsrs	r3, r3, #2
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	607b      	str	r3, [r7, #4]

	if(tic) {
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d007      	beq.n	800031c <TIM4_IRQHandler+0x50>
		tim4->CNT = 0;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <TIM4_IRQHandler+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2200      	movs	r2, #0
 8000312:	625a      	str	r2, [r3, #36]	; 0x24
		state = BUSY;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <TIM4_IRQHandler+0x9c>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e012      	b.n	8000342 <TIM4_IRQHandler+0x76>
	} else if(toc) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d00f      	beq.n	8000342 <TIM4_IRQHandler+0x76>
		int line_state = (gpiob->IDR >> 6) & 0b01;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <TIM4_IRQHandler+0xa0>)
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	099b      	lsrs	r3, r3, #6
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	603b      	str	r3, [r7, #0]
		if(line_state) {
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <TIM4_IRQHandler+0x70>
			state = IDLE;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <TIM4_IRQHandler+0x9c>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	e002      	b.n	8000342 <TIM4_IRQHandler+0x76>
		} else {
			state = COLLISION;
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <TIM4_IRQHandler+0x9c>)
 800033e:	2202      	movs	r2, #2
 8000340:	701a      	strb	r2, [r3, #0]
		}
	}

	monitor_led_set(state);
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <TIM4_IRQHandler+0x9c>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f82a 	bl	80003a0 <monitor_led_set>
	tim4->DIER |= 0b11 << 1;  // enable interrupts
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <TIM4_IRQHandler+0x98>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	68da      	ldr	r2, [r3, #12]
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <TIM4_IRQHandler+0x98>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f042 0206 	orr.w	r2, r2, #6
 800035a:	60da      	str	r2, [r3, #12]
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000000 	.word	0x20000000
 8000368:	20000004 	.word	0x20000004
 800036c:	40020400 	.word	0x40020400

08000370 <ld2_init>:

void ld2_init() {
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	rcc->AHB1ENR |= GPIOA_EN;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <ld2_init+0x28>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a07      	ldr	r2, [pc, #28]	; (8000398 <ld2_init+0x28>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
	gpioa->MODER |= (0b01 << 5 * 2);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <ld2_init+0x2c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <ld2_init+0x2c>)
 8000386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800
 800039c:	40020000 	.word	0x40020000

080003a0 <monitor_led_set>:
}

void monitor_led_init() {
	// TODO;
}
void monitor_led_set(channel_state state) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	// TODO:
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	init_usart2(57600,F_CPU);
 80003bc:	4905      	ldr	r1, [pc, #20]	; (80003d4 <main+0x1c>)
 80003be:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 80003c2:	f000 f8f7 	bl	80005b4 <init_usart2>


	channel_monitor_init();
 80003c6:	f7ff ff07 	bl	80001d8 <channel_monitor_init>
	printf("Hello World!\n");
 80003ca:	4803      	ldr	r0, [pc, #12]	; (80003d8 <main+0x20>)
 80003cc:	f000 fa8a 	bl	80008e4 <puts>

    /* Loop forever */
	while(1) {
 80003d0:	e7fe      	b.n	80003d0 <main+0x18>
 80003d2:	bf00      	nop
 80003d4:	00f42400 	.word	0x00f42400
 80003d8:	08001194 	.word	0x08001194

080003dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000404:	605a      	str	r2, [r3, #4]
  return 0;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <_isatty>:

int _isatty(int file)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800041c:	2301      	movs	r3, #1
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800042a:	b480      	push	{r7}
 800042c:	b085      	sub	sp, #20
 800042e:	af00      	add	r7, sp, #0
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 fc12 	bl	8000c9c <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20020000 	.word	0x20020000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	20000080 	.word	0x20000080
 80004ac:	200001d0 	.word	0x200001d0

080004b0 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e012      	b.n	80004ec <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	3301      	adds	r3, #1
 80004ca:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80004cc:	f000 f836 	bl	800053c <usart2_getch>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b0a      	cmp	r3, #10
 80004de:	d00a      	beq.n	80004f6 <_read+0x46>
		ptr++;
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbe8      	blt.n	80004c6 <_read+0x16>
 80004f4:	e000      	b.n	80004f8 <_read+0x48>
		if(*ptr == '\n') break;
 80004f6:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 80004f8:	693b      	ldr	r3, [r7, #16]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_write>:

int _write(int file, char *ptr, int len)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e009      	b.n	8000528 <_write+0x26>
	{
		usart2_putch(*ptr++);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f82f 	bl	8000580 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf1      	blt.n	8000514 <_write+0x12>
	}
	return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <usart2_getch>:



char usart2_getch(){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8000542:	bf00      	nop
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <usart2_getch+0x3c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	2b20      	cmp	r3, #32
 800054e:	d1f9      	bne.n	8000544 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <usart2_getch+0x40>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f811 	bl	8000580 <usart2_putch>

	if (c == '\r'){  // If character is CR
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b0d      	cmp	r3, #13
 8000562:	d104      	bne.n	800056e <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 8000564:	200a      	movs	r0, #10
 8000566:	f000 f80b 	bl	8000580 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 800056a:	230a      	movs	r3, #10
 800056c:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 800056e:	79fb      	ldrb	r3, [r7, #7]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40004400 	.word	0x40004400
 800057c:	40004404 	.word	0x40004404

08000580 <usart2_putch>:

void usart2_putch(char c){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 800058a:	bf00      	nop
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <usart2_putch+0x2c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000594:	2b80      	cmp	r3, #128	; 0x80
 8000596:	d1f9      	bne.n	800058c <usart2_putch+0xc>
	*(USART_DR) = c;
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <usart2_putch+0x30>)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40004400 	.word	0x40004400
 80005b0:	40004404 	.word	0x40004404

080005b4 <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <init_usart2+0x8c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <init_usart2+0x8c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <init_usart2+0x90>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <init_usart2+0x90>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <init_usart2+0x94>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <init_usart2+0x94>)
 80005dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005e0:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <init_usart2+0x94>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <init_usart2+0x94>)
 80005e8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005ec:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <init_usart2+0x98>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <init_usart2+0x98>)
 80005f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005f8:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <init_usart2+0x98>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <init_usart2+0x98>)
 8000600:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000604:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <init_usart2+0x9c>)
 8000608:	f242 020c 	movw	r2, #8204	; 0x200c
 800060c:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <init_usart2+0xa0>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <init_usart2+0xa4>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 800061a:	4910      	ldr	r1, [pc, #64]	; (800065c <init_usart2+0xa8>)
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	fbb2 f3f3 	udiv	r3, r2, r3
 8000624:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <init_usart2+0xac>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6898      	ldr	r0, [r3, #8]
 800062c:	2300      	movs	r3, #0
 800062e:	2202      	movs	r2, #2
 8000630:	2100      	movs	r1, #0
 8000632:	f000 f95f 	bl	80008f4 <setvbuf>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023830 	.word	0x40023830
 8000644:	40023840 	.word	0x40023840
 8000648:	40020020 	.word	0x40020020
 800064c:	40020000 	.word	0x40020000
 8000650:	4000440c 	.word	0x4000440c
 8000654:	40004410 	.word	0x40004410
 8000658:	40004414 	.word	0x40004414
 800065c:	40004408 	.word	0x40004408
 8000660:	20000060 	.word	0x20000060

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 fb09 	bl	8000ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fe8f 	bl	80003b8 <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006a8:	080011ac 	.word	0x080011ac
  ldr r2, =_sbss
 80006ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b0:	200001d0 	.word	0x200001d0

080006b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>
	...

080006b8 <std>:
 80006b8:	2300      	movs	r3, #0
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	e9c0 3300 	strd	r3, r3, [r0]
 80006c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006c6:	6083      	str	r3, [r0, #8]
 80006c8:	8181      	strh	r1, [r0, #12]
 80006ca:	6643      	str	r3, [r0, #100]	; 0x64
 80006cc:	81c2      	strh	r2, [r0, #14]
 80006ce:	6183      	str	r3, [r0, #24]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2208      	movs	r2, #8
 80006d4:	305c      	adds	r0, #92	; 0x5c
 80006d6:	f000 fa93 	bl	8000c00 <memset>
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <std+0x58>)
 80006dc:	6263      	str	r3, [r4, #36]	; 0x24
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <std+0x5c>)
 80006e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <std+0x60>)
 80006e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <std+0x64>)
 80006e8:	6323      	str	r3, [r4, #48]	; 0x30
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <std+0x68>)
 80006ec:	6224      	str	r4, [r4, #32]
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d006      	beq.n	8000700 <std+0x48>
 80006f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006f6:	4294      	cmp	r4, r2
 80006f8:	d002      	beq.n	8000700 <std+0x48>
 80006fa:	33d0      	adds	r3, #208	; 0xd0
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d105      	bne.n	800070c <std+0x54>
 8000700:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000708:	f000 baf2 	b.w	8000cf0 <__retarget_lock_init_recursive>
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop
 8000710:	08000a51 	.word	0x08000a51
 8000714:	08000a73 	.word	0x08000a73
 8000718:	08000aab 	.word	0x08000aab
 800071c:	08000acf 	.word	0x08000acf
 8000720:	20000084 	.word	0x20000084

08000724 <stdio_exit_handler>:
 8000724:	4a02      	ldr	r2, [pc, #8]	; (8000730 <stdio_exit_handler+0xc>)
 8000726:	4903      	ldr	r1, [pc, #12]	; (8000734 <stdio_exit_handler+0x10>)
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <stdio_exit_handler+0x14>)
 800072a:	f000 b869 	b.w	8000800 <_fwalk_sglue>
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	08001005 	.word	0x08001005
 8000738:	20000014 	.word	0x20000014

0800073c <cleanup_stdio>:
 800073c:	6841      	ldr	r1, [r0, #4]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <cleanup_stdio+0x34>)
 8000740:	4299      	cmp	r1, r3
 8000742:	b510      	push	{r4, lr}
 8000744:	4604      	mov	r4, r0
 8000746:	d001      	beq.n	800074c <cleanup_stdio+0x10>
 8000748:	f000 fc5c 	bl	8001004 <_fflush_r>
 800074c:	68a1      	ldr	r1, [r4, #8]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <cleanup_stdio+0x38>)
 8000750:	4299      	cmp	r1, r3
 8000752:	d002      	beq.n	800075a <cleanup_stdio+0x1e>
 8000754:	4620      	mov	r0, r4
 8000756:	f000 fc55 	bl	8001004 <_fflush_r>
 800075a:	68e1      	ldr	r1, [r4, #12]
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <cleanup_stdio+0x3c>)
 800075e:	4299      	cmp	r1, r3
 8000760:	d004      	beq.n	800076c <cleanup_stdio+0x30>
 8000762:	4620      	mov	r0, r4
 8000764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000768:	f000 bc4c 	b.w	8001004 <_fflush_r>
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	20000084 	.word	0x20000084
 8000774:	200000ec 	.word	0x200000ec
 8000778:	20000154 	.word	0x20000154

0800077c <global_stdio_init.part.0>:
 800077c:	b510      	push	{r4, lr}
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <global_stdio_init.part.0+0x30>)
 8000780:	4c0b      	ldr	r4, [pc, #44]	; (80007b0 <global_stdio_init.part.0+0x34>)
 8000782:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <global_stdio_init.part.0+0x38>)
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	4620      	mov	r0, r4
 8000788:	2200      	movs	r2, #0
 800078a:	2104      	movs	r1, #4
 800078c:	f7ff ff94 	bl	80006b8 <std>
 8000790:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000794:	2201      	movs	r2, #1
 8000796:	2109      	movs	r1, #9
 8000798:	f7ff ff8e 	bl	80006b8 <std>
 800079c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007a0:	2202      	movs	r2, #2
 80007a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a6:	2112      	movs	r1, #18
 80007a8:	f7ff bf86 	b.w	80006b8 <std>
 80007ac:	200001bc 	.word	0x200001bc
 80007b0:	20000084 	.word	0x20000084
 80007b4:	08000725 	.word	0x08000725

080007b8 <__sfp_lock_acquire>:
 80007b8:	4801      	ldr	r0, [pc, #4]	; (80007c0 <__sfp_lock_acquire+0x8>)
 80007ba:	f000 ba9a 	b.w	8000cf2 <__retarget_lock_acquire_recursive>
 80007be:	bf00      	nop
 80007c0:	200001c5 	.word	0x200001c5

080007c4 <__sfp_lock_release>:
 80007c4:	4801      	ldr	r0, [pc, #4]	; (80007cc <__sfp_lock_release+0x8>)
 80007c6:	f000 ba95 	b.w	8000cf4 <__retarget_lock_release_recursive>
 80007ca:	bf00      	nop
 80007cc:	200001c5 	.word	0x200001c5

080007d0 <__sinit>:
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	f7ff fff0 	bl	80007b8 <__sfp_lock_acquire>
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	b11b      	cbz	r3, 80007e4 <__sinit+0x14>
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e0:	f7ff bff0 	b.w	80007c4 <__sfp_lock_release>
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__sinit+0x28>)
 80007e6:	6223      	str	r3, [r4, #32]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__sinit+0x2c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f5      	bne.n	80007dc <__sinit+0xc>
 80007f0:	f7ff ffc4 	bl	800077c <global_stdio_init.part.0>
 80007f4:	e7f2      	b.n	80007dc <__sinit+0xc>
 80007f6:	bf00      	nop
 80007f8:	0800073d 	.word	0x0800073d
 80007fc:	200001bc 	.word	0x200001bc

08000800 <_fwalk_sglue>:
 8000800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000804:	4607      	mov	r7, r0
 8000806:	4688      	mov	r8, r1
 8000808:	4614      	mov	r4, r2
 800080a:	2600      	movs	r6, #0
 800080c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000810:	f1b9 0901 	subs.w	r9, r9, #1
 8000814:	d505      	bpl.n	8000822 <_fwalk_sglue+0x22>
 8000816:	6824      	ldr	r4, [r4, #0]
 8000818:	2c00      	cmp	r4, #0
 800081a:	d1f7      	bne.n	800080c <_fwalk_sglue+0xc>
 800081c:	4630      	mov	r0, r6
 800081e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000822:	89ab      	ldrh	r3, [r5, #12]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d907      	bls.n	8000838 <_fwalk_sglue+0x38>
 8000828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800082c:	3301      	adds	r3, #1
 800082e:	d003      	beq.n	8000838 <_fwalk_sglue+0x38>
 8000830:	4629      	mov	r1, r5
 8000832:	4638      	mov	r0, r7
 8000834:	47c0      	blx	r8
 8000836:	4306      	orrs	r6, r0
 8000838:	3568      	adds	r5, #104	; 0x68
 800083a:	e7e9      	b.n	8000810 <_fwalk_sglue+0x10>

0800083c <_puts_r>:
 800083c:	6a03      	ldr	r3, [r0, #32]
 800083e:	b570      	push	{r4, r5, r6, lr}
 8000840:	6884      	ldr	r4, [r0, #8]
 8000842:	4605      	mov	r5, r0
 8000844:	460e      	mov	r6, r1
 8000846:	b90b      	cbnz	r3, 800084c <_puts_r+0x10>
 8000848:	f7ff ffc2 	bl	80007d0 <__sinit>
 800084c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800084e:	07db      	lsls	r3, r3, #31
 8000850:	d405      	bmi.n	800085e <_puts_r+0x22>
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	0598      	lsls	r0, r3, #22
 8000856:	d402      	bmi.n	800085e <_puts_r+0x22>
 8000858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800085a:	f000 fa4a 	bl	8000cf2 <__retarget_lock_acquire_recursive>
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	0719      	lsls	r1, r3, #28
 8000862:	d513      	bpl.n	800088c <_puts_r+0x50>
 8000864:	6923      	ldr	r3, [r4, #16]
 8000866:	b18b      	cbz	r3, 800088c <_puts_r+0x50>
 8000868:	3e01      	subs	r6, #1
 800086a:	68a3      	ldr	r3, [r4, #8]
 800086c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000870:	3b01      	subs	r3, #1
 8000872:	60a3      	str	r3, [r4, #8]
 8000874:	b9e9      	cbnz	r1, 80008b2 <_puts_r+0x76>
 8000876:	2b00      	cmp	r3, #0
 8000878:	da2e      	bge.n	80008d8 <_puts_r+0x9c>
 800087a:	4622      	mov	r2, r4
 800087c:	210a      	movs	r1, #10
 800087e:	4628      	mov	r0, r5
 8000880:	f000 f929 	bl	8000ad6 <__swbuf_r>
 8000884:	3001      	adds	r0, #1
 8000886:	d007      	beq.n	8000898 <_puts_r+0x5c>
 8000888:	250a      	movs	r5, #10
 800088a:	e007      	b.n	800089c <_puts_r+0x60>
 800088c:	4621      	mov	r1, r4
 800088e:	4628      	mov	r0, r5
 8000890:	f000 f95e 	bl	8000b50 <__swsetup_r>
 8000894:	2800      	cmp	r0, #0
 8000896:	d0e7      	beq.n	8000868 <_puts_r+0x2c>
 8000898:	f04f 35ff 	mov.w	r5, #4294967295
 800089c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800089e:	07da      	lsls	r2, r3, #31
 80008a0:	d405      	bmi.n	80008ae <_puts_r+0x72>
 80008a2:	89a3      	ldrh	r3, [r4, #12]
 80008a4:	059b      	lsls	r3, r3, #22
 80008a6:	d402      	bmi.n	80008ae <_puts_r+0x72>
 80008a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008aa:	f000 fa23 	bl	8000cf4 <__retarget_lock_release_recursive>
 80008ae:	4628      	mov	r0, r5
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da04      	bge.n	80008c0 <_puts_r+0x84>
 80008b6:	69a2      	ldr	r2, [r4, #24]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dc06      	bgt.n	80008ca <_puts_r+0x8e>
 80008bc:	290a      	cmp	r1, #10
 80008be:	d004      	beq.n	80008ca <_puts_r+0x8e>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	6022      	str	r2, [r4, #0]
 80008c6:	7019      	strb	r1, [r3, #0]
 80008c8:	e7cf      	b.n	800086a <_puts_r+0x2e>
 80008ca:	4622      	mov	r2, r4
 80008cc:	4628      	mov	r0, r5
 80008ce:	f000 f902 	bl	8000ad6 <__swbuf_r>
 80008d2:	3001      	adds	r0, #1
 80008d4:	d1c9      	bne.n	800086a <_puts_r+0x2e>
 80008d6:	e7df      	b.n	8000898 <_puts_r+0x5c>
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	250a      	movs	r5, #10
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	6022      	str	r2, [r4, #0]
 80008e0:	701d      	strb	r5, [r3, #0]
 80008e2:	e7db      	b.n	800089c <_puts_r+0x60>

080008e4 <puts>:
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <puts+0xc>)
 80008e6:	4601      	mov	r1, r0
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	f7ff bfa7 	b.w	800083c <_puts_r>
 80008ee:	bf00      	nop
 80008f0:	20000060 	.word	0x20000060

080008f4 <setvbuf>:
 80008f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80008f8:	461d      	mov	r5, r3
 80008fa:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <setvbuf+0x158>)
 80008fc:	681f      	ldr	r7, [r3, #0]
 80008fe:	4604      	mov	r4, r0
 8000900:	460e      	mov	r6, r1
 8000902:	4690      	mov	r8, r2
 8000904:	b127      	cbz	r7, 8000910 <setvbuf+0x1c>
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	b913      	cbnz	r3, 8000910 <setvbuf+0x1c>
 800090a:	4638      	mov	r0, r7
 800090c:	f7ff ff60 	bl	80007d0 <__sinit>
 8000910:	f1b8 0f02 	cmp.w	r8, #2
 8000914:	d006      	beq.n	8000924 <setvbuf+0x30>
 8000916:	f1b8 0f01 	cmp.w	r8, #1
 800091a:	f200 8094 	bhi.w	8000a46 <setvbuf+0x152>
 800091e:	2d00      	cmp	r5, #0
 8000920:	f2c0 8091 	blt.w	8000a46 <setvbuf+0x152>
 8000924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000926:	07da      	lsls	r2, r3, #31
 8000928:	d405      	bmi.n	8000936 <setvbuf+0x42>
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	059b      	lsls	r3, r3, #22
 800092e:	d402      	bmi.n	8000936 <setvbuf+0x42>
 8000930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000932:	f000 f9de 	bl	8000cf2 <__retarget_lock_acquire_recursive>
 8000936:	4621      	mov	r1, r4
 8000938:	4638      	mov	r0, r7
 800093a:	f000 fb63 	bl	8001004 <_fflush_r>
 800093e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000940:	b141      	cbz	r1, 8000954 <setvbuf+0x60>
 8000942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000946:	4299      	cmp	r1, r3
 8000948:	d002      	beq.n	8000950 <setvbuf+0x5c>
 800094a:	4638      	mov	r0, r7
 800094c:	f000 f9d4 	bl	8000cf8 <_free_r>
 8000950:	2300      	movs	r3, #0
 8000952:	6363      	str	r3, [r4, #52]	; 0x34
 8000954:	2300      	movs	r3, #0
 8000956:	61a3      	str	r3, [r4, #24]
 8000958:	6063      	str	r3, [r4, #4]
 800095a:	89a3      	ldrh	r3, [r4, #12]
 800095c:	0618      	lsls	r0, r3, #24
 800095e:	d503      	bpl.n	8000968 <setvbuf+0x74>
 8000960:	6921      	ldr	r1, [r4, #16]
 8000962:	4638      	mov	r0, r7
 8000964:	f000 f9c8 	bl	8000cf8 <_free_r>
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800096e:	f023 0303 	bic.w	r3, r3, #3
 8000972:	f1b8 0f02 	cmp.w	r8, #2
 8000976:	81a3      	strh	r3, [r4, #12]
 8000978:	d05f      	beq.n	8000a3a <setvbuf+0x146>
 800097a:	ab01      	add	r3, sp, #4
 800097c:	466a      	mov	r2, sp
 800097e:	4621      	mov	r1, r4
 8000980:	4638      	mov	r0, r7
 8000982:	f000 fb67 	bl	8001054 <__swhatbuf_r>
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	4318      	orrs	r0, r3
 800098a:	81a0      	strh	r0, [r4, #12]
 800098c:	bb2d      	cbnz	r5, 80009da <setvbuf+0xe6>
 800098e:	9d00      	ldr	r5, [sp, #0]
 8000990:	4628      	mov	r0, r5
 8000992:	f000 f9fd 	bl	8000d90 <malloc>
 8000996:	4606      	mov	r6, r0
 8000998:	2800      	cmp	r0, #0
 800099a:	d150      	bne.n	8000a3e <setvbuf+0x14a>
 800099c:	f8dd 9000 	ldr.w	r9, [sp]
 80009a0:	45a9      	cmp	r9, r5
 80009a2:	d13e      	bne.n	8000a22 <setvbuf+0x12e>
 80009a4:	f04f 35ff 	mov.w	r5, #4294967295
 80009a8:	2200      	movs	r2, #0
 80009aa:	60a2      	str	r2, [r4, #8]
 80009ac:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80009b0:	6022      	str	r2, [r4, #0]
 80009b2:	6122      	str	r2, [r4, #16]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009ba:	6162      	str	r2, [r4, #20]
 80009bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	07d1      	lsls	r1, r2, #31
 80009c4:	81a3      	strh	r3, [r4, #12]
 80009c6:	d404      	bmi.n	80009d2 <setvbuf+0xde>
 80009c8:	059b      	lsls	r3, r3, #22
 80009ca:	d402      	bmi.n	80009d2 <setvbuf+0xde>
 80009cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ce:	f000 f991 	bl	8000cf4 <__retarget_lock_release_recursive>
 80009d2:	4628      	mov	r0, r5
 80009d4:	b003      	add	sp, #12
 80009d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d0d8      	beq.n	8000990 <setvbuf+0x9c>
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	b913      	cbnz	r3, 80009e8 <setvbuf+0xf4>
 80009e2:	4638      	mov	r0, r7
 80009e4:	f7ff fef4 	bl	80007d0 <__sinit>
 80009e8:	f1b8 0f01 	cmp.w	r8, #1
 80009ec:	bf08      	it	eq
 80009ee:	89a3      	ldrheq	r3, [r4, #12]
 80009f0:	6026      	str	r6, [r4, #0]
 80009f2:	bf04      	itt	eq
 80009f4:	f043 0301 	orreq.w	r3, r3, #1
 80009f8:	81a3      	strheq	r3, [r4, #12]
 80009fa:	89a3      	ldrh	r3, [r4, #12]
 80009fc:	f013 0208 	ands.w	r2, r3, #8
 8000a00:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8000a04:	d01d      	beq.n	8000a42 <setvbuf+0x14e>
 8000a06:	07da      	lsls	r2, r3, #31
 8000a08:	bf41      	itttt	mi
 8000a0a:	2200      	movmi	r2, #0
 8000a0c:	426d      	negmi	r5, r5
 8000a0e:	60a2      	strmi	r2, [r4, #8]
 8000a10:	61a5      	strmi	r5, [r4, #24]
 8000a12:	bf58      	it	pl
 8000a14:	60a5      	strpl	r5, [r4, #8]
 8000a16:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8000a18:	f015 0501 	ands.w	r5, r5, #1
 8000a1c:	d0d4      	beq.n	80009c8 <setvbuf+0xd4>
 8000a1e:	2500      	movs	r5, #0
 8000a20:	e7d7      	b.n	80009d2 <setvbuf+0xde>
 8000a22:	4648      	mov	r0, r9
 8000a24:	f000 f9b4 	bl	8000d90 <malloc>
 8000a28:	4606      	mov	r6, r0
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d0ba      	beq.n	80009a4 <setvbuf+0xb0>
 8000a2e:	89a3      	ldrh	r3, [r4, #12]
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	81a3      	strh	r3, [r4, #12]
 8000a36:	464d      	mov	r5, r9
 8000a38:	e7d1      	b.n	80009de <setvbuf+0xea>
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	e7b4      	b.n	80009a8 <setvbuf+0xb4>
 8000a3e:	46a9      	mov	r9, r5
 8000a40:	e7f5      	b.n	8000a2e <setvbuf+0x13a>
 8000a42:	60a2      	str	r2, [r4, #8]
 8000a44:	e7e7      	b.n	8000a16 <setvbuf+0x122>
 8000a46:	f04f 35ff 	mov.w	r5, #4294967295
 8000a4a:	e7c2      	b.n	80009d2 <setvbuf+0xde>
 8000a4c:	20000060 	.word	0x20000060

08000a50 <__sread>:
 8000a50:	b510      	push	{r4, lr}
 8000a52:	460c      	mov	r4, r1
 8000a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a58:	f000 f8fc 	bl	8000c54 <_read_r>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	bfab      	itete	ge
 8000a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a62:	89a3      	ldrhlt	r3, [r4, #12]
 8000a64:	181b      	addge	r3, r3, r0
 8000a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a6a:	bfac      	ite	ge
 8000a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a6e:	81a3      	strhlt	r3, [r4, #12]
 8000a70:	bd10      	pop	{r4, pc}

08000a72 <__swrite>:
 8000a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a76:	461f      	mov	r7, r3
 8000a78:	898b      	ldrh	r3, [r1, #12]
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	4605      	mov	r5, r0
 8000a7e:	460c      	mov	r4, r1
 8000a80:	4616      	mov	r6, r2
 8000a82:	d505      	bpl.n	8000a90 <__swrite+0x1e>
 8000a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a88:	2302      	movs	r3, #2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f000 f8d0 	bl	8000c30 <_lseek_r>
 8000a90:	89a3      	ldrh	r3, [r4, #12]
 8000a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a9a:	81a3      	strh	r3, [r4, #12]
 8000a9c:	4632      	mov	r2, r6
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa6:	f000 b8e7 	b.w	8000c78 <_write_r>

08000aaa <__sseek>:
 8000aaa:	b510      	push	{r4, lr}
 8000aac:	460c      	mov	r4, r1
 8000aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab2:	f000 f8bd 	bl	8000c30 <_lseek_r>
 8000ab6:	1c43      	adds	r3, r0, #1
 8000ab8:	89a3      	ldrh	r3, [r4, #12]
 8000aba:	bf15      	itete	ne
 8000abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ac6:	81a3      	strheq	r3, [r4, #12]
 8000ac8:	bf18      	it	ne
 8000aca:	81a3      	strhne	r3, [r4, #12]
 8000acc:	bd10      	pop	{r4, pc}

08000ace <__sclose>:
 8000ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ad2:	f000 b89d 	b.w	8000c10 <_close_r>

08000ad6 <__swbuf_r>:
 8000ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad8:	460e      	mov	r6, r1
 8000ada:	4614      	mov	r4, r2
 8000adc:	4605      	mov	r5, r0
 8000ade:	b118      	cbz	r0, 8000ae8 <__swbuf_r+0x12>
 8000ae0:	6a03      	ldr	r3, [r0, #32]
 8000ae2:	b90b      	cbnz	r3, 8000ae8 <__swbuf_r+0x12>
 8000ae4:	f7ff fe74 	bl	80007d0 <__sinit>
 8000ae8:	69a3      	ldr	r3, [r4, #24]
 8000aea:	60a3      	str	r3, [r4, #8]
 8000aec:	89a3      	ldrh	r3, [r4, #12]
 8000aee:	071a      	lsls	r2, r3, #28
 8000af0:	d525      	bpl.n	8000b3e <__swbuf_r+0x68>
 8000af2:	6923      	ldr	r3, [r4, #16]
 8000af4:	b31b      	cbz	r3, 8000b3e <__swbuf_r+0x68>
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	6922      	ldr	r2, [r4, #16]
 8000afa:	1a98      	subs	r0, r3, r2
 8000afc:	6963      	ldr	r3, [r4, #20]
 8000afe:	b2f6      	uxtb	r6, r6
 8000b00:	4283      	cmp	r3, r0
 8000b02:	4637      	mov	r7, r6
 8000b04:	dc04      	bgt.n	8000b10 <__swbuf_r+0x3a>
 8000b06:	4621      	mov	r1, r4
 8000b08:	4628      	mov	r0, r5
 8000b0a:	f000 fa7b 	bl	8001004 <_fflush_r>
 8000b0e:	b9e0      	cbnz	r0, 8000b4a <__swbuf_r+0x74>
 8000b10:	68a3      	ldr	r3, [r4, #8]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	60a3      	str	r3, [r4, #8]
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	1c5a      	adds	r2, r3, #1
 8000b1a:	6022      	str	r2, [r4, #0]
 8000b1c:	701e      	strb	r6, [r3, #0]
 8000b1e:	6962      	ldr	r2, [r4, #20]
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d004      	beq.n	8000b30 <__swbuf_r+0x5a>
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	07db      	lsls	r3, r3, #31
 8000b2a:	d506      	bpl.n	8000b3a <__swbuf_r+0x64>
 8000b2c:	2e0a      	cmp	r6, #10
 8000b2e:	d104      	bne.n	8000b3a <__swbuf_r+0x64>
 8000b30:	4621      	mov	r1, r4
 8000b32:	4628      	mov	r0, r5
 8000b34:	f000 fa66 	bl	8001004 <_fflush_r>
 8000b38:	b938      	cbnz	r0, 8000b4a <__swbuf_r+0x74>
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 f805 	bl	8000b50 <__swsetup_r>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d0d5      	beq.n	8000af6 <__swbuf_r+0x20>
 8000b4a:	f04f 37ff 	mov.w	r7, #4294967295
 8000b4e:	e7f4      	b.n	8000b3a <__swbuf_r+0x64>

08000b50 <__swsetup_r>:
 8000b50:	b538      	push	{r3, r4, r5, lr}
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <__swsetup_r+0xac>)
 8000b54:	4605      	mov	r5, r0
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	460c      	mov	r4, r1
 8000b5a:	b118      	cbz	r0, 8000b64 <__swsetup_r+0x14>
 8000b5c:	6a03      	ldr	r3, [r0, #32]
 8000b5e:	b90b      	cbnz	r3, 8000b64 <__swsetup_r+0x14>
 8000b60:	f7ff fe36 	bl	80007d0 <__sinit>
 8000b64:	89a3      	ldrh	r3, [r4, #12]
 8000b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b6a:	0718      	lsls	r0, r3, #28
 8000b6c:	d422      	bmi.n	8000bb4 <__swsetup_r+0x64>
 8000b6e:	06d9      	lsls	r1, r3, #27
 8000b70:	d407      	bmi.n	8000b82 <__swsetup_r+0x32>
 8000b72:	2309      	movs	r3, #9
 8000b74:	602b      	str	r3, [r5, #0]
 8000b76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b7a:	81a3      	strh	r3, [r4, #12]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	e034      	b.n	8000bec <__swsetup_r+0x9c>
 8000b82:	0758      	lsls	r0, r3, #29
 8000b84:	d512      	bpl.n	8000bac <__swsetup_r+0x5c>
 8000b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b88:	b141      	cbz	r1, 8000b9c <__swsetup_r+0x4c>
 8000b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d002      	beq.n	8000b98 <__swsetup_r+0x48>
 8000b92:	4628      	mov	r0, r5
 8000b94:	f000 f8b0 	bl	8000cf8 <_free_r>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6363      	str	r3, [r4, #52]	; 0x34
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ba2:	81a3      	strh	r3, [r4, #12]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	6063      	str	r3, [r4, #4]
 8000ba8:	6923      	ldr	r3, [r4, #16]
 8000baa:	6023      	str	r3, [r4, #0]
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	81a3      	strh	r3, [r4, #12]
 8000bb4:	6923      	ldr	r3, [r4, #16]
 8000bb6:	b94b      	cbnz	r3, 8000bcc <__swsetup_r+0x7c>
 8000bb8:	89a3      	ldrh	r3, [r4, #12]
 8000bba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc2:	d003      	beq.n	8000bcc <__swsetup_r+0x7c>
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	f000 fa6a 	bl	80010a0 <__smakebuf_r>
 8000bcc:	89a0      	ldrh	r0, [r4, #12]
 8000bce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bd2:	f010 0301 	ands.w	r3, r0, #1
 8000bd6:	d00a      	beq.n	8000bee <__swsetup_r+0x9e>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60a3      	str	r3, [r4, #8]
 8000bdc:	6963      	ldr	r3, [r4, #20]
 8000bde:	425b      	negs	r3, r3
 8000be0:	61a3      	str	r3, [r4, #24]
 8000be2:	6923      	ldr	r3, [r4, #16]
 8000be4:	b943      	cbnz	r3, 8000bf8 <__swsetup_r+0xa8>
 8000be6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bea:	d1c4      	bne.n	8000b76 <__swsetup_r+0x26>
 8000bec:	bd38      	pop	{r3, r4, r5, pc}
 8000bee:	0781      	lsls	r1, r0, #30
 8000bf0:	bf58      	it	pl
 8000bf2:	6963      	ldrpl	r3, [r4, #20]
 8000bf4:	60a3      	str	r3, [r4, #8]
 8000bf6:	e7f4      	b.n	8000be2 <__swsetup_r+0x92>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	e7f7      	b.n	8000bec <__swsetup_r+0x9c>
 8000bfc:	20000060 	.word	0x20000060

08000c00 <memset>:
 8000c00:	4402      	add	r2, r0
 8000c02:	4603      	mov	r3, r0
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d100      	bne.n	8000c0a <memset+0xa>
 8000c08:	4770      	bx	lr
 8000c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c0e:	e7f9      	b.n	8000c04 <memset+0x4>

08000c10 <_close_r>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	4d06      	ldr	r5, [pc, #24]	; (8000c2c <_close_r+0x1c>)
 8000c14:	2300      	movs	r3, #0
 8000c16:	4604      	mov	r4, r0
 8000c18:	4608      	mov	r0, r1
 8000c1a:	602b      	str	r3, [r5, #0]
 8000c1c:	f7ff fbde 	bl	80003dc <_close>
 8000c20:	1c43      	adds	r3, r0, #1
 8000c22:	d102      	bne.n	8000c2a <_close_r+0x1a>
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	b103      	cbz	r3, 8000c2a <_close_r+0x1a>
 8000c28:	6023      	str	r3, [r4, #0]
 8000c2a:	bd38      	pop	{r3, r4, r5, pc}
 8000c2c:	200001c0 	.word	0x200001c0

08000c30 <_lseek_r>:
 8000c30:	b538      	push	{r3, r4, r5, lr}
 8000c32:	4d07      	ldr	r5, [pc, #28]	; (8000c50 <_lseek_r+0x20>)
 8000c34:	4604      	mov	r4, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4611      	mov	r1, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	602a      	str	r2, [r5, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f7ff fbf3 	bl	800042a <_lseek>
 8000c44:	1c43      	adds	r3, r0, #1
 8000c46:	d102      	bne.n	8000c4e <_lseek_r+0x1e>
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	b103      	cbz	r3, 8000c4e <_lseek_r+0x1e>
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	bd38      	pop	{r3, r4, r5, pc}
 8000c50:	200001c0 	.word	0x200001c0

08000c54 <_read_r>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	4d07      	ldr	r5, [pc, #28]	; (8000c74 <_read_r+0x20>)
 8000c58:	4604      	mov	r4, r0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	2200      	movs	r2, #0
 8000c60:	602a      	str	r2, [r5, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	f7ff fc24 	bl	80004b0 <_read>
 8000c68:	1c43      	adds	r3, r0, #1
 8000c6a:	d102      	bne.n	8000c72 <_read_r+0x1e>
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	b103      	cbz	r3, 8000c72 <_read_r+0x1e>
 8000c70:	6023      	str	r3, [r4, #0]
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
 8000c74:	200001c0 	.word	0x200001c0

08000c78 <_write_r>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	4d07      	ldr	r5, [pc, #28]	; (8000c98 <_write_r+0x20>)
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	4611      	mov	r1, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	602a      	str	r2, [r5, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f7ff fc3b 	bl	8000502 <_write>
 8000c8c:	1c43      	adds	r3, r0, #1
 8000c8e:	d102      	bne.n	8000c96 <_write_r+0x1e>
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	b103      	cbz	r3, 8000c96 <_write_r+0x1e>
 8000c94:	6023      	str	r3, [r4, #0]
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
 8000c98:	200001c0 	.word	0x200001c0

08000c9c <__errno>:
 8000c9c:	4b01      	ldr	r3, [pc, #4]	; (8000ca4 <__errno+0x8>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000060 	.word	0x20000060

08000ca8 <__libc_init_array>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4d0d      	ldr	r5, [pc, #52]	; (8000ce0 <__libc_init_array+0x38>)
 8000cac:	4c0d      	ldr	r4, [pc, #52]	; (8000ce4 <__libc_init_array+0x3c>)
 8000cae:	1b64      	subs	r4, r4, r5
 8000cb0:	10a4      	asrs	r4, r4, #2
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	42a6      	cmp	r6, r4
 8000cb6:	d109      	bne.n	8000ccc <__libc_init_array+0x24>
 8000cb8:	4d0b      	ldr	r5, [pc, #44]	; (8000ce8 <__libc_init_array+0x40>)
 8000cba:	4c0c      	ldr	r4, [pc, #48]	; (8000cec <__libc_init_array+0x44>)
 8000cbc:	f000 fa5e 	bl	800117c <_init>
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	10a4      	asrs	r4, r4, #2
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	42a6      	cmp	r6, r4
 8000cc8:	d105      	bne.n	8000cd6 <__libc_init_array+0x2e>
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
 8000ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd0:	4798      	blx	r3
 8000cd2:	3601      	adds	r6, #1
 8000cd4:	e7ee      	b.n	8000cb4 <__libc_init_array+0xc>
 8000cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cda:	4798      	blx	r3
 8000cdc:	3601      	adds	r6, #1
 8000cde:	e7f2      	b.n	8000cc6 <__libc_init_array+0x1e>
 8000ce0:	080011a4 	.word	0x080011a4
 8000ce4:	080011a4 	.word	0x080011a4
 8000ce8:	080011a4 	.word	0x080011a4
 8000cec:	080011a8 	.word	0x080011a8

08000cf0 <__retarget_lock_init_recursive>:
 8000cf0:	4770      	bx	lr

08000cf2 <__retarget_lock_acquire_recursive>:
 8000cf2:	4770      	bx	lr

08000cf4 <__retarget_lock_release_recursive>:
 8000cf4:	4770      	bx	lr
	...

08000cf8 <_free_r>:
 8000cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d044      	beq.n	8000d88 <_free_r+0x90>
 8000cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d02:	9001      	str	r0, [sp, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f1a1 0404 	sub.w	r4, r1, #4
 8000d0a:	bfb8      	it	lt
 8000d0c:	18e4      	addlt	r4, r4, r3
 8000d0e:	f000 f8e7 	bl	8000ee0 <__malloc_lock>
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <_free_r+0x94>)
 8000d14:	9801      	ldr	r0, [sp, #4]
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	b933      	cbnz	r3, 8000d28 <_free_r+0x30>
 8000d1a:	6063      	str	r3, [r4, #4]
 8000d1c:	6014      	str	r4, [r2, #0]
 8000d1e:	b003      	add	sp, #12
 8000d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d24:	f000 b8e2 	b.w	8000eec <__malloc_unlock>
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	d908      	bls.n	8000d3e <_free_r+0x46>
 8000d2c:	6825      	ldr	r5, [r4, #0]
 8000d2e:	1961      	adds	r1, r4, r5
 8000d30:	428b      	cmp	r3, r1
 8000d32:	bf01      	itttt	eq
 8000d34:	6819      	ldreq	r1, [r3, #0]
 8000d36:	685b      	ldreq	r3, [r3, #4]
 8000d38:	1949      	addeq	r1, r1, r5
 8000d3a:	6021      	streq	r1, [r4, #0]
 8000d3c:	e7ed      	b.n	8000d1a <_free_r+0x22>
 8000d3e:	461a      	mov	r2, r3
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	b10b      	cbz	r3, 8000d48 <_free_r+0x50>
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d9fa      	bls.n	8000d3e <_free_r+0x46>
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	1855      	adds	r5, r2, r1
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	d10b      	bne.n	8000d68 <_free_r+0x70>
 8000d50:	6824      	ldr	r4, [r4, #0]
 8000d52:	4421      	add	r1, r4
 8000d54:	1854      	adds	r4, r2, r1
 8000d56:	42a3      	cmp	r3, r4
 8000d58:	6011      	str	r1, [r2, #0]
 8000d5a:	d1e0      	bne.n	8000d1e <_free_r+0x26>
 8000d5c:	681c      	ldr	r4, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	6053      	str	r3, [r2, #4]
 8000d62:	440c      	add	r4, r1
 8000d64:	6014      	str	r4, [r2, #0]
 8000d66:	e7da      	b.n	8000d1e <_free_r+0x26>
 8000d68:	d902      	bls.n	8000d70 <_free_r+0x78>
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	6003      	str	r3, [r0, #0]
 8000d6e:	e7d6      	b.n	8000d1e <_free_r+0x26>
 8000d70:	6825      	ldr	r5, [r4, #0]
 8000d72:	1961      	adds	r1, r4, r5
 8000d74:	428b      	cmp	r3, r1
 8000d76:	bf04      	itt	eq
 8000d78:	6819      	ldreq	r1, [r3, #0]
 8000d7a:	685b      	ldreq	r3, [r3, #4]
 8000d7c:	6063      	str	r3, [r4, #4]
 8000d7e:	bf04      	itt	eq
 8000d80:	1949      	addeq	r1, r1, r5
 8000d82:	6021      	streq	r1, [r4, #0]
 8000d84:	6054      	str	r4, [r2, #4]
 8000d86:	e7ca      	b.n	8000d1e <_free_r+0x26>
 8000d88:	b003      	add	sp, #12
 8000d8a:	bd30      	pop	{r4, r5, pc}
 8000d8c:	200001c8 	.word	0x200001c8

08000d90 <malloc>:
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <malloc+0xc>)
 8000d92:	4601      	mov	r1, r0
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f000 b823 	b.w	8000de0 <_malloc_r>
 8000d9a:	bf00      	nop
 8000d9c:	20000060 	.word	0x20000060

08000da0 <sbrk_aligned>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	4e0e      	ldr	r6, [pc, #56]	; (8000ddc <sbrk_aligned+0x3c>)
 8000da4:	460c      	mov	r4, r1
 8000da6:	6831      	ldr	r1, [r6, #0]
 8000da8:	4605      	mov	r5, r0
 8000daa:	b911      	cbnz	r1, 8000db2 <sbrk_aligned+0x12>
 8000dac:	f000 f9d6 	bl	800115c <_sbrk_r>
 8000db0:	6030      	str	r0, [r6, #0]
 8000db2:	4621      	mov	r1, r4
 8000db4:	4628      	mov	r0, r5
 8000db6:	f000 f9d1 	bl	800115c <_sbrk_r>
 8000dba:	1c43      	adds	r3, r0, #1
 8000dbc:	d00a      	beq.n	8000dd4 <sbrk_aligned+0x34>
 8000dbe:	1cc4      	adds	r4, r0, #3
 8000dc0:	f024 0403 	bic.w	r4, r4, #3
 8000dc4:	42a0      	cmp	r0, r4
 8000dc6:	d007      	beq.n	8000dd8 <sbrk_aligned+0x38>
 8000dc8:	1a21      	subs	r1, r4, r0
 8000dca:	4628      	mov	r0, r5
 8000dcc:	f000 f9c6 	bl	800115c <_sbrk_r>
 8000dd0:	3001      	adds	r0, #1
 8000dd2:	d101      	bne.n	8000dd8 <sbrk_aligned+0x38>
 8000dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8000dd8:	4620      	mov	r0, r4
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
 8000ddc:	200001cc 	.word	0x200001cc

08000de0 <_malloc_r>:
 8000de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de4:	1ccd      	adds	r5, r1, #3
 8000de6:	f025 0503 	bic.w	r5, r5, #3
 8000dea:	3508      	adds	r5, #8
 8000dec:	2d0c      	cmp	r5, #12
 8000dee:	bf38      	it	cc
 8000df0:	250c      	movcc	r5, #12
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	4607      	mov	r7, r0
 8000df6:	db01      	blt.n	8000dfc <_malloc_r+0x1c>
 8000df8:	42a9      	cmp	r1, r5
 8000dfa:	d905      	bls.n	8000e08 <_malloc_r+0x28>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	2600      	movs	r6, #0
 8000e02:	4630      	mov	r0, r6
 8000e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000edc <_malloc_r+0xfc>
 8000e0c:	f000 f868 	bl	8000ee0 <__malloc_lock>
 8000e10:	f8d8 3000 	ldr.w	r3, [r8]
 8000e14:	461c      	mov	r4, r3
 8000e16:	bb5c      	cbnz	r4, 8000e70 <_malloc_r+0x90>
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	f7ff ffc0 	bl	8000da0 <sbrk_aligned>
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	4604      	mov	r4, r0
 8000e24:	d155      	bne.n	8000ed2 <_malloc_r+0xf2>
 8000e26:	f8d8 4000 	ldr.w	r4, [r8]
 8000e2a:	4626      	mov	r6, r4
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d145      	bne.n	8000ebc <_malloc_r+0xdc>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d048      	beq.n	8000ec6 <_malloc_r+0xe6>
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	4631      	mov	r1, r6
 8000e38:	4638      	mov	r0, r7
 8000e3a:	eb04 0903 	add.w	r9, r4, r3
 8000e3e:	f000 f98d 	bl	800115c <_sbrk_r>
 8000e42:	4581      	cmp	r9, r0
 8000e44:	d13f      	bne.n	8000ec6 <_malloc_r+0xe6>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	1a6d      	subs	r5, r5, r1
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	f7ff ffa7 	bl	8000da0 <sbrk_aligned>
 8000e52:	3001      	adds	r0, #1
 8000e54:	d037      	beq.n	8000ec6 <_malloc_r+0xe6>
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	442b      	add	r3, r5
 8000e5a:	6023      	str	r3, [r4, #0]
 8000e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d038      	beq.n	8000ed6 <_malloc_r+0xf6>
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	42a2      	cmp	r2, r4
 8000e68:	d12b      	bne.n	8000ec2 <_malloc_r+0xe2>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	e00f      	b.n	8000e90 <_malloc_r+0xb0>
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	1b52      	subs	r2, r2, r5
 8000e74:	d41f      	bmi.n	8000eb6 <_malloc_r+0xd6>
 8000e76:	2a0b      	cmp	r2, #11
 8000e78:	d917      	bls.n	8000eaa <_malloc_r+0xca>
 8000e7a:	1961      	adds	r1, r4, r5
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	6025      	str	r5, [r4, #0]
 8000e80:	bf18      	it	ne
 8000e82:	6059      	strne	r1, [r3, #4]
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	bf08      	it	eq
 8000e88:	f8c8 1000 	streq.w	r1, [r8]
 8000e8c:	5162      	str	r2, [r4, r5]
 8000e8e:	604b      	str	r3, [r1, #4]
 8000e90:	4638      	mov	r0, r7
 8000e92:	f104 060b 	add.w	r6, r4, #11
 8000e96:	f000 f829 	bl	8000eec <__malloc_unlock>
 8000e9a:	f026 0607 	bic.w	r6, r6, #7
 8000e9e:	1d23      	adds	r3, r4, #4
 8000ea0:	1af2      	subs	r2, r6, r3
 8000ea2:	d0ae      	beq.n	8000e02 <_malloc_r+0x22>
 8000ea4:	1b9b      	subs	r3, r3, r6
 8000ea6:	50a3      	str	r3, [r4, r2]
 8000ea8:	e7ab      	b.n	8000e02 <_malloc_r+0x22>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	6862      	ldr	r2, [r4, #4]
 8000eae:	d1dd      	bne.n	8000e6c <_malloc_r+0x8c>
 8000eb0:	f8c8 2000 	str.w	r2, [r8]
 8000eb4:	e7ec      	b.n	8000e90 <_malloc_r+0xb0>
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	6864      	ldr	r4, [r4, #4]
 8000eba:	e7ac      	b.n	8000e16 <_malloc_r+0x36>
 8000ebc:	4634      	mov	r4, r6
 8000ebe:	6876      	ldr	r6, [r6, #4]
 8000ec0:	e7b4      	b.n	8000e2c <_malloc_r+0x4c>
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	e7cc      	b.n	8000e60 <_malloc_r+0x80>
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4638      	mov	r0, r7
 8000ecc:	f000 f80e 	bl	8000eec <__malloc_unlock>
 8000ed0:	e797      	b.n	8000e02 <_malloc_r+0x22>
 8000ed2:	6025      	str	r5, [r4, #0]
 8000ed4:	e7dc      	b.n	8000e90 <_malloc_r+0xb0>
 8000ed6:	605b      	str	r3, [r3, #4]
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	bf00      	nop
 8000edc:	200001c8 	.word	0x200001c8

08000ee0 <__malloc_lock>:
 8000ee0:	4801      	ldr	r0, [pc, #4]	; (8000ee8 <__malloc_lock+0x8>)
 8000ee2:	f7ff bf06 	b.w	8000cf2 <__retarget_lock_acquire_recursive>
 8000ee6:	bf00      	nop
 8000ee8:	200001c4 	.word	0x200001c4

08000eec <__malloc_unlock>:
 8000eec:	4801      	ldr	r0, [pc, #4]	; (8000ef4 <__malloc_unlock+0x8>)
 8000eee:	f7ff bf01 	b.w	8000cf4 <__retarget_lock_release_recursive>
 8000ef2:	bf00      	nop
 8000ef4:	200001c4 	.word	0x200001c4

08000ef8 <__sflush_r>:
 8000ef8:	898a      	ldrh	r2, [r1, #12]
 8000efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000efe:	4605      	mov	r5, r0
 8000f00:	0710      	lsls	r0, r2, #28
 8000f02:	460c      	mov	r4, r1
 8000f04:	d458      	bmi.n	8000fb8 <__sflush_r+0xc0>
 8000f06:	684b      	ldr	r3, [r1, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dc05      	bgt.n	8000f18 <__sflush_r+0x20>
 8000f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dc02      	bgt.n	8000f18 <__sflush_r+0x20>
 8000f12:	2000      	movs	r0, #0
 8000f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	d0f9      	beq.n	8000f12 <__sflush_r+0x1a>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f24:	682f      	ldr	r7, [r5, #0]
 8000f26:	6a21      	ldr	r1, [r4, #32]
 8000f28:	602b      	str	r3, [r5, #0]
 8000f2a:	d032      	beq.n	8000f92 <__sflush_r+0x9a>
 8000f2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f2e:	89a3      	ldrh	r3, [r4, #12]
 8000f30:	075a      	lsls	r2, r3, #29
 8000f32:	d505      	bpl.n	8000f40 <__sflush_r+0x48>
 8000f34:	6863      	ldr	r3, [r4, #4]
 8000f36:	1ac0      	subs	r0, r0, r3
 8000f38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f3a:	b10b      	cbz	r3, 8000f40 <__sflush_r+0x48>
 8000f3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f3e:	1ac0      	subs	r0, r0, r3
 8000f40:	2300      	movs	r3, #0
 8000f42:	4602      	mov	r2, r0
 8000f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f46:	6a21      	ldr	r1, [r4, #32]
 8000f48:	4628      	mov	r0, r5
 8000f4a:	47b0      	blx	r6
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	89a3      	ldrh	r3, [r4, #12]
 8000f50:	d106      	bne.n	8000f60 <__sflush_r+0x68>
 8000f52:	6829      	ldr	r1, [r5, #0]
 8000f54:	291d      	cmp	r1, #29
 8000f56:	d82b      	bhi.n	8000fb0 <__sflush_r+0xb8>
 8000f58:	4a29      	ldr	r2, [pc, #164]	; (8001000 <__sflush_r+0x108>)
 8000f5a:	410a      	asrs	r2, r1
 8000f5c:	07d6      	lsls	r6, r2, #31
 8000f5e:	d427      	bmi.n	8000fb0 <__sflush_r+0xb8>
 8000f60:	2200      	movs	r2, #0
 8000f62:	6062      	str	r2, [r4, #4]
 8000f64:	04d9      	lsls	r1, r3, #19
 8000f66:	6922      	ldr	r2, [r4, #16]
 8000f68:	6022      	str	r2, [r4, #0]
 8000f6a:	d504      	bpl.n	8000f76 <__sflush_r+0x7e>
 8000f6c:	1c42      	adds	r2, r0, #1
 8000f6e:	d101      	bne.n	8000f74 <__sflush_r+0x7c>
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	b903      	cbnz	r3, 8000f76 <__sflush_r+0x7e>
 8000f74:	6560      	str	r0, [r4, #84]	; 0x54
 8000f76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f78:	602f      	str	r7, [r5, #0]
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	d0c9      	beq.n	8000f12 <__sflush_r+0x1a>
 8000f7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f82:	4299      	cmp	r1, r3
 8000f84:	d002      	beq.n	8000f8c <__sflush_r+0x94>
 8000f86:	4628      	mov	r0, r5
 8000f88:	f7ff feb6 	bl	8000cf8 <_free_r>
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	6360      	str	r0, [r4, #52]	; 0x34
 8000f90:	e7c0      	b.n	8000f14 <__sflush_r+0x1c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	4628      	mov	r0, r5
 8000f96:	47b0      	blx	r6
 8000f98:	1c41      	adds	r1, r0, #1
 8000f9a:	d1c8      	bne.n	8000f2e <__sflush_r+0x36>
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0c5      	beq.n	8000f2e <__sflush_r+0x36>
 8000fa2:	2b1d      	cmp	r3, #29
 8000fa4:	d001      	beq.n	8000faa <__sflush_r+0xb2>
 8000fa6:	2b16      	cmp	r3, #22
 8000fa8:	d101      	bne.n	8000fae <__sflush_r+0xb6>
 8000faa:	602f      	str	r7, [r5, #0]
 8000fac:	e7b1      	b.n	8000f12 <__sflush_r+0x1a>
 8000fae:	89a3      	ldrh	r3, [r4, #12]
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	81a3      	strh	r3, [r4, #12]
 8000fb6:	e7ad      	b.n	8000f14 <__sflush_r+0x1c>
 8000fb8:	690f      	ldr	r7, [r1, #16]
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	d0a9      	beq.n	8000f12 <__sflush_r+0x1a>
 8000fbe:	0793      	lsls	r3, r2, #30
 8000fc0:	680e      	ldr	r6, [r1, #0]
 8000fc2:	bf08      	it	eq
 8000fc4:	694b      	ldreq	r3, [r1, #20]
 8000fc6:	600f      	str	r7, [r1, #0]
 8000fc8:	bf18      	it	ne
 8000fca:	2300      	movne	r3, #0
 8000fcc:	eba6 0807 	sub.w	r8, r6, r7
 8000fd0:	608b      	str	r3, [r1, #8]
 8000fd2:	f1b8 0f00 	cmp.w	r8, #0
 8000fd6:	dd9c      	ble.n	8000f12 <__sflush_r+0x1a>
 8000fd8:	6a21      	ldr	r1, [r4, #32]
 8000fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000fdc:	4643      	mov	r3, r8
 8000fde:	463a      	mov	r2, r7
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	47b0      	blx	r6
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	dc06      	bgt.n	8000ff6 <__sflush_r+0xfe>
 8000fe8:	89a3      	ldrh	r3, [r4, #12]
 8000fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fee:	81a3      	strh	r3, [r4, #12]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	e78e      	b.n	8000f14 <__sflush_r+0x1c>
 8000ff6:	4407      	add	r7, r0
 8000ff8:	eba8 0800 	sub.w	r8, r8, r0
 8000ffc:	e7e9      	b.n	8000fd2 <__sflush_r+0xda>
 8000ffe:	bf00      	nop
 8001000:	dfbffffe 	.word	0xdfbffffe

08001004 <_fflush_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	690b      	ldr	r3, [r1, #16]
 8001008:	4605      	mov	r5, r0
 800100a:	460c      	mov	r4, r1
 800100c:	b913      	cbnz	r3, 8001014 <_fflush_r+0x10>
 800100e:	2500      	movs	r5, #0
 8001010:	4628      	mov	r0, r5
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	b118      	cbz	r0, 800101e <_fflush_r+0x1a>
 8001016:	6a03      	ldr	r3, [r0, #32]
 8001018:	b90b      	cbnz	r3, 800101e <_fflush_r+0x1a>
 800101a:	f7ff fbd9 	bl	80007d0 <__sinit>
 800101e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f3      	beq.n	800100e <_fflush_r+0xa>
 8001026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001028:	07d0      	lsls	r0, r2, #31
 800102a:	d404      	bmi.n	8001036 <_fflush_r+0x32>
 800102c:	0599      	lsls	r1, r3, #22
 800102e:	d402      	bmi.n	8001036 <_fflush_r+0x32>
 8001030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001032:	f7ff fe5e 	bl	8000cf2 <__retarget_lock_acquire_recursive>
 8001036:	4628      	mov	r0, r5
 8001038:	4621      	mov	r1, r4
 800103a:	f7ff ff5d 	bl	8000ef8 <__sflush_r>
 800103e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001040:	07da      	lsls	r2, r3, #31
 8001042:	4605      	mov	r5, r0
 8001044:	d4e4      	bmi.n	8001010 <_fflush_r+0xc>
 8001046:	89a3      	ldrh	r3, [r4, #12]
 8001048:	059b      	lsls	r3, r3, #22
 800104a:	d4e1      	bmi.n	8001010 <_fflush_r+0xc>
 800104c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800104e:	f7ff fe51 	bl	8000cf4 <__retarget_lock_release_recursive>
 8001052:	e7dd      	b.n	8001010 <_fflush_r+0xc>

08001054 <__swhatbuf_r>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	460c      	mov	r4, r1
 8001058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800105c:	2900      	cmp	r1, #0
 800105e:	b096      	sub	sp, #88	; 0x58
 8001060:	4615      	mov	r5, r2
 8001062:	461e      	mov	r6, r3
 8001064:	da0d      	bge.n	8001082 <__swhatbuf_r+0x2e>
 8001066:	89a3      	ldrh	r3, [r4, #12]
 8001068:	f013 0f80 	tst.w	r3, #128	; 0x80
 800106c:	f04f 0100 	mov.w	r1, #0
 8001070:	bf0c      	ite	eq
 8001072:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001076:	2340      	movne	r3, #64	; 0x40
 8001078:	2000      	movs	r0, #0
 800107a:	6031      	str	r1, [r6, #0]
 800107c:	602b      	str	r3, [r5, #0]
 800107e:	b016      	add	sp, #88	; 0x58
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	466a      	mov	r2, sp
 8001084:	f000 f848 	bl	8001118 <_fstat_r>
 8001088:	2800      	cmp	r0, #0
 800108a:	dbec      	blt.n	8001066 <__swhatbuf_r+0x12>
 800108c:	9901      	ldr	r1, [sp, #4]
 800108e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001092:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001096:	4259      	negs	r1, r3
 8001098:	4159      	adcs	r1, r3
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	e7eb      	b.n	8001078 <__swhatbuf_r+0x24>

080010a0 <__smakebuf_r>:
 80010a0:	898b      	ldrh	r3, [r1, #12]
 80010a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80010a4:	079d      	lsls	r5, r3, #30
 80010a6:	4606      	mov	r6, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	d507      	bpl.n	80010bc <__smakebuf_r+0x1c>
 80010ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	6123      	str	r3, [r4, #16]
 80010b4:	2301      	movs	r3, #1
 80010b6:	6163      	str	r3, [r4, #20]
 80010b8:	b002      	add	sp, #8
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	ab01      	add	r3, sp, #4
 80010be:	466a      	mov	r2, sp
 80010c0:	f7ff ffc8 	bl	8001054 <__swhatbuf_r>
 80010c4:	9900      	ldr	r1, [sp, #0]
 80010c6:	4605      	mov	r5, r0
 80010c8:	4630      	mov	r0, r6
 80010ca:	f7ff fe89 	bl	8000de0 <_malloc_r>
 80010ce:	b948      	cbnz	r0, 80010e4 <__smakebuf_r+0x44>
 80010d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010d4:	059a      	lsls	r2, r3, #22
 80010d6:	d4ef      	bmi.n	80010b8 <__smakebuf_r+0x18>
 80010d8:	f023 0303 	bic.w	r3, r3, #3
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	81a3      	strh	r3, [r4, #12]
 80010e2:	e7e3      	b.n	80010ac <__smakebuf_r+0xc>
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	6020      	str	r0, [r4, #0]
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	81a3      	strh	r3, [r4, #12]
 80010ee:	9b00      	ldr	r3, [sp, #0]
 80010f0:	6163      	str	r3, [r4, #20]
 80010f2:	9b01      	ldr	r3, [sp, #4]
 80010f4:	6120      	str	r0, [r4, #16]
 80010f6:	b15b      	cbz	r3, 8001110 <__smakebuf_r+0x70>
 80010f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010fc:	4630      	mov	r0, r6
 80010fe:	f000 f81d 	bl	800113c <_isatty_r>
 8001102:	b128      	cbz	r0, 8001110 <__smakebuf_r+0x70>
 8001104:	89a3      	ldrh	r3, [r4, #12]
 8001106:	f023 0303 	bic.w	r3, r3, #3
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	81a3      	strh	r3, [r4, #12]
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	431d      	orrs	r5, r3
 8001114:	81a5      	strh	r5, [r4, #12]
 8001116:	e7cf      	b.n	80010b8 <__smakebuf_r+0x18>

08001118 <_fstat_r>:
 8001118:	b538      	push	{r3, r4, r5, lr}
 800111a:	4d07      	ldr	r5, [pc, #28]	; (8001138 <_fstat_r+0x20>)
 800111c:	2300      	movs	r3, #0
 800111e:	4604      	mov	r4, r0
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	f7ff f965 	bl	80003f4 <_fstat>
 800112a:	1c43      	adds	r3, r0, #1
 800112c:	d102      	bne.n	8001134 <_fstat_r+0x1c>
 800112e:	682b      	ldr	r3, [r5, #0]
 8001130:	b103      	cbz	r3, 8001134 <_fstat_r+0x1c>
 8001132:	6023      	str	r3, [r4, #0]
 8001134:	bd38      	pop	{r3, r4, r5, pc}
 8001136:	bf00      	nop
 8001138:	200001c0 	.word	0x200001c0

0800113c <_isatty_r>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4d06      	ldr	r5, [pc, #24]	; (8001158 <_isatty_r+0x1c>)
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	4608      	mov	r0, r1
 8001146:	602b      	str	r3, [r5, #0]
 8001148:	f7ff f964 	bl	8000414 <_isatty>
 800114c:	1c43      	adds	r3, r0, #1
 800114e:	d102      	bne.n	8001156 <_isatty_r+0x1a>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	b103      	cbz	r3, 8001156 <_isatty_r+0x1a>
 8001154:	6023      	str	r3, [r4, #0]
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	200001c0 	.word	0x200001c0

0800115c <_sbrk_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4d06      	ldr	r5, [pc, #24]	; (8001178 <_sbrk_r+0x1c>)
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	602b      	str	r3, [r5, #0]
 8001168:	f7ff f96c 	bl	8000444 <_sbrk>
 800116c:	1c43      	adds	r3, r0, #1
 800116e:	d102      	bne.n	8001176 <_sbrk_r+0x1a>
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	b103      	cbz	r3, 8001176 <_sbrk_r+0x1a>
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	200001c0 	.word	0x200001c0

0800117c <_init>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	bf00      	nop
 8001180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001182:	bc08      	pop	{r3}
 8001184:	469e      	mov	lr, r3
 8001186:	4770      	bx	lr

08001188 <_fini>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	bf00      	nop
 800118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118e:	bc08      	pop	{r3}
 8001190:	469e      	mov	lr, r3
 8001192:	4770      	bx	lr
